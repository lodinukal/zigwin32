//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (81)
//--------------------------------------------------------------------------------
pub const DEVPKEY_DeviceInterface_Serial_UsbVendorId = DEVPROPKEY { .fmtid = Guid.initIntString("1282142556, 19459, 19116, 145, 245, 100, 192, 248, 82, 188, 244"), .pid = 2 };
pub const DEVPKEY_DeviceInterface_Serial_UsbProductId = DEVPROPKEY { .fmtid = Guid.initIntString("1282142556, 19459, 19116, 145, 245, 100, 192, 248, 82, 188, 244"), .pid = 3 };
pub const DEVPKEY_DeviceInterface_Serial_PortName = DEVPROPKEY { .fmtid = Guid.initIntString("1282142556, 19459, 19116, 145, 245, 100, 192, 248, 82, 188, 244"), .pid = 4 };
pub const IOCTL_SERIAL_SET_BAUD_RATE = @as(u32, 1769476);
pub const IOCTL_SERIAL_SET_QUEUE_SIZE = @as(u32, 1769480);
pub const IOCTL_SERIAL_SET_LINE_CONTROL = @as(u32, 1769484);
pub const IOCTL_SERIAL_SET_BREAK_ON = @as(u32, 1769488);
pub const IOCTL_SERIAL_SET_BREAK_OFF = @as(u32, 1769492);
pub const IOCTL_SERIAL_IMMEDIATE_CHAR = @as(u32, 1769496);
pub const IOCTL_SERIAL_SET_TIMEOUTS = @as(u32, 1769500);
pub const IOCTL_SERIAL_GET_TIMEOUTS = @as(u32, 1769504);
pub const IOCTL_SERIAL_SET_DTR = @as(u32, 1769508);
pub const IOCTL_SERIAL_CLR_DTR = @as(u32, 1769512);
pub const IOCTL_SERIAL_RESET_DEVICE = @as(u32, 1769516);
pub const IOCTL_SERIAL_SET_RTS = @as(u32, 1769520);
pub const IOCTL_SERIAL_CLR_RTS = @as(u32, 1769524);
pub const IOCTL_SERIAL_SET_XOFF = @as(u32, 1769528);
pub const IOCTL_SERIAL_SET_XON = @as(u32, 1769532);
pub const IOCTL_SERIAL_GET_WAIT_MASK = @as(u32, 1769536);
pub const IOCTL_SERIAL_SET_WAIT_MASK = @as(u32, 1769540);
pub const IOCTL_SERIAL_WAIT_ON_MASK = @as(u32, 1769544);
pub const IOCTL_SERIAL_PURGE = @as(u32, 1769548);
pub const IOCTL_SERIAL_GET_BAUD_RATE = @as(u32, 1769552);
pub const IOCTL_SERIAL_GET_LINE_CONTROL = @as(u32, 1769556);
pub const IOCTL_SERIAL_GET_CHARS = @as(u32, 1769560);
pub const IOCTL_SERIAL_SET_CHARS = @as(u32, 1769564);
pub const IOCTL_SERIAL_GET_HANDFLOW = @as(u32, 1769568);
pub const IOCTL_SERIAL_SET_HANDFLOW = @as(u32, 1769572);
pub const IOCTL_SERIAL_GET_MODEMSTATUS = @as(u32, 1769576);
pub const IOCTL_SERIAL_GET_COMMSTATUS = @as(u32, 1769580);
pub const IOCTL_SERIAL_XOFF_COUNTER = @as(u32, 1769584);
pub const IOCTL_SERIAL_GET_PROPERTIES = @as(u32, 1769588);
pub const IOCTL_SERIAL_GET_DTRRTS = @as(u32, 1769592);
pub const IOCTL_SERIAL_CONFIG_SIZE = @as(u32, 1769600);
pub const IOCTL_SERIAL_GET_COMMCONFIG = @as(u32, 1769604);
pub const IOCTL_SERIAL_SET_COMMCONFIG = @as(u32, 1769608);
pub const IOCTL_SERIAL_GET_STATS = @as(u32, 1769612);
pub const IOCTL_SERIAL_CLEAR_STATS = @as(u32, 1769616);
pub const IOCTL_SERIAL_GET_MODEM_CONTROL = @as(u32, 1769620);
pub const IOCTL_SERIAL_SET_MODEM_CONTROL = @as(u32, 1769624);
pub const IOCTL_SERIAL_SET_FIFO_CONTROL = @as(u32, 1769628);
pub const IOCTL_SERIAL_APPLY_DEFAULT_CONFIGURATION = @as(u32, 1769632);
pub const IOCTL_SERIAL_SET_INTERVAL_TIMER_RESOLUTION = @as(u32, 1769636);
pub const IOCTL_SERIAL_INTERNAL_DO_WAIT_WAKE = @as(u32, 1769476);
pub const IOCTL_SERIAL_INTERNAL_CANCEL_WAIT_WAKE = @as(u32, 1769480);
pub const IOCTL_SERIAL_INTERNAL_BASIC_SETTINGS = @as(u32, 1769484);
pub const IOCTL_SERIAL_INTERNAL_RESTORE_SETTINGS = @as(u32, 1769488);
pub const SERIAL_EV_RXCHAR = @as(u32, 1);
pub const SERIAL_EV_RXFLAG = @as(u32, 2);
pub const SERIAL_EV_TXEMPTY = @as(u32, 4);
pub const SERIAL_EV_CTS = @as(u32, 8);
pub const SERIAL_EV_DSR = @as(u32, 16);
pub const SERIAL_EV_RLSD = @as(u32, 32);
pub const SERIAL_EV_BREAK = @as(u32, 64);
pub const SERIAL_EV_ERR = @as(u32, 128);
pub const SERIAL_EV_RING = @as(u32, 256);
pub const SERIAL_EV_PERR = @as(u32, 512);
pub const SERIAL_EV_RX80FULL = @as(u32, 1024);
pub const SERIAL_EV_EVENT1 = @as(u32, 2048);
pub const SERIAL_EV_EVENT2 = @as(u32, 4096);
pub const SERIAL_PURGE_TXABORT = @as(u32, 1);
pub const SERIAL_PURGE_RXABORT = @as(u32, 2);
pub const SERIAL_PURGE_TXCLEAR = @as(u32, 4);
pub const SERIAL_PURGE_RXCLEAR = @as(u32, 8);
pub const STOP_BIT_1 = @as(u32, 0);
pub const STOP_BITS_1_5 = @as(u32, 1);
pub const STOP_BITS_2 = @as(u32, 2);
pub const NO_PARITY = @as(u32, 0);
pub const ODD_PARITY = @as(u32, 1);
pub const EVEN_PARITY = @as(u32, 2);
pub const MARK_PARITY = @as(u32, 3);
pub const SPACE_PARITY = @as(u32, 4);
pub const SERIAL_LSRMST_ESCAPE = @as(u16, 0);
pub const SERIAL_LSRMST_LSR_DATA = @as(u16, 1);
pub const SERIAL_LSRMST_LSR_NODATA = @as(u16, 2);
pub const SERIAL_LSRMST_MST = @as(u16, 3);
pub const IOCTL_INTERNAL_SERENUM_REMOVE_SELF = @as(u32, 3604999);
pub const COMDB_MIN_PORTS_ARBITRATED = @as(u32, 256);
pub const COMDB_MAX_PORTS_ARBITRATED = @as(u32, 4096);
pub const CDB_REPORT_BITS = @as(u32, 0);
pub const CDB_REPORT_BYTES = @as(u32, 1);

//--------------------------------------------------------------------------------
// Section: Types (18)
//--------------------------------------------------------------------------------
// TODO: this type has an InvalidHandleValue of '0', what can Zig do with this information?
pub const HCOMDB = *opaque{};

pub const SERIALPERF_STATS = extern struct {
    ReceivedCount: u32,
    TransmittedCount: u32,
    FrameErrorCount: u32,
    SerialOverrunErrorCount: u32,
    BufferOverrunErrorCount: u32,
    ParityErrorCount: u32,
};

pub const SERIALCONFIG = extern struct {
    Size: u32,
    Version: u16,
    SubType: u32,
    ProvOffset: u32,
    ProviderSize: u32,
    ProviderData: [1]u16,
};

pub const SERIAL_LINE_CONTROL = extern struct {
    StopBits: u8,
    Parity: u8,
    WordLength: u8,
};

pub const SERIAL_TIMEOUTS = extern struct {
    ReadIntervalTimeout: u32,
    ReadTotalTimeoutMultiplier: u32,
    ReadTotalTimeoutConstant: u32,
    WriteTotalTimeoutMultiplier: u32,
    WriteTotalTimeoutConstant: u32,
};

pub const SERIAL_QUEUE_SIZE = extern struct {
    InSize: u32,
    OutSize: u32,
};

pub const SERIAL_BAUD_RATE = extern struct {
    BaudRate: u32,
};

pub const SERIAL_CHARS = extern struct {
    EofChar: u8,
    ErrorChar: u8,
    BreakChar: u8,
    EventChar: u8,
    XonChar: u8,
    XoffChar: u8,
};

pub const SERIAL_HANDFLOW = extern struct {
    ControlHandShake: u32,
    FlowReplace: u32,
    XonLimit: i32,
    XoffLimit: i32,
};

pub const SERIAL_BASIC_SETTINGS = extern struct {
    Timeouts: SERIAL_TIMEOUTS,
    HandFlow: SERIAL_HANDFLOW,
    RxFifo: u32,
    TxFifo: u32,
};

pub const SERIAL_STATUS = extern struct {
    Errors: u32,
    HoldReasons: u32,
    AmountInInQueue: u32,
    AmountInOutQueue: u32,
    EofReceived: BOOLEAN,
    WaitForImmediate: BOOLEAN,
};

pub const SERIAL_XOFF_COUNTER = extern struct {
    Timeout: u32,
    Counter: i32,
    XoffChar: u8,
};

pub const SERIAL_COMMPROP = extern struct {
    PacketLength: u16,
    PacketVersion: u16,
    ServiceMask: u32,
    Reserved1: u32,
    MaxTxQueue: u32,
    MaxRxQueue: u32,
    MaxBaud: u32,
    ProvSubType: u32,
    ProvCapabilities: u32,
    SettableParams: u32,
    SettableBaud: u32,
    SettableData: u16,
    SettableStopParity: u16,
    CurrentTxQueue: u32,
    CurrentRxQueue: u32,
    ProvSpec1: u32,
    ProvSpec2: u32,
    ProvChar: [1]u16,
};

pub const SERENUM_PORT_DESC = extern struct {
    Size: u32,
    PortHandle: ?*anyopaque,
    PortAddress: i64,
    Reserved: [1]u16,
};

pub const PSERENUM_READPORT = switch (@import("builtin").zig_backend) {
    .stage1 => fn(
        SerPortAddress: ?*anyopaque,
    ) callconv(@import("std").os.windows.WINAPI) u8,
    else => *const fn(
        SerPortAddress: ?*anyopaque,
    ) callconv(@import("std").os.windows.WINAPI) u8,
} ;

pub const PSERENUM_WRITEPORT = switch (@import("builtin").zig_backend) {
    .stage1 => fn(
        SerPortAddress: ?*anyopaque,
        Value: u8,
    ) callconv(@import("std").os.windows.WINAPI) void,
    else => *const fn(
        SerPortAddress: ?*anyopaque,
        Value: u8,
    ) callconv(@import("std").os.windows.WINAPI) void,
} ;

pub const SERENUM_PORTION = enum(i32) {
    FirstHalf = 0,
    SecondHalf = 1,
    Whole = 2,
};
pub const SerenumFirstHalf = SERENUM_PORTION.FirstHalf;
pub const SerenumSecondHalf = SERENUM_PORTION.SecondHalf;
pub const SerenumWhole = SERENUM_PORTION.Whole;

pub const SERENUM_PORT_PARAMETERS = extern struct {
    Size: u32,
    ReadAccessor: ?PSERENUM_READPORT,
    WriteAccessor: ?PSERENUM_WRITEPORT,
    SerPortAddress: ?*anyopaque,
    HardwareHandle: ?*anyopaque,
    Portion: SERENUM_PORTION,
    NumberAxis: u16,
    Reserved: [3]u16,
};


//--------------------------------------------------------------------------------
// Section: Functions (7)
//--------------------------------------------------------------------------------
pub extern "msports" fn ComDBOpen(
    PHComDB: ?*?HCOMDB,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "msports" fn ComDBClose(
    HComDB: ?HCOMDB,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "msports" fn ComDBGetCurrentPortUsage(
    HComDB: ?HCOMDB,
    // TODO: what to do with BytesParamIndex 2?
    Buffer: ?*u8,
    BufferSize: u32,
    ReportType: u32,
    MaxPortsReported: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "msports" fn ComDBClaimNextFreePort(
    HComDB: ?HCOMDB,
    ComNumber: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "msports" fn ComDBClaimPort(
    HComDB: ?HCOMDB,
    ComNumber: u32,
    ForceClaim: BOOL,
    Forced: ?*BOOL,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "msports" fn ComDBReleasePort(
    HComDB: ?HCOMDB,
    ComNumber: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "msports" fn ComDBResizeDatabase(
    HComDB: ?HCOMDB,
    NewSize: u32,
) callconv(@import("std").os.windows.WINAPI) i32;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("../../../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    .unspecified => if (@import("builtin").is_test) struct {
    } else struct {
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (4)
//--------------------------------------------------------------------------------
const Guid = @import("../../../zig.zig").Guid;
const BOOL = @import("../../../windows/win32/foundation.zig").BOOL;
const BOOLEAN = @import("../../../windows/win32/foundation.zig").BOOLEAN;
const DEVPROPKEY = @import("../../../windows/win32/devices/properties.zig").DEVPROPKEY;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    if (@hasDecl(@This(), "PSERENUM_READPORT")) { _ = PSERENUM_READPORT; }
    if (@hasDecl(@This(), "PSERENUM_WRITEPORT")) { _ = PSERENUM_WRITEPORT; }

    @setEvalBranchQuota(
        comptime @import("std").meta.declarations(@This()).len * 3
    );

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
