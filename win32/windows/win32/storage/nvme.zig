//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (44)
//--------------------------------------------------------------------------------
pub const NVME_IDENTIFY_CNS_DESCRIPTOR_NAMESPACE_SIZE = @as(u32, 4096);
pub const GUID_OCP_DEVICE_SMART_INFORMATIONGuid = Guid.initString("2810afc5-bfea-a4f2-9c4f-6f7cc914d5af");
pub const GUID_OCP_DEVICE_SMART_INFORMATION = Guid.initString("2810afc5-bfea-a4f2-9c4f-6f7cc914d5af");
pub const GUID_WCS_DEVICE_SMART_ATTRIBUTESGuid = Guid.initString("2810afc5-bfea-a4f2-9c4f-6f7cc914d5af");
pub const GUID_WCS_DEVICE_SMART_ATTRIBUTES = Guid.initString("2810afc5-bfea-a4f2-9c4f-6f7cc914d5af");
pub const GUID_OCP_DEVICE_ERROR_RECOVERYGuid = Guid.initString("2131d944-30fe-ae34-ab4d-fd3dba83195a");
pub const GUID_OCP_DEVICE_ERROR_RECOVERY = Guid.initString("2131d944-30fe-ae34-ab4d-fd3dba83195a");
pub const GUID_WCS_DEVICE_ERROR_RECOVERYGuid = Guid.initString("2131d944-30fe-ae34-ab4d-fd3dba83195a");
pub const GUID_WCS_DEVICE_ERROR_RECOVERY = Guid.initString("2131d944-30fe-ae34-ab4d-fd3dba83195a");
pub const GUID_OCP_DEVICE_FIRMWARE_ACTIVATION_HISTORYGuid = Guid.initString("769a796d-dab4-a3f6-e24d-b28aacf31cd1");
pub const GUID_OCP_DEVICE_FIRMWARE_ACTIVATION_HISTORY = Guid.initString("769a796d-dab4-a3f6-e24d-b28aacf31cd1");
pub const GUID_OCP_DEVICE_LATENCY_MONITORGuid = Guid.initString("8cc07a92-84d0-9c6c-7043-e6d4585ed485");
pub const GUID_OCP_DEVICE_LATENCY_MONITOR = Guid.initString("8cc07a92-84d0-9c6c-7043-e6d4585ed485");
pub const GUID_OCP_DEVICE_DEVICE_CAPABILITIESGuid = Guid.initString("0d054297-e1d1-98c9-5d49-584b913c05b7");
pub const GUID_OCP_DEVICE_DEVICE_CAPABILITIES = Guid.initString("0d054297-e1d1-98c9-5d49-584b913c05b7");
pub const GUID_OCP_DEVICE_UNSUPPORTED_REQUIREMENTSGuid = Guid.initString("0e9c722f-2399-bb2c-6348-32d0b798bbc7");
pub const GUID_OCP_DEVICE_UNSUPPORTED_REQUIREMENTS = Guid.initString("0e9c722f-2399-bb2c-6348-32d0b798bbc7");
pub const GUID_OCP_DEVICE_TCG_CONFIGURATIONGuid = Guid.initString("bd244006-e07e-83e6-c047-54fa9d2ae054");
pub const GUID_OCP_DEVICE_TCG_CONFIGURATION = Guid.initString("bd244006-e07e-83e6-c047-54fa9d2ae054");
pub const GUID_OCP_DEVICE_TCG_HISTORYGuid = Guid.initString("704b513e-09c6-9490-274e-d0969690d788");
pub const GUID_OCP_DEVICE_TCG_HISTORY = Guid.initString("704b513e-09c6-9490-274e-d0969690d788");
pub const GUID_MFND_CHILD_CONTROLLER_EVENT_LOG_PAGEGuid = Guid.initString("98bcce18-a5f0-bf35-a544-d97f259d669c");
pub const GUID_MFND_CHILD_CONTROLLER_EVENT_LOG_PAGE = Guid.initString("98bcce18-a5f0-bf35-a544-d97f259d669c");
pub const NVME_WCS_DEVICE_SMART_ATTRIBUTES_LOG_VERSION_2 = @as(u32, 2);
pub const NVME_OCP_DEVICE_SMART_INFORMATION_LOG_VERSION_3 = @as(u32, 3);
pub const NVME_WCS_DEVICE_ERROR_RECOVERY_LOG_VERSION_1 = @as(u32, 1);
pub const NVME_OCP_DEVICE_ERROR_RECOVERY_LOG_VERSION_2 = @as(u32, 2);
pub const FIRMWARE_ACTIVATION_HISTORY_ENTRY_VERSION_1 = @as(u32, 1);
pub const NVME_OCP_DEVICE_FIRMWARE_ACTIVATION_HISTORY_LOG_VERSION_1 = @as(u32, 1);
pub const NVME_OCP_DEVICE_LATENCY_MONITOR_LOG_VERSION_1 = @as(u32, 1);
pub const NVME_OCP_DEVICE_CAPABILITIES_LOG_VERSION_1 = @as(u32, 1);
pub const NVME_OCP_DEVICE_UNSUPPORTED_REQUIREMENTS_LOG_VERSION_1 = @as(u32, 1);
pub const NVME_OCP_DEVICE_TCG_CONFIGURATION_LOG_VERSION_1 = @as(u32, 1);
pub const TCG_HISTORY_ENTRY_VERSION_1 = @as(u32, 1);
pub const NVME_OCP_DEVICE_TCG_HISTORY_LOG_VERSION_1 = @as(u32, 1);
pub const NVME_MAX_HOST_IDENTIFIER_SIZE = @as(u32, 16);
pub const NVME_HOST_IDENTIFIER_SIZE = @as(u32, 8);
pub const NVME_EXTENDED_HOST_IDENTIFIER_SIZE = @as(u32, 16);
pub const NVME_MAX_LOG_SIZE = @as(u32, 4096);
pub const NVME_TELEMETRY_DATA_BLOCK_SIZE = @as(u32, 512);
pub const NVME_STREAMS_ID_MIN = @as(u32, 1);
pub const NVME_STREAMS_ID_MAX = @as(u32, 65535);
pub const NVME_STREAMS_GET_STATUS_MAX_IDS = @as(u32, 65535);
pub const NVME_NAMESPACE_ALL = @as(u32, 4294967295);

//--------------------------------------------------------------------------------
// Section: Types (254)
//--------------------------------------------------------------------------------
pub const NVME_AMS_OPTION = enum(i32) {
    ROUND_ROBIN = 0,
    WEIGHTED_ROUND_ROBIN_URGENT = 1,
};
pub const NVME_AMS_ROUND_ROBIN = NVME_AMS_OPTION.ROUND_ROBIN;
pub const NVME_AMS_WEIGHTED_ROUND_ROBIN_URGENT = NVME_AMS_OPTION.WEIGHTED_ROUND_ROBIN_URGENT;

pub const NVME_CONTROLLER_CAPABILITIES = extern union {
    Anonymous: extern struct {
        _bitfield: u64,
    },
    AsUlonglong: u64,
};

pub const NVME_VERSION = extern union {
    Anonymous: extern struct {
        _bitfield: u32,
    },
    AsUlong: u32,
};

pub const NVME_CC_SHN_SHUTDOWN_NOTIFICATIONS = enum(i32) {
    NO_NOTIFICATION = 0,
    NORMAL_SHUTDOWN = 1,
    ABRUPT_SHUTDOWN = 2,
};
pub const NVME_CC_SHN_NO_NOTIFICATION = NVME_CC_SHN_SHUTDOWN_NOTIFICATIONS.NO_NOTIFICATION;
pub const NVME_CC_SHN_NORMAL_SHUTDOWN = NVME_CC_SHN_SHUTDOWN_NOTIFICATIONS.NORMAL_SHUTDOWN;
pub const NVME_CC_SHN_ABRUPT_SHUTDOWN = NVME_CC_SHN_SHUTDOWN_NOTIFICATIONS.ABRUPT_SHUTDOWN;

pub const NVME_CSS_COMMAND_SETS = enum(i32) {
    NVM_COMMAND_SET = 0,
    ALL_SUPPORTED_IO_COMMAND_SET = 6,
    ADMIN_COMMAND_SET_ONLY = 7,
};
pub const NVME_CSS_NVM_COMMAND_SET = NVME_CSS_COMMAND_SETS.NVM_COMMAND_SET;
pub const NVME_CSS_ALL_SUPPORTED_IO_COMMAND_SET = NVME_CSS_COMMAND_SETS.ALL_SUPPORTED_IO_COMMAND_SET;
pub const NVME_CSS_ADMIN_COMMAND_SET_ONLY = NVME_CSS_COMMAND_SETS.ADMIN_COMMAND_SET_ONLY;

pub const NVME_CONTROLLER_CONFIGURATION = extern union {
    Anonymous: extern struct {
        _bitfield: u32,
    },
    AsUlong: u32,
};

pub const NVME_CSTS_SHST_SHUTDOWN_STATUS = enum(i32) {
    NO_SHUTDOWN = 0,
    SHUTDOWN_IN_PROCESS = 1,
    SHUTDOWN_COMPLETED = 2,
};
pub const NVME_CSTS_SHST_NO_SHUTDOWN = NVME_CSTS_SHST_SHUTDOWN_STATUS.NO_SHUTDOWN;
pub const NVME_CSTS_SHST_SHUTDOWN_IN_PROCESS = NVME_CSTS_SHST_SHUTDOWN_STATUS.SHUTDOWN_IN_PROCESS;
pub const NVME_CSTS_SHST_SHUTDOWN_COMPLETED = NVME_CSTS_SHST_SHUTDOWN_STATUS.SHUTDOWN_COMPLETED;

pub const NVME_CONTROLLER_STATUS = extern union {
    Anonymous: extern struct {
        _bitfield: u32,
    },
    AsUlong: u32,
};

pub const NVME_NVM_SUBSYSTEM_RESET = extern struct {
    NSSRC: u32,
};

pub const NVME_ADMIN_QUEUE_ATTRIBUTES = extern union {
    Anonymous: extern struct {
        _bitfield: u32,
    },
    AsUlong: u32,
};

pub const NVME_ADMIN_SUBMISSION_QUEUE_BASE_ADDRESS = extern union {
    Anonymous: extern struct {
        _bitfield: u64,
    },
    AsUlonglong: u64,
};

pub const NVME_ADMIN_COMPLETION_QUEUE_BASE_ADDRESS = extern union {
    Anonymous: extern struct {
        _bitfield: u64,
    },
    AsUlonglong: u64,
};

pub const NVME_CONTROLLER_MEMORY_BUFFER_LOCATION = extern union {
    Anonymous: extern struct {
        _bitfield: u32,
    },
    AsUlong: u32,
};

pub const NVME_CMBSZ_SIZE_UNITS = enum(i32) {
    @"4KB" = 0,
    @"64KB" = 1,
    @"1MB" = 2,
    @"16MB" = 3,
    @"256MB" = 4,
    @"4GB" = 5,
    @"64GB" = 6,
};
pub const NVME_CMBSZ_SIZE_UNITS_4KB = NVME_CMBSZ_SIZE_UNITS.@"4KB";
pub const NVME_CMBSZ_SIZE_UNITS_64KB = NVME_CMBSZ_SIZE_UNITS.@"64KB";
pub const NVME_CMBSZ_SIZE_UNITS_1MB = NVME_CMBSZ_SIZE_UNITS.@"1MB";
pub const NVME_CMBSZ_SIZE_UNITS_16MB = NVME_CMBSZ_SIZE_UNITS.@"16MB";
pub const NVME_CMBSZ_SIZE_UNITS_256MB = NVME_CMBSZ_SIZE_UNITS.@"256MB";
pub const NVME_CMBSZ_SIZE_UNITS_4GB = NVME_CMBSZ_SIZE_UNITS.@"4GB";
pub const NVME_CMBSZ_SIZE_UNITS_64GB = NVME_CMBSZ_SIZE_UNITS.@"64GB";

pub const NVME_CONTROLLER_MEMORY_BUFFER_SIZE = extern union {
    Anonymous: extern struct {
        _bitfield: u32,
    },
    AsUlong: u32,
};

pub const NVME_SUBMISSION_QUEUE_TAIL_DOORBELL = extern union {
    Anonymous: extern struct {
        _bitfield: u32,
    },
    AsUlong: u32,
};

pub const NVME_COMPLETION_QUEUE_HEAD_DOORBELL = extern union {
    Anonymous: extern struct {
        _bitfield: u32,
    },
    AsUlong: u32,
};

pub const NVME_CONTROLLER_REGISTERS = extern struct {
    CAP: NVME_CONTROLLER_CAPABILITIES,
    VS: NVME_VERSION,
    INTMS: u32,
    INTMC: u32,
    CC: NVME_CONTROLLER_CONFIGURATION,
    Reserved0: u32,
    CSTS: NVME_CONTROLLER_STATUS,
    NSSR: NVME_NVM_SUBSYSTEM_RESET,
    AQA: NVME_ADMIN_QUEUE_ATTRIBUTES,
    ASQ: NVME_ADMIN_SUBMISSION_QUEUE_BASE_ADDRESS,
    ACQ: NVME_ADMIN_COMPLETION_QUEUE_BASE_ADDRESS,
    CMBLOC: NVME_CONTROLLER_MEMORY_BUFFER_LOCATION,
    CMBSZ: NVME_CONTROLLER_MEMORY_BUFFER_SIZE,
    Reserved2: [944]u32,
    Reserved3: [64]u32,
    Doorbells: [1]u32,
};

pub const NVME_COMMAND_STATUS = extern union {
    Anonymous: extern struct {
        _bitfield: u16,
    },
    AsUshort: u16,
};

pub const NVME_COMPLETION_ENTRY = extern struct {
    DW0: u32,
    DW1: u32,
    DW2: extern union {
        Anonymous: extern struct {
            SQHD: u16,
            SQID: u16,
        },
        AsUlong: u32,
    },
    DW3: extern union {
        Anonymous: extern struct {
            CID: u16,
            Status: NVME_COMMAND_STATUS,
        },
        AsUlong: u32,
    },
};

pub const NVME_ASYNC_EVENT_TYPES = enum(i32) {
    ERROR_STATUS = 0,
    HEALTH_STATUS = 1,
    NOTICE = 2,
    IO_COMMAND_SET_STATUS = 6,
    VENDOR_SPECIFIC = 7,
};
pub const NVME_ASYNC_EVENT_TYPE_ERROR_STATUS = NVME_ASYNC_EVENT_TYPES.ERROR_STATUS;
pub const NVME_ASYNC_EVENT_TYPE_HEALTH_STATUS = NVME_ASYNC_EVENT_TYPES.HEALTH_STATUS;
pub const NVME_ASYNC_EVENT_TYPE_NOTICE = NVME_ASYNC_EVENT_TYPES.NOTICE;
pub const NVME_ASYNC_EVENT_TYPE_IO_COMMAND_SET_STATUS = NVME_ASYNC_EVENT_TYPES.IO_COMMAND_SET_STATUS;
pub const NVME_ASYNC_EVENT_TYPE_VENDOR_SPECIFIC = NVME_ASYNC_EVENT_TYPES.VENDOR_SPECIFIC;

pub const NVME_ASYNC_EVENT_ERROR_STATUS_CODES = enum(i32) {
    INVALID_SUBMISSION_QUEUE = 0,
    INVALID_DOORBELL_WRITE_VALUE = 1,
    DIAG_FAILURE = 2,
    PERSISTENT_INTERNAL_DEVICE_ERROR = 3,
    TRANSIENT_INTERNAL_DEVICE_ERROR = 4,
    FIRMWARE_IMAGE_LOAD_ERROR = 5,
};
pub const NVME_ASYNC_ERROR_INVALID_SUBMISSION_QUEUE = NVME_ASYNC_EVENT_ERROR_STATUS_CODES.INVALID_SUBMISSION_QUEUE;
pub const NVME_ASYNC_ERROR_INVALID_DOORBELL_WRITE_VALUE = NVME_ASYNC_EVENT_ERROR_STATUS_CODES.INVALID_DOORBELL_WRITE_VALUE;
pub const NVME_ASYNC_ERROR_DIAG_FAILURE = NVME_ASYNC_EVENT_ERROR_STATUS_CODES.DIAG_FAILURE;
pub const NVME_ASYNC_ERROR_PERSISTENT_INTERNAL_DEVICE_ERROR = NVME_ASYNC_EVENT_ERROR_STATUS_CODES.PERSISTENT_INTERNAL_DEVICE_ERROR;
pub const NVME_ASYNC_ERROR_TRANSIENT_INTERNAL_DEVICE_ERROR = NVME_ASYNC_EVENT_ERROR_STATUS_CODES.TRANSIENT_INTERNAL_DEVICE_ERROR;
pub const NVME_ASYNC_ERROR_FIRMWARE_IMAGE_LOAD_ERROR = NVME_ASYNC_EVENT_ERROR_STATUS_CODES.FIRMWARE_IMAGE_LOAD_ERROR;

pub const NVME_ASYNC_EVENT_HEALTH_STATUS_CODES = enum(i32) {
    NVM_SUBSYSTEM_RELIABILITY = 0,
    TEMPERATURE_THRESHOLD = 1,
    SPARE_BELOW_THRESHOLD = 2,
};
pub const NVME_ASYNC_HEALTH_NVM_SUBSYSTEM_RELIABILITY = NVME_ASYNC_EVENT_HEALTH_STATUS_CODES.NVM_SUBSYSTEM_RELIABILITY;
pub const NVME_ASYNC_HEALTH_TEMPERATURE_THRESHOLD = NVME_ASYNC_EVENT_HEALTH_STATUS_CODES.TEMPERATURE_THRESHOLD;
pub const NVME_ASYNC_HEALTH_SPARE_BELOW_THRESHOLD = NVME_ASYNC_EVENT_HEALTH_STATUS_CODES.SPARE_BELOW_THRESHOLD;

pub const NVME_ASYNC_EVENT_NOTICE_CODES = enum(i32) {
    NAMESPACE_ATTRIBUTE_CHANGED = 0,
    FIRMWARE_ACTIVATION_STARTING = 1,
    TELEMETRY_LOG_CHANGED = 2,
    ASYMMETRIC_ACCESS_CHANGE = 3,
    PREDICTABLE_LATENCY_EVENT_AGGREGATE_LOG_CHANGE = 4,
    LBA_STATUS_INFORMATION_ALERT = 5,
    ENDURANCE_GROUP_EVENT_AGGREGATE_LOG_CHANGE = 6,
    ZONE_DESCRIPTOR_CHANGED = 239,
};
pub const NVME_ASYNC_NOTICE_NAMESPACE_ATTRIBUTE_CHANGED = NVME_ASYNC_EVENT_NOTICE_CODES.NAMESPACE_ATTRIBUTE_CHANGED;
pub const NVME_ASYNC_NOTICE_FIRMWARE_ACTIVATION_STARTING = NVME_ASYNC_EVENT_NOTICE_CODES.FIRMWARE_ACTIVATION_STARTING;
pub const NVME_ASYNC_NOTICE_TELEMETRY_LOG_CHANGED = NVME_ASYNC_EVENT_NOTICE_CODES.TELEMETRY_LOG_CHANGED;
pub const NVME_ASYNC_NOTICE_ASYMMETRIC_ACCESS_CHANGE = NVME_ASYNC_EVENT_NOTICE_CODES.ASYMMETRIC_ACCESS_CHANGE;
pub const NVME_ASYNC_NOTICE_PREDICTABLE_LATENCY_EVENT_AGGREGATE_LOG_CHANGE = NVME_ASYNC_EVENT_NOTICE_CODES.PREDICTABLE_LATENCY_EVENT_AGGREGATE_LOG_CHANGE;
pub const NVME_ASYNC_NOTICE_LBA_STATUS_INFORMATION_ALERT = NVME_ASYNC_EVENT_NOTICE_CODES.LBA_STATUS_INFORMATION_ALERT;
pub const NVME_ASYNC_NOTICE_ENDURANCE_GROUP_EVENT_AGGREGATE_LOG_CHANGE = NVME_ASYNC_EVENT_NOTICE_CODES.ENDURANCE_GROUP_EVENT_AGGREGATE_LOG_CHANGE;
pub const NVME_ASYNC_NOTICE_ZONE_DESCRIPTOR_CHANGED = NVME_ASYNC_EVENT_NOTICE_CODES.ZONE_DESCRIPTOR_CHANGED;

pub const NVME_ASYNC_EVENT_IO_COMMAND_SET_STATUS_CODES = enum(i32) {
    ET_RESERVATION_LOG_PAGE_AVAILABLE = 0,
    ANITIZE_OPERATION_COMPLETED = 1,
    ANITIZE_OPERATION_COMPLETED_WITH_UNEXPECTED_DEALLOCATION = 2,
};
pub const NVME_ASYNC_IO_CMD_SET_RESERVATION_LOG_PAGE_AVAILABLE = NVME_ASYNC_EVENT_IO_COMMAND_SET_STATUS_CODES.ET_RESERVATION_LOG_PAGE_AVAILABLE;
pub const NVME_ASYNC_IO_CMD_SANITIZE_OPERATION_COMPLETED = NVME_ASYNC_EVENT_IO_COMMAND_SET_STATUS_CODES.ANITIZE_OPERATION_COMPLETED;
pub const NVME_ASYNC_IO_CMD_SANITIZE_OPERATION_COMPLETED_WITH_UNEXPECTED_DEALLOCATION = NVME_ASYNC_EVENT_IO_COMMAND_SET_STATUS_CODES.ANITIZE_OPERATION_COMPLETED_WITH_UNEXPECTED_DEALLOCATION;

pub const NVME_COMPLETION_DW0_ASYNC_EVENT_REQUEST = extern struct {
    _bitfield: u32,
};

pub const NVME_STATUS_TYPES = enum(i32) {
    GENERIC_COMMAND = 0,
    COMMAND_SPECIFIC = 1,
    MEDIA_ERROR = 2,
    VENDOR_SPECIFIC = 7,
};
pub const NVME_STATUS_TYPE_GENERIC_COMMAND = NVME_STATUS_TYPES.GENERIC_COMMAND;
pub const NVME_STATUS_TYPE_COMMAND_SPECIFIC = NVME_STATUS_TYPES.COMMAND_SPECIFIC;
pub const NVME_STATUS_TYPE_MEDIA_ERROR = NVME_STATUS_TYPES.MEDIA_ERROR;
pub const NVME_STATUS_TYPE_VENDOR_SPECIFIC = NVME_STATUS_TYPES.VENDOR_SPECIFIC;

pub const NVME_STATUS_GENERIC_COMMAND_CODES = enum(i32) {
    SUCCESS_COMPLETION = 0,
    INVALID_COMMAND_OPCODE = 1,
    INVALID_FIELD_IN_COMMAND = 2,
    COMMAND_ID_CONFLICT = 3,
    DATA_TRANSFER_ERROR = 4,
    COMMAND_ABORTED_DUE_TO_POWER_LOSS_NOTIFICATION = 5,
    INTERNAL_DEVICE_ERROR = 6,
    COMMAND_ABORT_REQUESTED = 7,
    COMMAND_ABORTED_DUE_TO_SQ_DELETION = 8,
    COMMAND_ABORTED_DUE_TO_FAILED_FUSED_COMMAND = 9,
    COMMAND_ABORTED_DUE_TO_FAILED_MISSING_COMMAND = 10,
    INVALID_NAMESPACE_OR_FORMAT = 11,
    COMMAND_SEQUENCE_ERROR = 12,
    INVALID_SGL_LAST_SEGMENT_DESCR = 13,
    INVALID_NUMBER_OF_SGL_DESCR = 14,
    DATA_SGL_LENGTH_INVALID = 15,
    METADATA_SGL_LENGTH_INVALID = 16,
    SGL_DESCR_TYPE_INVALID = 17,
    INVALID_USE_OF_CONTROLLER_MEMORY_BUFFER = 18,
    PRP_OFFSET_INVALID = 19,
    ATOMIC_WRITE_UNIT_EXCEEDED = 20,
    OPERATION_DENIED = 21,
    SGL_OFFSET_INVALID = 22,
    RESERVED = 23,
    HOST_IDENTIFIER_INCONSISTENT_FORMAT = 24,
    KEEP_ALIVE_TIMEOUT_EXPIRED = 25,
    KEEP_ALIVE_TIMEOUT_INVALID = 26,
    COMMAND_ABORTED_DUE_TO_PREEMPT_ABORT = 27,
    SANITIZE_FAILED = 28,
    SANITIZE_IN_PROGRESS = 29,
    SGL_DATA_BLOCK_GRANULARITY_INVALID = 30,
    DIRECTIVE_TYPE_INVALID = 112,
    DIRECTIVE_ID_INVALID = 113,
    NVM_LBA_OUT_OF_RANGE = 128,
    NVM_CAPACITY_EXCEEDED = 129,
    NVM_NAMESPACE_NOT_READY = 130,
    NVM_RESERVATION_CONFLICT = 131,
    FORMAT_IN_PROGRESS = 132,
};
pub const NVME_STATUS_SUCCESS_COMPLETION = NVME_STATUS_GENERIC_COMMAND_CODES.SUCCESS_COMPLETION;
pub const NVME_STATUS_INVALID_COMMAND_OPCODE = NVME_STATUS_GENERIC_COMMAND_CODES.INVALID_COMMAND_OPCODE;
pub const NVME_STATUS_INVALID_FIELD_IN_COMMAND = NVME_STATUS_GENERIC_COMMAND_CODES.INVALID_FIELD_IN_COMMAND;
pub const NVME_STATUS_COMMAND_ID_CONFLICT = NVME_STATUS_GENERIC_COMMAND_CODES.COMMAND_ID_CONFLICT;
pub const NVME_STATUS_DATA_TRANSFER_ERROR = NVME_STATUS_GENERIC_COMMAND_CODES.DATA_TRANSFER_ERROR;
pub const NVME_STATUS_COMMAND_ABORTED_DUE_TO_POWER_LOSS_NOTIFICATION = NVME_STATUS_GENERIC_COMMAND_CODES.COMMAND_ABORTED_DUE_TO_POWER_LOSS_NOTIFICATION;
pub const NVME_STATUS_INTERNAL_DEVICE_ERROR = NVME_STATUS_GENERIC_COMMAND_CODES.INTERNAL_DEVICE_ERROR;
pub const NVME_STATUS_COMMAND_ABORT_REQUESTED = NVME_STATUS_GENERIC_COMMAND_CODES.COMMAND_ABORT_REQUESTED;
pub const NVME_STATUS_COMMAND_ABORTED_DUE_TO_SQ_DELETION = NVME_STATUS_GENERIC_COMMAND_CODES.COMMAND_ABORTED_DUE_TO_SQ_DELETION;
pub const NVME_STATUS_COMMAND_ABORTED_DUE_TO_FAILED_FUSED_COMMAND = NVME_STATUS_GENERIC_COMMAND_CODES.COMMAND_ABORTED_DUE_TO_FAILED_FUSED_COMMAND;
pub const NVME_STATUS_COMMAND_ABORTED_DUE_TO_FAILED_MISSING_COMMAND = NVME_STATUS_GENERIC_COMMAND_CODES.COMMAND_ABORTED_DUE_TO_FAILED_MISSING_COMMAND;
pub const NVME_STATUS_INVALID_NAMESPACE_OR_FORMAT = NVME_STATUS_GENERIC_COMMAND_CODES.INVALID_NAMESPACE_OR_FORMAT;
pub const NVME_STATUS_COMMAND_SEQUENCE_ERROR = NVME_STATUS_GENERIC_COMMAND_CODES.COMMAND_SEQUENCE_ERROR;
pub const NVME_STATUS_INVALID_SGL_LAST_SEGMENT_DESCR = NVME_STATUS_GENERIC_COMMAND_CODES.INVALID_SGL_LAST_SEGMENT_DESCR;
pub const NVME_STATUS_INVALID_NUMBER_OF_SGL_DESCR = NVME_STATUS_GENERIC_COMMAND_CODES.INVALID_NUMBER_OF_SGL_DESCR;
pub const NVME_STATUS_DATA_SGL_LENGTH_INVALID = NVME_STATUS_GENERIC_COMMAND_CODES.DATA_SGL_LENGTH_INVALID;
pub const NVME_STATUS_METADATA_SGL_LENGTH_INVALID = NVME_STATUS_GENERIC_COMMAND_CODES.METADATA_SGL_LENGTH_INVALID;
pub const NVME_STATUS_SGL_DESCR_TYPE_INVALID = NVME_STATUS_GENERIC_COMMAND_CODES.SGL_DESCR_TYPE_INVALID;
pub const NVME_STATUS_INVALID_USE_OF_CONTROLLER_MEMORY_BUFFER = NVME_STATUS_GENERIC_COMMAND_CODES.INVALID_USE_OF_CONTROLLER_MEMORY_BUFFER;
pub const NVME_STATUS_PRP_OFFSET_INVALID = NVME_STATUS_GENERIC_COMMAND_CODES.PRP_OFFSET_INVALID;
pub const NVME_STATUS_ATOMIC_WRITE_UNIT_EXCEEDED = NVME_STATUS_GENERIC_COMMAND_CODES.ATOMIC_WRITE_UNIT_EXCEEDED;
pub const NVME_STATUS_OPERATION_DENIED = NVME_STATUS_GENERIC_COMMAND_CODES.OPERATION_DENIED;
pub const NVME_STATUS_SGL_OFFSET_INVALID = NVME_STATUS_GENERIC_COMMAND_CODES.SGL_OFFSET_INVALID;
pub const NVME_STATUS_RESERVED = NVME_STATUS_GENERIC_COMMAND_CODES.RESERVED;
pub const NVME_STATUS_HOST_IDENTIFIER_INCONSISTENT_FORMAT = NVME_STATUS_GENERIC_COMMAND_CODES.HOST_IDENTIFIER_INCONSISTENT_FORMAT;
pub const NVME_STATUS_KEEP_ALIVE_TIMEOUT_EXPIRED = NVME_STATUS_GENERIC_COMMAND_CODES.KEEP_ALIVE_TIMEOUT_EXPIRED;
pub const NVME_STATUS_KEEP_ALIVE_TIMEOUT_INVALID = NVME_STATUS_GENERIC_COMMAND_CODES.KEEP_ALIVE_TIMEOUT_INVALID;
pub const NVME_STATUS_COMMAND_ABORTED_DUE_TO_PREEMPT_ABORT = NVME_STATUS_GENERIC_COMMAND_CODES.COMMAND_ABORTED_DUE_TO_PREEMPT_ABORT;
pub const NVME_STATUS_SANITIZE_FAILED = NVME_STATUS_GENERIC_COMMAND_CODES.SANITIZE_FAILED;
pub const NVME_STATUS_SANITIZE_IN_PROGRESS = NVME_STATUS_GENERIC_COMMAND_CODES.SANITIZE_IN_PROGRESS;
pub const NVME_STATUS_SGL_DATA_BLOCK_GRANULARITY_INVALID = NVME_STATUS_GENERIC_COMMAND_CODES.SGL_DATA_BLOCK_GRANULARITY_INVALID;
pub const NVME_STATUS_DIRECTIVE_TYPE_INVALID = NVME_STATUS_GENERIC_COMMAND_CODES.DIRECTIVE_TYPE_INVALID;
pub const NVME_STATUS_DIRECTIVE_ID_INVALID = NVME_STATUS_GENERIC_COMMAND_CODES.DIRECTIVE_ID_INVALID;
pub const NVME_STATUS_NVM_LBA_OUT_OF_RANGE = NVME_STATUS_GENERIC_COMMAND_CODES.NVM_LBA_OUT_OF_RANGE;
pub const NVME_STATUS_NVM_CAPACITY_EXCEEDED = NVME_STATUS_GENERIC_COMMAND_CODES.NVM_CAPACITY_EXCEEDED;
pub const NVME_STATUS_NVM_NAMESPACE_NOT_READY = NVME_STATUS_GENERIC_COMMAND_CODES.NVM_NAMESPACE_NOT_READY;
pub const NVME_STATUS_NVM_RESERVATION_CONFLICT = NVME_STATUS_GENERIC_COMMAND_CODES.NVM_RESERVATION_CONFLICT;
pub const NVME_STATUS_FORMAT_IN_PROGRESS = NVME_STATUS_GENERIC_COMMAND_CODES.FORMAT_IN_PROGRESS;

pub const NVME_STATUS_COMMAND_SPECIFIC_CODES = enum(i32) {
    STATUS_COMPLETION_QUEUE_INVALID = 0,
    STATUS_INVALID_QUEUE_IDENTIFIER = 1,
    STATUS_MAX_QUEUE_SIZE_EXCEEDED = 2,
    STATUS_ABORT_COMMAND_LIMIT_EXCEEDED = 3,
    STATUS_ASYNC_EVENT_REQUEST_LIMIT_EXCEEDED = 5,
    STATUS_INVALID_FIRMWARE_SLOT = 6,
    STATUS_INVALID_FIRMWARE_IMAGE = 7,
    STATUS_INVALID_INTERRUPT_VECTOR = 8,
    STATUS_INVALID_LOG_PAGE = 9,
    STATUS_INVALID_FORMAT = 10,
    STATUS_FIRMWARE_ACTIVATION_REQUIRES_CONVENTIONAL_RESET = 11,
    STATUS_INVALID_QUEUE_DELETION = 12,
    STATUS_FEATURE_ID_NOT_SAVEABLE = 13,
    STATUS_FEATURE_NOT_CHANGEABLE = 14,
    STATUS_FEATURE_NOT_NAMESPACE_SPECIFIC = 15,
    STATUS_FIRMWARE_ACTIVATION_REQUIRES_NVM_SUBSYSTEM_RESET = 16,
    STATUS_FIRMWARE_ACTIVATION_REQUIRES_RESET = 17,
    STATUS_FIRMWARE_ACTIVATION_REQUIRES_MAX_TIME_VIOLATION = 18,
    STATUS_FIRMWARE_ACTIVATION_PROHIBITED = 19,
    STATUS_OVERLAPPING_RANGE = 20,
    STATUS_NAMESPACE_INSUFFICIENT_CAPACITY = 21,
    STATUS_NAMESPACE_IDENTIFIER_UNAVAILABLE = 22,
    STATUS_NAMESPACE_ALREADY_ATTACHED = 24,
    STATUS_NAMESPACE_IS_PRIVATE = 25,
    STATUS_NAMESPACE_NOT_ATTACHED = 26,
    STATUS_NAMESPACE_THIN_PROVISIONING_NOT_SUPPORTED = 27,
    STATUS_CONTROLLER_LIST_INVALID = 28,
    STATUS_DEVICE_SELF_TEST_IN_PROGRESS = 29,
    STATUS_BOOT_PARTITION_WRITE_PROHIBITED = 30,
    STATUS_INVALID_CONTROLLER_IDENTIFIER = 31,
    STATUS_INVALID_SECONDARY_CONTROLLER_STATE = 32,
    STATUS_INVALID_NUMBER_OF_CONTROLLER_RESOURCES = 33,
    STATUS_INVALID_RESOURCE_IDENTIFIER = 34,
    STATUS_SANITIZE_PROHIBITED_ON_PERSISTENT_MEMORY = 35,
    STATUS_INVALID_ANA_GROUP_IDENTIFIER = 36,
    STATUS_ANA_ATTACH_FAILED = 37,
    IO_COMMAND_SET_NOT_SUPPORTED = 41,
    IO_COMMAND_SET_NOT_ENABLED = 42,
    IO_COMMAND_SET_COMBINATION_REJECTED = 43,
    IO_COMMAND_SET_INVALID = 44,
    STATUS_STREAM_RESOURCE_ALLOCATION_FAILED = 127,
    // STATUS_ZONE_INVALID_FORMAT = 127, this enum value conflicts with STATUS_STREAM_RESOURCE_ALLOCATION_FAILED
    STATUS_NVM_CONFLICTING_ATTRIBUTES = 128,
    STATUS_NVM_INVALID_PROTECTION_INFORMATION = 129,
    STATUS_NVM_ATTEMPTED_WRITE_TO_READ_ONLY_RANGE = 130,
    STATUS_NVM_COMMAND_SIZE_LIMIT_EXCEEDED = 131,
    STATUS_ZONE_BOUNDARY_ERROR = 184,
    STATUS_ZONE_FULL = 185,
    STATUS_ZONE_READ_ONLY = 186,
    STATUS_ZONE_OFFLINE = 187,
    STATUS_ZONE_INVALID_WRITE = 188,
    STATUS_ZONE_TOO_MANY_ACTIVE = 189,
    STATUS_ZONE_TOO_MANY_OPEN = 190,
    STATUS_ZONE_INVALID_STATE_TRANSITION = 191,
};
pub const NVME_STATUS_COMPLETION_QUEUE_INVALID = NVME_STATUS_COMMAND_SPECIFIC_CODES.STATUS_COMPLETION_QUEUE_INVALID;
pub const NVME_STATUS_INVALID_QUEUE_IDENTIFIER = NVME_STATUS_COMMAND_SPECIFIC_CODES.STATUS_INVALID_QUEUE_IDENTIFIER;
pub const NVME_STATUS_MAX_QUEUE_SIZE_EXCEEDED = NVME_STATUS_COMMAND_SPECIFIC_CODES.STATUS_MAX_QUEUE_SIZE_EXCEEDED;
pub const NVME_STATUS_ABORT_COMMAND_LIMIT_EXCEEDED = NVME_STATUS_COMMAND_SPECIFIC_CODES.STATUS_ABORT_COMMAND_LIMIT_EXCEEDED;
pub const NVME_STATUS_ASYNC_EVENT_REQUEST_LIMIT_EXCEEDED = NVME_STATUS_COMMAND_SPECIFIC_CODES.STATUS_ASYNC_EVENT_REQUEST_LIMIT_EXCEEDED;
pub const NVME_STATUS_INVALID_FIRMWARE_SLOT = NVME_STATUS_COMMAND_SPECIFIC_CODES.STATUS_INVALID_FIRMWARE_SLOT;
pub const NVME_STATUS_INVALID_FIRMWARE_IMAGE = NVME_STATUS_COMMAND_SPECIFIC_CODES.STATUS_INVALID_FIRMWARE_IMAGE;
pub const NVME_STATUS_INVALID_INTERRUPT_VECTOR = NVME_STATUS_COMMAND_SPECIFIC_CODES.STATUS_INVALID_INTERRUPT_VECTOR;
pub const NVME_STATUS_INVALID_LOG_PAGE = NVME_STATUS_COMMAND_SPECIFIC_CODES.STATUS_INVALID_LOG_PAGE;
pub const NVME_STATUS_INVALID_FORMAT = NVME_STATUS_COMMAND_SPECIFIC_CODES.STATUS_INVALID_FORMAT;
pub const NVME_STATUS_FIRMWARE_ACTIVATION_REQUIRES_CONVENTIONAL_RESET = NVME_STATUS_COMMAND_SPECIFIC_CODES.STATUS_FIRMWARE_ACTIVATION_REQUIRES_CONVENTIONAL_RESET;
pub const NVME_STATUS_INVALID_QUEUE_DELETION = NVME_STATUS_COMMAND_SPECIFIC_CODES.STATUS_INVALID_QUEUE_DELETION;
pub const NVME_STATUS_FEATURE_ID_NOT_SAVEABLE = NVME_STATUS_COMMAND_SPECIFIC_CODES.STATUS_FEATURE_ID_NOT_SAVEABLE;
pub const NVME_STATUS_FEATURE_NOT_CHANGEABLE = NVME_STATUS_COMMAND_SPECIFIC_CODES.STATUS_FEATURE_NOT_CHANGEABLE;
pub const NVME_STATUS_FEATURE_NOT_NAMESPACE_SPECIFIC = NVME_STATUS_COMMAND_SPECIFIC_CODES.STATUS_FEATURE_NOT_NAMESPACE_SPECIFIC;
pub const NVME_STATUS_FIRMWARE_ACTIVATION_REQUIRES_NVM_SUBSYSTEM_RESET = NVME_STATUS_COMMAND_SPECIFIC_CODES.STATUS_FIRMWARE_ACTIVATION_REQUIRES_NVM_SUBSYSTEM_RESET;
pub const NVME_STATUS_FIRMWARE_ACTIVATION_REQUIRES_RESET = NVME_STATUS_COMMAND_SPECIFIC_CODES.STATUS_FIRMWARE_ACTIVATION_REQUIRES_RESET;
pub const NVME_STATUS_FIRMWARE_ACTIVATION_REQUIRES_MAX_TIME_VIOLATION = NVME_STATUS_COMMAND_SPECIFIC_CODES.STATUS_FIRMWARE_ACTIVATION_REQUIRES_MAX_TIME_VIOLATION;
pub const NVME_STATUS_FIRMWARE_ACTIVATION_PROHIBITED = NVME_STATUS_COMMAND_SPECIFIC_CODES.STATUS_FIRMWARE_ACTIVATION_PROHIBITED;
pub const NVME_STATUS_OVERLAPPING_RANGE = NVME_STATUS_COMMAND_SPECIFIC_CODES.STATUS_OVERLAPPING_RANGE;
pub const NVME_STATUS_NAMESPACE_INSUFFICIENT_CAPACITY = NVME_STATUS_COMMAND_SPECIFIC_CODES.STATUS_NAMESPACE_INSUFFICIENT_CAPACITY;
pub const NVME_STATUS_NAMESPACE_IDENTIFIER_UNAVAILABLE = NVME_STATUS_COMMAND_SPECIFIC_CODES.STATUS_NAMESPACE_IDENTIFIER_UNAVAILABLE;
pub const NVME_STATUS_NAMESPACE_ALREADY_ATTACHED = NVME_STATUS_COMMAND_SPECIFIC_CODES.STATUS_NAMESPACE_ALREADY_ATTACHED;
pub const NVME_STATUS_NAMESPACE_IS_PRIVATE = NVME_STATUS_COMMAND_SPECIFIC_CODES.STATUS_NAMESPACE_IS_PRIVATE;
pub const NVME_STATUS_NAMESPACE_NOT_ATTACHED = NVME_STATUS_COMMAND_SPECIFIC_CODES.STATUS_NAMESPACE_NOT_ATTACHED;
pub const NVME_STATUS_NAMESPACE_THIN_PROVISIONING_NOT_SUPPORTED = NVME_STATUS_COMMAND_SPECIFIC_CODES.STATUS_NAMESPACE_THIN_PROVISIONING_NOT_SUPPORTED;
pub const NVME_STATUS_CONTROLLER_LIST_INVALID = NVME_STATUS_COMMAND_SPECIFIC_CODES.STATUS_CONTROLLER_LIST_INVALID;
pub const NVME_STATUS_DEVICE_SELF_TEST_IN_PROGRESS = NVME_STATUS_COMMAND_SPECIFIC_CODES.STATUS_DEVICE_SELF_TEST_IN_PROGRESS;
pub const NVME_STATUS_BOOT_PARTITION_WRITE_PROHIBITED = NVME_STATUS_COMMAND_SPECIFIC_CODES.STATUS_BOOT_PARTITION_WRITE_PROHIBITED;
pub const NVME_STATUS_INVALID_CONTROLLER_IDENTIFIER = NVME_STATUS_COMMAND_SPECIFIC_CODES.STATUS_INVALID_CONTROLLER_IDENTIFIER;
pub const NVME_STATUS_INVALID_SECONDARY_CONTROLLER_STATE = NVME_STATUS_COMMAND_SPECIFIC_CODES.STATUS_INVALID_SECONDARY_CONTROLLER_STATE;
pub const NVME_STATUS_INVALID_NUMBER_OF_CONTROLLER_RESOURCES = NVME_STATUS_COMMAND_SPECIFIC_CODES.STATUS_INVALID_NUMBER_OF_CONTROLLER_RESOURCES;
pub const NVME_STATUS_INVALID_RESOURCE_IDENTIFIER = NVME_STATUS_COMMAND_SPECIFIC_CODES.STATUS_INVALID_RESOURCE_IDENTIFIER;
pub const NVME_STATUS_SANITIZE_PROHIBITED_ON_PERSISTENT_MEMORY = NVME_STATUS_COMMAND_SPECIFIC_CODES.STATUS_SANITIZE_PROHIBITED_ON_PERSISTENT_MEMORY;
pub const NVME_STATUS_INVALID_ANA_GROUP_IDENTIFIER = NVME_STATUS_COMMAND_SPECIFIC_CODES.STATUS_INVALID_ANA_GROUP_IDENTIFIER;
pub const NVME_STATUS_ANA_ATTACH_FAILED = NVME_STATUS_COMMAND_SPECIFIC_CODES.STATUS_ANA_ATTACH_FAILED;
pub const NVME_IO_COMMAND_SET_NOT_SUPPORTED = NVME_STATUS_COMMAND_SPECIFIC_CODES.IO_COMMAND_SET_NOT_SUPPORTED;
pub const NVME_IO_COMMAND_SET_NOT_ENABLED = NVME_STATUS_COMMAND_SPECIFIC_CODES.IO_COMMAND_SET_NOT_ENABLED;
pub const NVME_IO_COMMAND_SET_COMBINATION_REJECTED = NVME_STATUS_COMMAND_SPECIFIC_CODES.IO_COMMAND_SET_COMBINATION_REJECTED;
pub const NVME_IO_COMMAND_SET_INVALID = NVME_STATUS_COMMAND_SPECIFIC_CODES.IO_COMMAND_SET_INVALID;
pub const NVME_STATUS_STREAM_RESOURCE_ALLOCATION_FAILED = NVME_STATUS_COMMAND_SPECIFIC_CODES.STATUS_STREAM_RESOURCE_ALLOCATION_FAILED;
pub const NVME_STATUS_ZONE_INVALID_FORMAT = NVME_STATUS_COMMAND_SPECIFIC_CODES.STATUS_STREAM_RESOURCE_ALLOCATION_FAILED;
pub const NVME_STATUS_NVM_CONFLICTING_ATTRIBUTES = NVME_STATUS_COMMAND_SPECIFIC_CODES.STATUS_NVM_CONFLICTING_ATTRIBUTES;
pub const NVME_STATUS_NVM_INVALID_PROTECTION_INFORMATION = NVME_STATUS_COMMAND_SPECIFIC_CODES.STATUS_NVM_INVALID_PROTECTION_INFORMATION;
pub const NVME_STATUS_NVM_ATTEMPTED_WRITE_TO_READ_ONLY_RANGE = NVME_STATUS_COMMAND_SPECIFIC_CODES.STATUS_NVM_ATTEMPTED_WRITE_TO_READ_ONLY_RANGE;
pub const NVME_STATUS_NVM_COMMAND_SIZE_LIMIT_EXCEEDED = NVME_STATUS_COMMAND_SPECIFIC_CODES.STATUS_NVM_COMMAND_SIZE_LIMIT_EXCEEDED;
pub const NVME_STATUS_ZONE_BOUNDARY_ERROR = NVME_STATUS_COMMAND_SPECIFIC_CODES.STATUS_ZONE_BOUNDARY_ERROR;
pub const NVME_STATUS_ZONE_FULL = NVME_STATUS_COMMAND_SPECIFIC_CODES.STATUS_ZONE_FULL;
pub const NVME_STATUS_ZONE_READ_ONLY = NVME_STATUS_COMMAND_SPECIFIC_CODES.STATUS_ZONE_READ_ONLY;
pub const NVME_STATUS_ZONE_OFFLINE = NVME_STATUS_COMMAND_SPECIFIC_CODES.STATUS_ZONE_OFFLINE;
pub const NVME_STATUS_ZONE_INVALID_WRITE = NVME_STATUS_COMMAND_SPECIFIC_CODES.STATUS_ZONE_INVALID_WRITE;
pub const NVME_STATUS_ZONE_TOO_MANY_ACTIVE = NVME_STATUS_COMMAND_SPECIFIC_CODES.STATUS_ZONE_TOO_MANY_ACTIVE;
pub const NVME_STATUS_ZONE_TOO_MANY_OPEN = NVME_STATUS_COMMAND_SPECIFIC_CODES.STATUS_ZONE_TOO_MANY_OPEN;
pub const NVME_STATUS_ZONE_INVALID_STATE_TRANSITION = NVME_STATUS_COMMAND_SPECIFIC_CODES.STATUS_ZONE_INVALID_STATE_TRANSITION;

pub const NVME_STATUS_MEDIA_ERROR_CODES = enum(i32) {
    WRITE_FAULT = 128,
    UNRECOVERED_READ_ERROR = 129,
    END_TO_END_GUARD_CHECK_ERROR = 130,
    END_TO_END_APPLICATION_TAG_CHECK_ERROR = 131,
    END_TO_END_REFERENCE_TAG_CHECK_ERROR = 132,
    COMPARE_FAILURE = 133,
    ACCESS_DENIED = 134,
    DEALLOCATED_OR_UNWRITTEN_LOGICAL_BLOCK = 135,
};
pub const NVME_STATUS_NVM_WRITE_FAULT = NVME_STATUS_MEDIA_ERROR_CODES.WRITE_FAULT;
pub const NVME_STATUS_NVM_UNRECOVERED_READ_ERROR = NVME_STATUS_MEDIA_ERROR_CODES.UNRECOVERED_READ_ERROR;
pub const NVME_STATUS_NVM_END_TO_END_GUARD_CHECK_ERROR = NVME_STATUS_MEDIA_ERROR_CODES.END_TO_END_GUARD_CHECK_ERROR;
pub const NVME_STATUS_NVM_END_TO_END_APPLICATION_TAG_CHECK_ERROR = NVME_STATUS_MEDIA_ERROR_CODES.END_TO_END_APPLICATION_TAG_CHECK_ERROR;
pub const NVME_STATUS_NVM_END_TO_END_REFERENCE_TAG_CHECK_ERROR = NVME_STATUS_MEDIA_ERROR_CODES.END_TO_END_REFERENCE_TAG_CHECK_ERROR;
pub const NVME_STATUS_NVM_COMPARE_FAILURE = NVME_STATUS_MEDIA_ERROR_CODES.COMPARE_FAILURE;
pub const NVME_STATUS_NVM_ACCESS_DENIED = NVME_STATUS_MEDIA_ERROR_CODES.ACCESS_DENIED;
pub const NVME_STATUS_NVM_DEALLOCATED_OR_UNWRITTEN_LOGICAL_BLOCK = NVME_STATUS_MEDIA_ERROR_CODES.DEALLOCATED_OR_UNWRITTEN_LOGICAL_BLOCK;

pub const NVME_ADMIN_COMMANDS = enum(i32) {
    DELETE_IO_SQ = 0,
    CREATE_IO_SQ = 1,
    GET_LOG_PAGE = 2,
    DELETE_IO_CQ = 4,
    CREATE_IO_CQ = 5,
    IDENTIFY = 6,
    ABORT = 8,
    SET_FEATURES = 9,
    GET_FEATURES = 10,
    ASYNC_EVENT_REQUEST = 12,
    NAMESPACE_MANAGEMENT = 13,
    FIRMWARE_ACTIVATE = 16,
    // FIRMWARE_COMMIT = 16, this enum value conflicts with FIRMWARE_ACTIVATE
    FIRMWARE_IMAGE_DOWNLOAD = 17,
    DEVICE_SELF_TEST = 20,
    NAMESPACE_ATTACHMENT = 21,
    DIRECTIVE_SEND = 25,
    DIRECTIVE_RECEIVE = 26,
    VIRTUALIZATION_MANAGEMENT = 28,
    NVME_MI_SEND = 29,
    NVME_MI_RECEIVE = 30,
    DOORBELL_BUFFER_CONFIG = 124,
    FORMAT_NVM = 128,
    SECURITY_SEND = 129,
    SECURITY_RECEIVE = 130,
    SANITIZE = 132,
    GET_LBA_STATUS = 134,
};
pub const NVME_ADMIN_COMMAND_DELETE_IO_SQ = NVME_ADMIN_COMMANDS.DELETE_IO_SQ;
pub const NVME_ADMIN_COMMAND_CREATE_IO_SQ = NVME_ADMIN_COMMANDS.CREATE_IO_SQ;
pub const NVME_ADMIN_COMMAND_GET_LOG_PAGE = NVME_ADMIN_COMMANDS.GET_LOG_PAGE;
pub const NVME_ADMIN_COMMAND_DELETE_IO_CQ = NVME_ADMIN_COMMANDS.DELETE_IO_CQ;
pub const NVME_ADMIN_COMMAND_CREATE_IO_CQ = NVME_ADMIN_COMMANDS.CREATE_IO_CQ;
pub const NVME_ADMIN_COMMAND_IDENTIFY = NVME_ADMIN_COMMANDS.IDENTIFY;
pub const NVME_ADMIN_COMMAND_ABORT = NVME_ADMIN_COMMANDS.ABORT;
pub const NVME_ADMIN_COMMAND_SET_FEATURES = NVME_ADMIN_COMMANDS.SET_FEATURES;
pub const NVME_ADMIN_COMMAND_GET_FEATURES = NVME_ADMIN_COMMANDS.GET_FEATURES;
pub const NVME_ADMIN_COMMAND_ASYNC_EVENT_REQUEST = NVME_ADMIN_COMMANDS.ASYNC_EVENT_REQUEST;
pub const NVME_ADMIN_COMMAND_NAMESPACE_MANAGEMENT = NVME_ADMIN_COMMANDS.NAMESPACE_MANAGEMENT;
pub const NVME_ADMIN_COMMAND_FIRMWARE_ACTIVATE = NVME_ADMIN_COMMANDS.FIRMWARE_ACTIVATE;
pub const NVME_ADMIN_COMMAND_FIRMWARE_COMMIT = NVME_ADMIN_COMMANDS.FIRMWARE_ACTIVATE;
pub const NVME_ADMIN_COMMAND_FIRMWARE_IMAGE_DOWNLOAD = NVME_ADMIN_COMMANDS.FIRMWARE_IMAGE_DOWNLOAD;
pub const NVME_ADMIN_COMMAND_DEVICE_SELF_TEST = NVME_ADMIN_COMMANDS.DEVICE_SELF_TEST;
pub const NVME_ADMIN_COMMAND_NAMESPACE_ATTACHMENT = NVME_ADMIN_COMMANDS.NAMESPACE_ATTACHMENT;
pub const NVME_ADMIN_COMMAND_DIRECTIVE_SEND = NVME_ADMIN_COMMANDS.DIRECTIVE_SEND;
pub const NVME_ADMIN_COMMAND_DIRECTIVE_RECEIVE = NVME_ADMIN_COMMANDS.DIRECTIVE_RECEIVE;
pub const NVME_ADMIN_COMMAND_VIRTUALIZATION_MANAGEMENT = NVME_ADMIN_COMMANDS.VIRTUALIZATION_MANAGEMENT;
pub const NVME_ADMIN_COMMAND_NVME_MI_SEND = NVME_ADMIN_COMMANDS.NVME_MI_SEND;
pub const NVME_ADMIN_COMMAND_NVME_MI_RECEIVE = NVME_ADMIN_COMMANDS.NVME_MI_RECEIVE;
pub const NVME_ADMIN_COMMAND_DOORBELL_BUFFER_CONFIG = NVME_ADMIN_COMMANDS.DOORBELL_BUFFER_CONFIG;
pub const NVME_ADMIN_COMMAND_FORMAT_NVM = NVME_ADMIN_COMMANDS.FORMAT_NVM;
pub const NVME_ADMIN_COMMAND_SECURITY_SEND = NVME_ADMIN_COMMANDS.SECURITY_SEND;
pub const NVME_ADMIN_COMMAND_SECURITY_RECEIVE = NVME_ADMIN_COMMANDS.SECURITY_RECEIVE;
pub const NVME_ADMIN_COMMAND_SANITIZE = NVME_ADMIN_COMMANDS.SANITIZE;
pub const NVME_ADMIN_COMMAND_GET_LBA_STATUS = NVME_ADMIN_COMMANDS.GET_LBA_STATUS;

pub const NVME_FEATURES = enum(i32) {
    ARBITRATION = 1,
    POWER_MANAGEMENT = 2,
    LBA_RANGE_TYPE = 3,
    TEMPERATURE_THRESHOLD = 4,
    ERROR_RECOVERY = 5,
    VOLATILE_WRITE_CACHE = 6,
    NUMBER_OF_QUEUES = 7,
    INTERRUPT_COALESCING = 8,
    INTERRUPT_VECTOR_CONFIG = 9,
    WRITE_ATOMICITY = 10,
    ASYNC_EVENT_CONFIG = 11,
    AUTONOMOUS_POWER_STATE_TRANSITION = 12,
    HOST_MEMORY_BUFFER = 13,
    TIMESTAMP = 14,
    KEEP_ALIVE = 15,
    HOST_CONTROLLED_THERMAL_MANAGEMENT = 16,
    NONOPERATIONAL_POWER_STATE = 17,
    READ_RECOVERY_LEVEL_CONFIG = 18,
    PREDICTABLE_LATENCY_MODE_CONFIG = 19,
    PREDICTABLE_LATENCY_MODE_WINDOW = 20,
    LBA_STATUS_INFORMATION_REPORT_INTERVAL = 21,
    HOST_BEHAVIOR_SUPPORT = 22,
    SANITIZE_CONFIG = 23,
    ENDURANCE_GROUP_EVENT_CONFIG = 24,
    IO_COMMAND_SET_PROFILE = 25,
    ENHANCED_CONTROLLER_METADATA = 125,
    CONTROLLER_METADATA = 126,
    NAMESPACE_METADATA = 127,
    NVM_SOFTWARE_PROGRESS_MARKER = 128,
    NVM_HOST_IDENTIFIER = 129,
    NVM_RESERVATION_NOTIFICATION_MASK = 130,
    NVM_RESERVATION_PERSISTANCE = 131,
    NVM_NAMESPACE_WRITE_PROTECTION_CONFIG = 132,
    ERROR_INJECTION = 192,
    CLEAR_FW_UPDATE_HISTORY = 193,
    READONLY_WRITETHROUGH_MODE = 194,
    CLEAR_PCIE_CORRECTABLE_ERROR_COUNTERS = 195,
    ENABLE_IEEE1667_SILO = 196,
    PLP_HEALTH_MONITOR = 197,
};
pub const NVME_FEATURE_ARBITRATION = NVME_FEATURES.ARBITRATION;
pub const NVME_FEATURE_POWER_MANAGEMENT = NVME_FEATURES.POWER_MANAGEMENT;
pub const NVME_FEATURE_LBA_RANGE_TYPE = NVME_FEATURES.LBA_RANGE_TYPE;
pub const NVME_FEATURE_TEMPERATURE_THRESHOLD = NVME_FEATURES.TEMPERATURE_THRESHOLD;
pub const NVME_FEATURE_ERROR_RECOVERY = NVME_FEATURES.ERROR_RECOVERY;
pub const NVME_FEATURE_VOLATILE_WRITE_CACHE = NVME_FEATURES.VOLATILE_WRITE_CACHE;
pub const NVME_FEATURE_NUMBER_OF_QUEUES = NVME_FEATURES.NUMBER_OF_QUEUES;
pub const NVME_FEATURE_INTERRUPT_COALESCING = NVME_FEATURES.INTERRUPT_COALESCING;
pub const NVME_FEATURE_INTERRUPT_VECTOR_CONFIG = NVME_FEATURES.INTERRUPT_VECTOR_CONFIG;
pub const NVME_FEATURE_WRITE_ATOMICITY = NVME_FEATURES.WRITE_ATOMICITY;
pub const NVME_FEATURE_ASYNC_EVENT_CONFIG = NVME_FEATURES.ASYNC_EVENT_CONFIG;
pub const NVME_FEATURE_AUTONOMOUS_POWER_STATE_TRANSITION = NVME_FEATURES.AUTONOMOUS_POWER_STATE_TRANSITION;
pub const NVME_FEATURE_HOST_MEMORY_BUFFER = NVME_FEATURES.HOST_MEMORY_BUFFER;
pub const NVME_FEATURE_TIMESTAMP = NVME_FEATURES.TIMESTAMP;
pub const NVME_FEATURE_KEEP_ALIVE = NVME_FEATURES.KEEP_ALIVE;
pub const NVME_FEATURE_HOST_CONTROLLED_THERMAL_MANAGEMENT = NVME_FEATURES.HOST_CONTROLLED_THERMAL_MANAGEMENT;
pub const NVME_FEATURE_NONOPERATIONAL_POWER_STATE = NVME_FEATURES.NONOPERATIONAL_POWER_STATE;
pub const NVME_FEATURE_READ_RECOVERY_LEVEL_CONFIG = NVME_FEATURES.READ_RECOVERY_LEVEL_CONFIG;
pub const NVME_FEATURE_PREDICTABLE_LATENCY_MODE_CONFIG = NVME_FEATURES.PREDICTABLE_LATENCY_MODE_CONFIG;
pub const NVME_FEATURE_PREDICTABLE_LATENCY_MODE_WINDOW = NVME_FEATURES.PREDICTABLE_LATENCY_MODE_WINDOW;
pub const NVME_FEATURE_LBA_STATUS_INFORMATION_REPORT_INTERVAL = NVME_FEATURES.LBA_STATUS_INFORMATION_REPORT_INTERVAL;
pub const NVME_FEATURE_HOST_BEHAVIOR_SUPPORT = NVME_FEATURES.HOST_BEHAVIOR_SUPPORT;
pub const NVME_FEATURE_SANITIZE_CONFIG = NVME_FEATURES.SANITIZE_CONFIG;
pub const NVME_FEATURE_ENDURANCE_GROUP_EVENT_CONFIG = NVME_FEATURES.ENDURANCE_GROUP_EVENT_CONFIG;
pub const NVME_FEATURE_IO_COMMAND_SET_PROFILE = NVME_FEATURES.IO_COMMAND_SET_PROFILE;
pub const NVME_FEATURE_ENHANCED_CONTROLLER_METADATA = NVME_FEATURES.ENHANCED_CONTROLLER_METADATA;
pub const NVME_FEATURE_CONTROLLER_METADATA = NVME_FEATURES.CONTROLLER_METADATA;
pub const NVME_FEATURE_NAMESPACE_METADATA = NVME_FEATURES.NAMESPACE_METADATA;
pub const NVME_FEATURE_NVM_SOFTWARE_PROGRESS_MARKER = NVME_FEATURES.NVM_SOFTWARE_PROGRESS_MARKER;
pub const NVME_FEATURE_NVM_HOST_IDENTIFIER = NVME_FEATURES.NVM_HOST_IDENTIFIER;
pub const NVME_FEATURE_NVM_RESERVATION_NOTIFICATION_MASK = NVME_FEATURES.NVM_RESERVATION_NOTIFICATION_MASK;
pub const NVME_FEATURE_NVM_RESERVATION_PERSISTANCE = NVME_FEATURES.NVM_RESERVATION_PERSISTANCE;
pub const NVME_FEATURE_NVM_NAMESPACE_WRITE_PROTECTION_CONFIG = NVME_FEATURES.NVM_NAMESPACE_WRITE_PROTECTION_CONFIG;
pub const NVME_FEATURE_ERROR_INJECTION = NVME_FEATURES.ERROR_INJECTION;
pub const NVME_FEATURE_CLEAR_FW_UPDATE_HISTORY = NVME_FEATURES.CLEAR_FW_UPDATE_HISTORY;
pub const NVME_FEATURE_READONLY_WRITETHROUGH_MODE = NVME_FEATURES.READONLY_WRITETHROUGH_MODE;
pub const NVME_FEATURE_CLEAR_PCIE_CORRECTABLE_ERROR_COUNTERS = NVME_FEATURES.CLEAR_PCIE_CORRECTABLE_ERROR_COUNTERS;
pub const NVME_FEATURE_ENABLE_IEEE1667_SILO = NVME_FEATURES.ENABLE_IEEE1667_SILO;
pub const NVME_FEATURE_PLP_HEALTH_MONITOR = NVME_FEATURES.PLP_HEALTH_MONITOR;

pub const NVME_CDW10_ABORT = extern union {
    Anonymous: extern struct {
        _bitfield: u32,
    },
    AsUlong: u32,
};

pub const NVME_IDENTIFY_CNS_CODES = enum(i32) {
    SPECIFIC_NAMESPACE = 0,
    CONTROLLER = 1,
    ACTIVE_NAMESPACES = 2,
    DESCRIPTOR_NAMESPACE = 3,
    NVM_SET = 4,
    SPECIFIC_NAMESPACE_IO_COMMAND_SET = 5,
    SPECIFIC_CONTROLLER_IO_COMMAND_SET = 6,
    ACTIVE_NAMESPACE_LIST_IO_COMMAND_SET = 7,
    ALLOCATED_NAMESPACE_LIST = 16,
    ALLOCATED_NAMESPACE = 17,
    CONTROLLER_LIST_OF_NSID = 18,
    CONTROLLER_LIST_OF_NVM_SUBSYSTEM = 19,
    PRIMARY_CONTROLLER_CAPABILITIES = 20,
    SECONDARY_CONTROLLER_LIST = 21,
    NAMESPACE_GRANULARITY_LIST = 22,
    UUID_LIST = 23,
    DOMAIN_LIST = 24,
    ENDURANCE_GROUP_LIST = 25,
    ALLOCATED_NAMSPACE_LIST_IO_COMMAND_SET = 26,
    ALLOCATED_NAMESPACE_IO_COMMAND_SET = 27,
    IO_COMMAND_SET = 28,
};
pub const NVME_IDENTIFY_CNS_SPECIFIC_NAMESPACE = NVME_IDENTIFY_CNS_CODES.SPECIFIC_NAMESPACE;
pub const NVME_IDENTIFY_CNS_CONTROLLER = NVME_IDENTIFY_CNS_CODES.CONTROLLER;
pub const NVME_IDENTIFY_CNS_ACTIVE_NAMESPACES = NVME_IDENTIFY_CNS_CODES.ACTIVE_NAMESPACES;
pub const NVME_IDENTIFY_CNS_DESCRIPTOR_NAMESPACE = NVME_IDENTIFY_CNS_CODES.DESCRIPTOR_NAMESPACE;
pub const NVME_IDENTIFY_CNS_NVM_SET = NVME_IDENTIFY_CNS_CODES.NVM_SET;
pub const NVME_IDENTIFY_CNS_SPECIFIC_NAMESPACE_IO_COMMAND_SET = NVME_IDENTIFY_CNS_CODES.SPECIFIC_NAMESPACE_IO_COMMAND_SET;
pub const NVME_IDENTIFY_CNS_SPECIFIC_CONTROLLER_IO_COMMAND_SET = NVME_IDENTIFY_CNS_CODES.SPECIFIC_CONTROLLER_IO_COMMAND_SET;
pub const NVME_IDENTIFY_CNS_ACTIVE_NAMESPACE_LIST_IO_COMMAND_SET = NVME_IDENTIFY_CNS_CODES.ACTIVE_NAMESPACE_LIST_IO_COMMAND_SET;
pub const NVME_IDENTIFY_CNS_ALLOCATED_NAMESPACE_LIST = NVME_IDENTIFY_CNS_CODES.ALLOCATED_NAMESPACE_LIST;
pub const NVME_IDENTIFY_CNS_ALLOCATED_NAMESPACE = NVME_IDENTIFY_CNS_CODES.ALLOCATED_NAMESPACE;
pub const NVME_IDENTIFY_CNS_CONTROLLER_LIST_OF_NSID = NVME_IDENTIFY_CNS_CODES.CONTROLLER_LIST_OF_NSID;
pub const NVME_IDENTIFY_CNS_CONTROLLER_LIST_OF_NVM_SUBSYSTEM = NVME_IDENTIFY_CNS_CODES.CONTROLLER_LIST_OF_NVM_SUBSYSTEM;
pub const NVME_IDENTIFY_CNS_PRIMARY_CONTROLLER_CAPABILITIES = NVME_IDENTIFY_CNS_CODES.PRIMARY_CONTROLLER_CAPABILITIES;
pub const NVME_IDENTIFY_CNS_SECONDARY_CONTROLLER_LIST = NVME_IDENTIFY_CNS_CODES.SECONDARY_CONTROLLER_LIST;
pub const NVME_IDENTIFY_CNS_NAMESPACE_GRANULARITY_LIST = NVME_IDENTIFY_CNS_CODES.NAMESPACE_GRANULARITY_LIST;
pub const NVME_IDENTIFY_CNS_UUID_LIST = NVME_IDENTIFY_CNS_CODES.UUID_LIST;
pub const NVME_IDENTIFY_CNS_DOMAIN_LIST = NVME_IDENTIFY_CNS_CODES.DOMAIN_LIST;
pub const NVME_IDENTIFY_CNS_ENDURANCE_GROUP_LIST = NVME_IDENTIFY_CNS_CODES.ENDURANCE_GROUP_LIST;
pub const NVME_IDENTIFY_CNS_ALLOCATED_NAMSPACE_LIST_IO_COMMAND_SET = NVME_IDENTIFY_CNS_CODES.ALLOCATED_NAMSPACE_LIST_IO_COMMAND_SET;
pub const NVME_IDENTIFY_CNS_ALLOCATED_NAMESPACE_IO_COMMAND_SET = NVME_IDENTIFY_CNS_CODES.ALLOCATED_NAMESPACE_IO_COMMAND_SET;
pub const NVME_IDENTIFY_CNS_IO_COMMAND_SET = NVME_IDENTIFY_CNS_CODES.IO_COMMAND_SET;

pub const NVME_COMMAND_SET_IDENTIFIERS = enum(i32) {
    NVM = 0,
    KEY_VALUE = 1,
    ZONED_NAMESPACE = 2,
};
pub const NVME_COMMAND_SET_NVM = NVME_COMMAND_SET_IDENTIFIERS.NVM;
pub const NVME_COMMAND_SET_KEY_VALUE = NVME_COMMAND_SET_IDENTIFIERS.KEY_VALUE;
pub const NVME_COMMAND_SET_ZONED_NAMESPACE = NVME_COMMAND_SET_IDENTIFIERS.ZONED_NAMESPACE;

pub const NVME_CDW10_IDENTIFY = extern union {
    Anonymous: extern struct {
        _bitfield: u32,
    },
    AsUlong: u32,
};

pub const NVME_CDW11_IDENTIFY = extern union {
    Anonymous1: extern struct {
        NVMSETID: u16,
        Reserved: u16,
    },
    Anonymous2: extern struct {
        _bitfield: u32,
    },
    AsUlong: u32,
};

pub const NVME_LBA_FORMAT = extern union {
    Anonymous: extern struct {
        MS: u16,
        LBADS: u8,
        _bitfield: u8,
    },
    AsUlong: u32,
};

pub const NVM_RESERVATION_CAPABILITIES = extern union {
    Anonymous: extern struct {
        _bitfield: u8,
    },
    AsUchar: u8,
};

pub const NVME_IDENTIFY_NAMESPACE_DATA = extern struct {
    NSZE: u64,
    NCAP: u64,
    NUSE: u64,
    NSFEAT: extern struct {
        _bitfield: u8,
    },
    NLBAF: u8,
    FLBAS: extern struct {
        _bitfield: u8,
    },
    MC: extern struct {
        _bitfield: u8,
    },
    DPC: extern struct {
        _bitfield: u8,
    },
    DPS: extern struct {
        _bitfield: u8,
    },
    NMIC: extern struct {
        _bitfield: u8,
    },
    RESCAP: NVM_RESERVATION_CAPABILITIES,
    FPI: extern struct {
        _bitfield: u8,
    },
    DLFEAT: extern struct {
        _bitfield: u8,
    },
    NAWUN: u16,
    NAWUPF: u16,
    NACWU: u16,
    NABSN: u16,
    NABO: u16,
    NABSPF: u16,
    NOIOB: u16,
    NVMCAP: [16]u8,
    NPWG: u16,
    NPWA: u16,
    NPDG: u16,
    NPDA: u16,
    NOWS: u16,
    MSSRL: u16,
    MCL: u32,
    MSRC: u8,
    Reserved2: [11]u8,
    ANAGRPID: u32,
    Reserved3: [3]u8,
    NSATTR: extern struct {
        _bitfield: u8,
    },
    NVMSETID: u16,
    ENDGID: u16,
    NGUID: [16]u8,
    EUI64: [8]u8,
    LBAF: [16]NVME_LBA_FORMAT,
    Reserved4: [192]u8,
    VS: [3712]u8,
};

pub const NVME_POWER_STATE_DESC = extern struct {
    MP: u16,
    Reserved0: u8,
    _bitfield1: u8,
    ENLAT: u32,
    EXLAT: u32,
    _bitfield2: u8,
    _bitfield3: u8,
    _bitfield4: u8,
    _bitfield5: u8,
    IDLP: u16,
    _bitfield6: u8,
    Reserved7: u8,
    ACTP: u16,
    _bitfield7: u8,
    Reserved9: [9]u8,
};

pub const NVME_IDENTIFY_CONTROLLER_DATA = extern struct {
    VID: u16,
    SSVID: u16,
    SN: [20]u8,
    MN: [40]u8,
    FR: [8]u8,
    RAB: u8,
    IEEE: [3]u8,
    CMIC: extern struct {
        _bitfield: u8,
    },
    MDTS: u8,
    CNTLID: u16,
    VER: u32,
    RTD3R: u32,
    RTD3E: u32,
    OAES: extern struct {
        _bitfield: u32,
    },
    CTRATT: extern struct {
        _bitfield: u32,
    },
    RRLS: extern struct {
        _bitfield: u16,
    },
    Reserved0: [9]u8,
    CNTRLTYPE: u8,
    FGUID: [16]u8,
    CRDT1: u16,
    CRDT2: u16,
    CRDT3: u16,
    Reserved0_1: [106]u8,
    ReservedForManagement: [16]u8,
    OACS: extern struct {
        _bitfield: u16,
    },
    ACL: u8,
    AERL: u8,
    FRMW: extern struct {
        _bitfield: u8,
    },
    LPA: extern struct {
        _bitfield: u8,
    },
    ELPE: u8,
    NPSS: u8,
    AVSCC: extern struct {
        _bitfield: u8,
    },
    APSTA: extern struct {
        _bitfield: u8,
    },
    WCTEMP: u16,
    CCTEMP: u16,
    MTFA: u16,
    HMPRE: u32,
    HMMIN: u32,
    TNVMCAP: [16]u8,
    UNVMCAP: [16]u8,
    RPMBS: extern struct {
        _bitfield: u32,
    },
    EDSTT: u16,
    DSTO: u8,
    FWUG: u8,
    KAS: u16,
    HCTMA: extern struct {
        _bitfield: u16,
    },
    MNTMT: u16,
    MXTMT: u16,
    SANICAP: extern struct {
        _bitfield: u32,
    },
    HMMINDS: u32,
    HMMAXD: u16,
    NSETIDMAX: u16,
    ENDGIDMAX: u16,
    ANATT: u8,
    ANACAP: extern struct {
        _bitfield: u8,
    },
    ANAGRPMAX: u32,
    NANAGRPID: u32,
    PELS: u32,
    Reserved1: [156]u8,
    SQES: extern struct {
        _bitfield: u8,
    },
    CQES: extern struct {
        _bitfield: u8,
    },
    MAXCMD: u16,
    NN: u32,
    ONCS: extern struct {
        _bitfield: u16,
    },
    FUSES: extern struct {
        _bitfield: u16,
    },
    FNA: extern struct {
        _bitfield: u8,
    },
    VWC: extern struct {
        _bitfield: u8,
    },
    AWUN: u16,
    AWUPF: u16,
    NVSCC: extern struct {
        _bitfield: u8,
    },
    NWPC: extern struct {
        _bitfield: u8,
    },
    ACWU: u16,
    Reserved4: [2]u8,
    SGLS: extern struct {
        _bitfield: u32,
    },
    MNAN: u32,
    Reserved6: [224]u8,
    SUBNQN: [256]u8,
    Reserved7: [768]u8,
    Reserved8: [256]u8,
    PDS: [32]NVME_POWER_STATE_DESC,
    VS: [1024]u8,
};

pub const NVME_IDENTIFIER_TYPE = enum(i32) {
    EUI64 = 1,
    NGUID = 2,
    UUID = 3,
    CSI = 4,
};
pub const NVME_IDENTIFIER_TYPE_EUI64 = NVME_IDENTIFIER_TYPE.EUI64;
pub const NVME_IDENTIFIER_TYPE_NGUID = NVME_IDENTIFIER_TYPE.NGUID;
pub const NVME_IDENTIFIER_TYPE_UUID = NVME_IDENTIFIER_TYPE.UUID;
pub const NVME_IDENTIFIER_TYPE_CSI = NVME_IDENTIFIER_TYPE.CSI;

pub const NVME_IDENTIFIER_TYPE_LENGTH = enum(i32) {
    EUI64_LENGTH = 8,
    NGUID_LENGTH = 16,
    // UUID_LENGTH = 16, this enum value conflicts with NGUID_LENGTH
    CSI_LENGTH = 1,
};
pub const NVME_IDENTIFIER_TYPE_EUI64_LENGTH = NVME_IDENTIFIER_TYPE_LENGTH.EUI64_LENGTH;
pub const NVME_IDENTIFIER_TYPE_NGUID_LENGTH = NVME_IDENTIFIER_TYPE_LENGTH.NGUID_LENGTH;
pub const NVME_IDENTIFIER_TYPE_UUID_LENGTH = NVME_IDENTIFIER_TYPE_LENGTH.NGUID_LENGTH;
pub const NVME_IDENTIFIER_TYPE_CSI_LENGTH = NVME_IDENTIFIER_TYPE_LENGTH.CSI_LENGTH;

pub const NVME_ACTIVE_NAMESPACE_ID_LIST = extern struct {
    NSID: [1024]u32,
};

pub const NVME_IDENTIFY_NAMESPACE_DESCRIPTOR = extern struct {
    NIDT: u8,
    NIDL: u8,
    Reserved: [2]u8,
    NID: [1]u8,
};

pub const NVME_SET_ATTRIBUTES_ENTRY = extern struct {
    Identifier: u16,
    ENDGID: u16,
    Reserved1: u32,
    Random4KBReadTypical: u32,
    OptimalWriteSize: u32,
    TotalCapacity: [16]u8,
    UnallocatedCapacity: [16]u8,
    Reserved2: [80]u8,
};

pub const NVM_SET_LIST = extern struct {
    IdentifierCount: u8,
    Reserved: [127]u8,
    Entry: [1]NVME_SET_ATTRIBUTES_ENTRY,
};

pub const NVME_LBA_ZONE_FORMAT = extern struct {
    ZoneSize: u64,
    ZDES: u8,
    Reserved: [7]u8,
};

pub const NVME_IDENTIFY_SPECIFIC_NAMESPACE_IO_COMMAND_SET = extern struct {
    ZOC: extern struct {
        _bitfield: u16,
    },
    OZCS: extern struct {
        _bitfield: u16,
    },
    MAR: u32,
    MOR: u32,
    RRL: u32,
    FRL: u32,
    Reserved0: [2796]u8,
    LBAEF: [16]NVME_LBA_ZONE_FORMAT,
    Reserved1: [768]u8,
    VS: [256]u8,
};

pub const NVME_IDENTIFY_NVM_SPECIFIC_CONTROLLER_IO_COMMAND_SET = extern struct {
    VSL: u8,
    WZSL: u8,
    WUSL: u8,
    DMRL: u8,
    DMRSL: u32,
    DMSL: u64,
    Reserved: [4080]u8,
};

pub const NVME_IDENTIFY_ZNS_SPECIFIC_CONTROLLER_IO_COMMAND_SET = extern struct {
    ZASL: u8,
    Reserved: [4095]u8,
};

pub const NVME_CONTROLLER_LIST = extern struct {
    NumberOfIdentifiers: u16,
    ControllerID: [2047]u16,
};

pub const NVME_IDENTIFY_IO_COMMAND_SET = extern struct {
    IOCommandSetVector: [512]u64,
};

pub const NVME_LBA_RANGE_TYPES = enum(i32) {
    RESERVED = 0,
    FILESYSTEM = 1,
    RAID = 2,
    CACHE = 3,
    PAGE_SWAP_FILE = 4,
};
pub const NVME_LBA_RANGE_TYPE_RESERVED = NVME_LBA_RANGE_TYPES.RESERVED;
pub const NVME_LBA_RANGE_TYPE_FILESYSTEM = NVME_LBA_RANGE_TYPES.FILESYSTEM;
pub const NVME_LBA_RANGE_TYPE_RAID = NVME_LBA_RANGE_TYPES.RAID;
pub const NVME_LBA_RANGE_TYPE_CACHE = NVME_LBA_RANGE_TYPES.CACHE;
pub const NVME_LBA_RANGE_TYPE_PAGE_SWAP_FILE = NVME_LBA_RANGE_TYPES.PAGE_SWAP_FILE;

pub const NVME_LBA_RANGET_TYPE_ENTRY = extern struct {
    Type: u8,
    Attributes: extern struct {
        _bitfield: u8,
    },
    Reserved0: [14]u8,
    SLBA: u64,
    NLB: u64,
    GUID: [16]u8,
    Reserved1: [16]u8,
};

pub const NVME_VENDOR_LOG_PAGES = enum(i32) {
    DEVICE_SMART_INFORMATION = 192,
    DEVICE_ERROR_RECOVERY = 193,
    FIRMWARE_ACTIVATION_HISTORY = 194,
    LATENCY_MONITOR = 195,
    DEVICE_CAPABILITIES = 196,
    UNSUPPORTED_REQUIREMENTS = 197,
    TCG_CONFIGURATION = 200,
    TCG_HISTORY = 201,
};
pub const NVME_LOG_PAGE_OCP_DEVICE_SMART_INFORMATION = NVME_VENDOR_LOG_PAGES.DEVICE_SMART_INFORMATION;
pub const NVME_LOG_PAGE_OCP_DEVICE_ERROR_RECOVERY = NVME_VENDOR_LOG_PAGES.DEVICE_ERROR_RECOVERY;
pub const NVME_LOG_PAGE_OCP_FIRMWARE_ACTIVATION_HISTORY = NVME_VENDOR_LOG_PAGES.FIRMWARE_ACTIVATION_HISTORY;
pub const NVME_LOG_PAGE_OCP_LATENCY_MONITOR = NVME_VENDOR_LOG_PAGES.LATENCY_MONITOR;
pub const NVME_LOG_PAGE_OCP_DEVICE_CAPABILITIES = NVME_VENDOR_LOG_PAGES.DEVICE_CAPABILITIES;
pub const NVME_LOG_PAGE_OCP_UNSUPPORTED_REQUIREMENTS = NVME_VENDOR_LOG_PAGES.UNSUPPORTED_REQUIREMENTS;
pub const NVME_LOG_PAGE_OCP_TCG_CONFIGURATION = NVME_VENDOR_LOG_PAGES.TCG_CONFIGURATION;
pub const NVME_LOG_PAGE_OCP_TCG_HISTORY = NVME_VENDOR_LOG_PAGES.TCG_HISTORY;

pub const NVME_ASYNC_EVENT_TYPE_VENDOR_SPECIFIC_CODES = enum(i32) {
    RESERVED = 0,
    DEVICE_PANIC = 1,
};
pub const NVME_ASYNC_EVENT_TYPE_VENDOR_SPECIFIC_RESERVED = NVME_ASYNC_EVENT_TYPE_VENDOR_SPECIFIC_CODES.RESERVED;
pub const NVME_ASYNC_EVENT_TYPE_VENDOR_SPECIFIC_DEVICE_PANIC = NVME_ASYNC_EVENT_TYPE_VENDOR_SPECIFIC_CODES.DEVICE_PANIC;

pub const NVME_WCS_DEVICE_RESET_ACTION = extern struct {
    Anonymous: extern union {
        Anonymous: extern struct {
            _bitfield: u8,
        },
        AsUCHAR: u8,
    },
};

pub const NVME_WCS_DEVICE_CAPABILITIES = extern struct {
    Anonymous: extern union {
        Anonymous: extern struct {
            _bitfield: u32,
        },
        AsULONG: u32,
    },
};

pub const NVME_WCS_DEVICE_RECOVERY_ACTION1 = enum(i32) {
    NoAction = 0,
    FormatNVM = 1,
    VendorSpecificCommand = 2,
    VendorAnalysis = 3,
    DeviceReplacement = 4,
    Sanitize = 5,
    @"1Max" = 15,
};
pub const NVMeDeviceRecoveryNoAction = NVME_WCS_DEVICE_RECOVERY_ACTION1.NoAction;
pub const NVMeDeviceRecoveryFormatNVM = NVME_WCS_DEVICE_RECOVERY_ACTION1.FormatNVM;
pub const NVMeDeviceRecoveryVendorSpecificCommand = NVME_WCS_DEVICE_RECOVERY_ACTION1.VendorSpecificCommand;
pub const NVMeDeviceRecoveryVendorAnalysis = NVME_WCS_DEVICE_RECOVERY_ACTION1.VendorAnalysis;
pub const NVMeDeviceRecoveryDeviceReplacement = NVME_WCS_DEVICE_RECOVERY_ACTION1.DeviceReplacement;
pub const NVMeDeviceRecoverySanitize = NVME_WCS_DEVICE_RECOVERY_ACTION1.Sanitize;
pub const NVMeDeviceRecovery1Max = NVME_WCS_DEVICE_RECOVERY_ACTION1.@"1Max";

pub const NVME_WCS_DEVICE_RECOVERY_ACTION2 = enum(i32) {
    ControllerReset = 0,
    SubsystemReset = 1,
    PcieFunctionReset = 2,
    PERST = 3,
    PowerCycle = 4,
    PcieHotReset = 5,
    @"2Max" = 15,
};
pub const NVMeDeviceRecoveryControllerReset = NVME_WCS_DEVICE_RECOVERY_ACTION2.ControllerReset;
pub const NVMeDeviceRecoverySubsystemReset = NVME_WCS_DEVICE_RECOVERY_ACTION2.SubsystemReset;
pub const NVMeDeviceRecoveryPcieFunctionReset = NVME_WCS_DEVICE_RECOVERY_ACTION2.PcieFunctionReset;
pub const NVMeDeviceRecoveryPERST = NVME_WCS_DEVICE_RECOVERY_ACTION2.PERST;
pub const NVMeDeviceRecoveryPowerCycle = NVME_WCS_DEVICE_RECOVERY_ACTION2.PowerCycle;
pub const NVMeDeviceRecoveryPcieHotReset = NVME_WCS_DEVICE_RECOVERY_ACTION2.PcieHotReset;
pub const NVMeDeviceRecovery2Max = NVME_WCS_DEVICE_RECOVERY_ACTION2.@"2Max";

pub const NVME_WCS_DEVICE_SMART_ATTRIBUTES_LOG = extern struct {
    VersionSpecificData: [494]u8 align(1),
    LogPageVersionNumber: u16 align(1),
    LogPageGUID: Guid align(1),
};

pub const NVME_WCS_DEVICE_SMART_ATTRIBUTES_LOG_V2 = extern struct {
    MediaUnitsWritten: [16]u8 align(1),
    MediaUnitsRead: [16]u8 align(1),
    BadUserNANDBlockCount: extern struct {
        RawCount: [6]u8,
        Normalized: [2]u8,
    } align(1),
    BadSystemNANDBlockCount: extern struct {
        RawCount: [6]u8,
        Normalized: [2]u8,
    } align(1),
    XORRecoveryCount: u64 align(1),
    UnrecoverableReadErrorCount: u64 align(1),
    SoftECCErrorCount: u64 align(1),
    EndToEndCorrectionCounts: extern struct {
        DetectedCounts: u32 align(1),
        CorrectedCounts: u32 align(1),
    } align(1),
    PercentageSystemDataUsed: u8 align(1),
    RefreshCount: [7]u8 align(1),
    UserDataEraseCounts: extern struct {
        MaximumCount: u32 align(1),
        MinimumCount: u32 align(1),
    } align(1),
    ThermalThrottling: extern struct {
        EventCount: u8,
        Status: u8,
    } align(1),
    Reserved0: [6]u8 align(1),
    PCIeCorrectableErrorCount: u64 align(1),
    IncompleteShutdownCount: u32 align(1),
    Reserved1: u32 align(1),
    PercentageFreeBlocks: u8 align(1),
    Reserved2: [7]u8 align(1),
    CapacitorHealth: u16 align(1),
    Reserved3: [6]u8 align(1),
    UnalignedIOCount: u64 align(1),
    SecurityVersionNumber: u64 align(1),
    NUSE: u64 align(1),
    PLPStartCount: [16]u8 align(1),
    EnduranceEstimate: [16]u8 align(1),
    Reserved4: [302]u8 align(1),
    LogPageVersionNumber: u16 align(1),
    LogPageGUID: Guid align(1),
};

pub const NVME_OCP_DEVICE_SMART_INFORMATION_LOG_V3 = extern struct {
    MediaUnitsWritten: [16]u8 align(1),
    MediaUnitsRead: [16]u8 align(1),
    BadUserNANDBlockCount: extern struct {
        RawCount: [6]u8,
        Normalized: [2]u8,
    } align(1),
    BadSystemNANDBlockCount: extern struct {
        RawCount: [6]u8,
        Normalized: [2]u8,
    } align(1),
    XORRecoveryCount: u64 align(1),
    UnrecoverableReadErrorCount: u64 align(1),
    SoftECCErrorCount: u64 align(1),
    EndToEndCorrectionCounts: extern struct {
        DetectedCounts: u32 align(1),
        CorrectedCounts: u32 align(1),
    } align(1),
    PercentageSystemDataUsed: u8 align(1),
    RefreshCount: [7]u8 align(1),
    UserDataEraseCounts: extern struct {
        MaximumCount: u32 align(1),
        MinimumCount: u32 align(1),
    } align(1),
    ThermalThrottling: extern struct {
        EventCount: u8,
        Status: u8,
    } align(1),
    DSSDSpecVersion: [6]u8 align(1),
    PCIeCorrectableErrorCount: u64 align(1),
    IncompleteShutdownCount: u32 align(1),
    Reserved1: u32 align(1),
    PercentageFreeBlocks: u8 align(1),
    Reserved2: [7]u8 align(1),
    CapacitorHealth: u16 align(1),
    NvmeErrata: u8 align(1),
    Reserved3: [5]u8 align(1),
    UnalignedIOCount: u64 align(1),
    SecurityVersionNumber: u64 align(1),
    NUSE: u64 align(1),
    PLPStartCount: [16]u8 align(1),
    EnduranceEstimate: [16]u8 align(1),
    PCIeLinkRetrainingCount: u64 align(1),
    PowerStateChangeCount: u64 align(1),
    Reserved4: [286]u8 align(1),
    LogPageVersionNumber: u16 align(1),
    LogPageGUID: Guid align(1),
};

pub const NVME_WCS_DEVICE_ERROR_RECOVERY_LOG = extern struct {
    PanicResetWaitTime: u16 align(1),
    PanicResetAction: NVME_WCS_DEVICE_RESET_ACTION align(1),
    DriveRecoveryAction: u8 align(1),
    PanicId: u64 align(1),
    DeviceCapabilitiesA: NVME_WCS_DEVICE_CAPABILITIES align(1),
    VendorSpecificRecoveryCode: u8 align(1),
    Reserved0: [3]u8 align(1),
    VendorSpecificCommandCDW12: u32 align(1),
    VendorSpecificCommandCDW13: u32 align(1),
    Reserved1: [466]u8 align(1),
    LogPageVersionNumber: u16 align(1),
    LogPageGUID: Guid align(1),
};

pub const NVME_OCP_DEVICE_ERROR_RECOVERY_LOG_V2 = extern struct {
    PanicResetWaitTime: u16 align(1),
    PanicResetAction: NVME_WCS_DEVICE_RESET_ACTION align(1),
    DeviceRecoveryAction1: u8 align(1),
    PanicId: u64 align(1),
    DeviceCapabilitiesA: NVME_WCS_DEVICE_CAPABILITIES align(1),
    VendorSpecificRecoveryCode: u8 align(1),
    Reserved0: [3]u8 align(1),
    VendorSpecificCommandCDW12: u32 align(1),
    VendorSpecificCommandCDW13: u32 align(1),
    VendorSpecificCommandTimeout: u8 align(1),
    DeviceRecoveryAction2: u8 align(1),
    DeviceRecoveryAction2Timeout: u8 align(1),
    Reserved1: [463]u8 align(1),
    LogPageVersionNumber: u16 align(1),
    LogPageGUID: Guid align(1),
};

pub const FIRMWARE_ACTIVATION_HISTORY_ENTRY = extern struct {
    VersionNumber: u8 align(1),
    Length: u8 align(1),
    Reserved0: u16 align(1),
    ActivationCount: u16 align(1),
    Timestamp: u64 align(1),
    Reserved1: u64 align(1),
    PowerCycleCount: u64 align(1),
    PreviousFirmware: u64 align(1),
    NewFirmware: u64 align(1),
    SlotNumber: u8 align(1),
    CommitActionType: u8 align(1),
    Result: u16 align(1),
    Reserved2: [14]u8 align(1),
};

pub const NVME_OCP_DEVICE_FIRMWARE_ACTIVATION_HISTORY_LOG = extern struct {
    LID: u8 align(1),
    Reserved0: [3]u8 align(1),
    ValidNumberOfEntries: u32 align(1),
    Entries: [20]FIRMWARE_ACTIVATION_HISTORY_ENTRY align(1),
    Reserved1: [2790]u8 align(1),
    LogPageVersionNumber: u16 align(1),
    LogPageGUID: Guid align(1),
};

pub const LATENCY_MONITOR_FEATURE_STATUS = extern struct {
    Anonymous: extern union {
        Anonymous: extern struct {
            _bitfield: u8,
        },
        AsUchar: u8,
    },
};

pub const ACTIVE_LATENCY_CONFIGURATION = extern struct {
    Anonymous: extern union {
        Anonymous: extern struct {
            _bitfield: u16 align(1),
        } align(1),
        AsUshort: u16 align(1),
    },
};

pub const BUCKET_COUNTER = extern struct {
    Reserved: u32 align(1),
    Trim: u32 align(1),
    Write: u32 align(1),
    Read: u32 align(1),
};

pub const LATENCY_STAMP = extern struct {
    Trim3: u64 align(1),
    Write3: u64 align(1),
    Read3: u64 align(1),
    Trim2: u64 align(1),
    Write2: u64 align(1),
    Read2: u64 align(1),
    Trim1: u64 align(1),
    Write1: u64 align(1),
    Read1: u64 align(1),
    Trim0: u64 align(1),
    Write0: u64 align(1),
    Read0: u64 align(1),
};

pub const MEASURED_LATENCY = extern struct {
    Trim3: u16 align(1),
    Write3: u16 align(1),
    Read3: u16 align(1),
    Trim2: u16 align(1),
    Write2: u16 align(1),
    Read2: u16 align(1),
    Trim1: u16 align(1),
    Write1: u16 align(1),
    Read1: u16 align(1),
    Trim0: u16 align(1),
    Write0: u16 align(1),
    Read0: u16 align(1),
};

pub const LATENCY_STAMP_UNITS = extern struct {
    _bitfield: u16 align(1),
};

pub const DEBUG_BIT_FIELD = extern struct {
    _bitfield: u16 align(1),
};

pub const NVME_OCP_DEVICE_LATENCY_MONITOR_LOG = extern struct {
    FeatureStatus: LATENCY_MONITOR_FEATURE_STATUS align(1),
    Reserved0: u8 align(1),
    ActiveBucketTimer: u16 align(1),
    ActiveBucketTimerThreshold: u16 align(1),
    ActiveThresholdA: u8 align(1),
    ActiveThresholdB: u8 align(1),
    ActiveThresholdC: u8 align(1),
    ActiveThresholdD: u8 align(1),
    ActiveLatencyConfig: ACTIVE_LATENCY_CONFIGURATION align(1),
    ActiveLatencyMinimumWindow: u8 align(1),
    Reserved1: [19]u8 align(1),
    ActiveBucketCounter0: BUCKET_COUNTER align(1),
    ActiveBucketCounter1: BUCKET_COUNTER align(1),
    ActiveBucketCounter2: BUCKET_COUNTER align(1),
    ActiveBucketCounter3: BUCKET_COUNTER align(1),
    ActiveLatencyStamp: LATENCY_STAMP align(1),
    ActiveMeasuredLatency: MEASURED_LATENCY align(1),
    ActiveLatencyStampUnits: LATENCY_STAMP_UNITS align(1),
    Reserved2: [22]u8 align(1),
    StaticBucketCounter0: BUCKET_COUNTER align(1),
    StaticBucketCounter1: BUCKET_COUNTER align(1),
    StaticBucketCounter2: BUCKET_COUNTER align(1),
    StaticBucketCounter3: BUCKET_COUNTER align(1),
    StaticLatencyStamp: LATENCY_STAMP align(1),
    StaticMeasuredLatency: MEASURED_LATENCY align(1),
    StaticLatencyStampUnits: LATENCY_STAMP_UNITS align(1),
    Reserved3: [22]u8 align(1),
    DebugLogTriggerEnable: DEBUG_BIT_FIELD align(1),
    DebugLogMeasuredLatency: u16 align(1),
    DebugLogLatencyStamp: u64 align(1),
    DebugLogPointer: u16 align(1),
    DebugCounterTriggerSource: DEBUG_BIT_FIELD align(1),
    DebugLogStampUnits: extern union {
        Anonymous: extern struct {
            _bitfield: u8,
        },
        AsUchar: u8,
    } align(1),
    Reserved4: [29]u8 align(1),
    LogPageVersionNumber: u16 align(1),
    LogPageGUID: Guid align(1),
};

pub const DSSD_POWER_STATE_DESCRIPTOR = extern struct {
    _bitfield: u8,
};

pub const NVME_OCP_DEVICE_CAPABILITIES_LOG = extern struct {
    PciePorts: u16 align(1),
    OobMgmtSupport: extern union {
        Anonymous: extern struct {
            _bitfield: u16 align(1),
        } align(1),
        AsUshort: u16 align(1),
    } align(1),
    WriteZeroesCommand: extern union {
        Anonymous: extern struct {
            _bitfield: u16 align(1),
        } align(1),
        AsUshort: u16 align(1),
    } align(1),
    SanitizeCommand: extern union {
        Anonymous: extern struct {
            _bitfield: u16 align(1),
        } align(1),
        AsUshort: u16 align(1),
    } align(1),
    DatasetMgmtCommand: extern union {
        Anonymous: extern struct {
            _bitfield: u16 align(1),
        } align(1),
        AsUshort: u16 align(1),
    } align(1),
    WriteUncorrectableCommand: extern union {
        Anonymous: extern struct {
            _bitfield: u16 align(1),
        } align(1),
        AsUshort: u16 align(1),
    } align(1),
    FusedCommand: extern union {
        Anonymous: extern struct {
            _bitfield: u16 align(1),
        } align(1),
        AsUshort: u16 align(1),
    } align(1),
    MinimumValidDSSDPowerState: u16 align(1),
    Reserved0: u8 align(1),
    DssdDescriptors: [127]DSSD_POWER_STATE_DESCRIPTOR align(1),
    Reserved1: [3934]u8 align(1),
    LogPageVersionNumber: u16 align(1),
    LogPageGUID: Guid align(1),
};

pub const UNSUPPORTED_REQUIREMENT = extern struct {
    ReqId: [16]u8,
};

pub const NVME_OCP_DEVICE_UNSUPPORTED_REQUIREMENTS_LOG = extern struct {
    UnsupportedCount: u16 align(1),
    Reserved0: [14]u8 align(1),
    UnsupportedReqList: [253]UNSUPPORTED_REQUIREMENT align(1),
    Reserved1: [14]u8 align(1),
    LogPageVersionNumber: u16 align(1),
    LogPageGUID: Guid align(1),
};

pub const NVME_OCP_DEVICE_TCG_CONFIGURATION_LOG = extern struct {
    State: extern union {
        Anonymous: extern struct {
            _bitfield: u8,
        },
        AsUchar: u8,
    } align(1),
    Reserved0: [3]u8 align(1),
    LSPActivationCount: u8 align(1),
    TPRevertCount: u8 align(1),
    LSPRevertCount: u8 align(1),
    LOCount: u8 align(1),
    SUMLOCount: u8 align(1),
    RPLOCount: u8 align(1),
    NPLOCount: u8 align(1),
    RLLOCount: u8 align(1),
    WLLOCount: u8 align(1),
    RULOCount: u8 align(1),
    WULOCount: u8 align(1),
    Reserved1: u8 align(1),
    SIDAuthTryCount: u32 align(1),
    SIDAuthTryLimit: u32 align(1),
    ResetCount: u32 align(1),
    ResetLockCount: u32 align(1),
    Reserved2: [462]u8 align(1),
    LogPageVersionNumber: u16 align(1),
    LogPageGUID: Guid align(1),
};

pub const TCG_HISTORY_ENTRY = extern struct {
    VersionNumber: u8 align(1),
    EntryLength: u8 align(1),
    PowerCycleCount: u16 align(1),
    TcgCommandCount: u32 align(1),
    TcgCommandCompletionTS: u64 align(1),
    InvokingId: u64 align(1),
    MethodId: u64 align(1),
    ComId: u16 align(1),
    ProtocolId: u8 align(1),
    TcgStatus: u8 align(1),
    ProcessTime: u16 align(1),
    CommandSpecific: [10]u8 align(1),
};

pub const TCG_AUTH_METHOD_SPECIFIC = extern struct {
    AuthorityId: u64 align(1),
    TriesCount: u8 align(1),
};

pub const TCG_ACTIVATE_METHOD_SPECIFIC = extern struct {
    RangeStartLengthPolicy: u8,
};

pub const TCG_REACTIVATE_METHOD_SPECIFIC = extern struct {
    RangeStartLengthPolicy: u8,
};

pub const TCG_ASSIGN_METHOD_SPECIFIC = extern struct {
    NamespaceId: u32 align(1),
};

pub const TCG_BLOCKSID_METHOD_SPECIFIC = extern struct {
    ClearEvents: u8,
};

pub const NVME_OCP_DEVICE_TCG_HISTORY_LOG = extern struct {
    LID: u8 align(1),
    Reserved0: [3]u8 align(1),
    HistoryEntryCount: u32 align(1),
    HistoryEntries: [84]TCG_HISTORY_ENTRY align(1),
    Reserved1: [38]u8 align(1),
    LogPageVersionNumber: u16 align(1),
    LogPageGUID: Guid align(1),
};

pub const NVME_CDW10_CREATE_IO_QUEUE = extern union {
    Anonymous: extern struct {
        _bitfield: u32,
    },
    AsUlong: u32,
};

pub const NVME_CDW11_CREATE_IO_CQ = extern union {
    Anonymous: extern struct {
        _bitfield: u32,
    },
    AsUlong: u32,
};

pub const NVME_NVM_QUEUE_PRIORITIES = enum(i32) {
    URGENT = 0,
    HIGH = 1,
    MEDIUM = 2,
    LOW = 3,
};
pub const NVME_NVM_QUEUE_PRIORITY_URGENT = NVME_NVM_QUEUE_PRIORITIES.URGENT;
pub const NVME_NVM_QUEUE_PRIORITY_HIGH = NVME_NVM_QUEUE_PRIORITIES.HIGH;
pub const NVME_NVM_QUEUE_PRIORITY_MEDIUM = NVME_NVM_QUEUE_PRIORITIES.MEDIUM;
pub const NVME_NVM_QUEUE_PRIORITY_LOW = NVME_NVM_QUEUE_PRIORITIES.LOW;

pub const NVME_CDW11_CREATE_IO_SQ = extern union {
    Anonymous: extern struct {
        _bitfield: u32,
    },
    AsUlong: u32,
};

pub const NVME_FEATURE_VALUE_CODES = enum(i32) {
    CURRENT = 0,
    DEFAULT = 1,
    SAVED = 2,
    SUPPORTED_CAPABILITIES = 3,
};
pub const NVME_FEATURE_VALUE_CURRENT = NVME_FEATURE_VALUE_CODES.CURRENT;
pub const NVME_FEATURE_VALUE_DEFAULT = NVME_FEATURE_VALUE_CODES.DEFAULT;
pub const NVME_FEATURE_VALUE_SAVED = NVME_FEATURE_VALUE_CODES.SAVED;
pub const NVME_FEATURE_VALUE_SUPPORTED_CAPABILITIES = NVME_FEATURE_VALUE_CODES.SUPPORTED_CAPABILITIES;

pub const NVME_CDW10_GET_FEATURES = extern union {
    Anonymous: extern struct {
        _bitfield: u32,
    },
    AsUlong: u32,
};

pub const NVME_CDW10_SET_FEATURES = extern union {
    Anonymous: extern struct {
        _bitfield: u32,
    },
    AsUlong: u32,
};

pub const NVME_CDW11_FEATURE_NUMBER_OF_QUEUES = extern union {
    Anonymous: extern struct {
        _bitfield: u32,
    },
    AsUlong: u32,
};

pub const NVME_CDW11_FEATURE_INTERRUPT_COALESCING = extern union {
    Anonymous: extern struct {
        _bitfield: u32,
    },
    AsUlong: u32,
};

pub const NVME_CDW11_FEATURE_INTERRUPT_VECTOR_CONFIG = extern union {
    Anonymous: extern struct {
        _bitfield: u32,
    },
    AsUlong: u32,
};

pub const NVME_CDW11_FEATURE_WRITE_ATOMICITY_NORMAL = extern union {
    Anonymous: extern struct {
        _bitfield: u32,
    },
    AsUlong: u32,
};

pub const NVME_CDW11_FEATURE_NON_OPERATIONAL_POWER_STATE = extern union {
    Anonymous: extern struct {
        _bitfield: u32,
    },
    AsUlong: u32,
};

pub const NVME_CDW11_FEATURE_LBA_RANGE_TYPE = extern union {
    Anonymous: extern struct {
        _bitfield: u32,
    },
    AsUlong: u32,
};

pub const NVME_CDW11_FEATURE_ARBITRATION = extern union {
    Anonymous: extern struct {
        _bitfield: u32,
    },
    AsUlong: u32,
};

pub const NVME_CDW11_FEATURE_VOLATILE_WRITE_CACHE = extern union {
    Anonymous: extern struct {
        _bitfield: u32,
    },
    AsUlong: u32,
};

pub const NVME_CDW11_FEATURE_SUPPORTED_CAPABILITY = extern union {
    Anonymous: extern struct {
        _bitfield: u32,
    },
    AsUlong: u32,
};

pub const NVME_CDW11_FEATURE_ASYNC_EVENT_CONFIG = extern union {
    Anonymous: extern struct {
        _bitfield: u32,
    },
    AsUlong: u32,
};

pub const NVME_CDW11_FEATURE_POWER_MANAGEMENT = extern union {
    Anonymous: extern struct {
        _bitfield: u32,
    },
    AsUlong: u32,
};

pub const NVME_CDW11_FEATURE_AUTO_POWER_STATE_TRANSITION = extern union {
    Anonymous: extern struct {
        _bitfield: u32,
    },
    AsUlong: u32,
};

pub const NVME_AUTO_POWER_STATE_TRANSITION_ENTRY = extern struct {
    _bitfield: u32,
    Reserved1: u32,
};

pub const NVME_TEMPERATURE_THRESHOLD_TYPES = enum(i32) {
    OVER_THRESHOLD = 0,
    UNDER_THRESHOLD = 1,
};
pub const NVME_TEMPERATURE_OVER_THRESHOLD = NVME_TEMPERATURE_THRESHOLD_TYPES.OVER_THRESHOLD;
pub const NVME_TEMPERATURE_UNDER_THRESHOLD = NVME_TEMPERATURE_THRESHOLD_TYPES.UNDER_THRESHOLD;

pub const NVME_CDW11_FEATURE_TEMPERATURE_THRESHOLD = extern union {
    Anonymous: extern struct {
        _bitfield: u32,
    },
    AsUlong: u32,
};

pub const NVME_CDW11_FEATURE_ERROR_RECOVERY = extern union {
    Anonymous: extern struct {
        _bitfield: u32,
    },
    AsUlong: u32,
};

pub const NVME_CDW11_FEATURE_HOST_MEMORY_BUFFER = extern union {
    Anonymous: extern struct {
        _bitfield: u32,
    },
    AsUlong: u32,
};

pub const NVME_CDW12_FEATURE_HOST_MEMORY_BUFFER = extern union {
    Anonymous: extern struct {
        HSIZE: u32,
    },
    AsUlong: u32,
};

pub const NVME_CDW13_FEATURE_HOST_MEMORY_BUFFER = extern union {
    Anonymous: extern struct {
        _bitfield: u32,
    },
    AsUlong: u32,
};

pub const NVME_CDW14_FEATURE_HOST_MEMORY_BUFFER = extern union {
    Anonymous: extern struct {
        HMDLUA: u32,
    },
    AsUlong: u32,
};

pub const NVME_CDW15_FEATURE_HOST_MEMORY_BUFFER = extern union {
    Anonymous: extern struct {
        HMDLEC: u32,
    },
    AsUlong: u32,
};

pub const NVME_HOST_MEMORY_BUFFER_DESCRIPTOR_ENTRY = extern struct {
    BADD: u64,
    BSIZE: u32,
    Reserved: u32,
};

pub const NVME_CDW11_FEATURE_IO_COMMAND_SET_PROFILE = extern union {
    Anonymous: extern struct {
        _bitfield: u32,
    },
    AsUlong: u32,
};

pub const NVME_CDW11_FEATURE_GET_HOST_METADATA = extern union {
    Anonymous: extern struct {
        _bitfield: u32,
    },
    AsUlong: u32,
};

pub const NVME_HOST_METADATA_ELEMENT_ACTIONS = enum(i32) {
    ADD_REPLACE_ENTRY = 0,
    DELETE_ENTRY_MULTIPLE = 1,
    ADD_ENTRY_MULTIPLE = 2,
};
pub const NVME_HOST_METADATA_ADD_REPLACE_ENTRY = NVME_HOST_METADATA_ELEMENT_ACTIONS.ADD_REPLACE_ENTRY;
pub const NVME_HOST_METADATA_DELETE_ENTRY_MULTIPLE = NVME_HOST_METADATA_ELEMENT_ACTIONS.DELETE_ENTRY_MULTIPLE;
pub const NVME_HOST_METADATA_ADD_ENTRY_MULTIPLE = NVME_HOST_METADATA_ELEMENT_ACTIONS.ADD_ENTRY_MULTIPLE;

pub const NVME_CDW11_FEATURE_SET_HOST_METADATA = extern union {
    Anonymous: extern struct {
        _bitfield: u32,
    },
    AsUlong: u32,
};

pub const NVME_CONTROLLER_METADATA_ELEMENT_TYPES = enum(i32) {
    OPERATING_SYSTEM_CONTROLLER_NAME = 1,
    OPERATING_SYSTEM_DRIVER_NAME = 2,
    OPERATING_SYSTEM_DRIVER_VERSION = 3,
    PREBOOT_CONTROLLER_NAME = 4,
    PREBOOT_DRIVER_NAME = 5,
    PREBOOT_DRIVER_VERSION = 6,
    SYSTEM_PROCESSOR_MODEL = 7,
    CHIPSET_DRIVER_NAME = 8,
    CHIPSET_DRIVER_VERSION = 9,
    OPERATING_SYSTEM_NAME_AND_BUILD = 10,
    SYSTEM_PRODUCT_NAME = 11,
    FIRMWARE_VERSION = 12,
    OPERATING_SYSTEM_DRIVER_FILENAME = 13,
    DISPLAY_DRIVER_NAME = 14,
    DISPLAY_DRIVER_VERSION = 15,
    HOST_DETERMINED_FAILURE_RECORD = 16,
};
pub const NVME_CONTROLLER_METADATA_OPERATING_SYSTEM_CONTROLLER_NAME = NVME_CONTROLLER_METADATA_ELEMENT_TYPES.OPERATING_SYSTEM_CONTROLLER_NAME;
pub const NVME_CONTROLLER_METADATA_OPERATING_SYSTEM_DRIVER_NAME = NVME_CONTROLLER_METADATA_ELEMENT_TYPES.OPERATING_SYSTEM_DRIVER_NAME;
pub const NVME_CONTROLLER_METADATA_OPERATING_SYSTEM_DRIVER_VERSION = NVME_CONTROLLER_METADATA_ELEMENT_TYPES.OPERATING_SYSTEM_DRIVER_VERSION;
pub const NVME_CONTROLLER_METADATA_PREBOOT_CONTROLLER_NAME = NVME_CONTROLLER_METADATA_ELEMENT_TYPES.PREBOOT_CONTROLLER_NAME;
pub const NVME_CONTROLLER_METADATA_PREBOOT_DRIVER_NAME = NVME_CONTROLLER_METADATA_ELEMENT_TYPES.PREBOOT_DRIVER_NAME;
pub const NVME_CONTROLLER_METADATA_PREBOOT_DRIVER_VERSION = NVME_CONTROLLER_METADATA_ELEMENT_TYPES.PREBOOT_DRIVER_VERSION;
pub const NVME_CONTROLLER_METADATA_SYSTEM_PROCESSOR_MODEL = NVME_CONTROLLER_METADATA_ELEMENT_TYPES.SYSTEM_PROCESSOR_MODEL;
pub const NVME_CONTROLLER_METADATA_CHIPSET_DRIVER_NAME = NVME_CONTROLLER_METADATA_ELEMENT_TYPES.CHIPSET_DRIVER_NAME;
pub const NVME_CONTROLLER_METADATA_CHIPSET_DRIVER_VERSION = NVME_CONTROLLER_METADATA_ELEMENT_TYPES.CHIPSET_DRIVER_VERSION;
pub const NVME_CONTROLLER_METADATA_OPERATING_SYSTEM_NAME_AND_BUILD = NVME_CONTROLLER_METADATA_ELEMENT_TYPES.OPERATING_SYSTEM_NAME_AND_BUILD;
pub const NVME_CONTROLLER_METADATA_SYSTEM_PRODUCT_NAME = NVME_CONTROLLER_METADATA_ELEMENT_TYPES.SYSTEM_PRODUCT_NAME;
pub const NVME_CONTROLLER_METADATA_FIRMWARE_VERSION = NVME_CONTROLLER_METADATA_ELEMENT_TYPES.FIRMWARE_VERSION;
pub const NVME_CONTROLLER_METADATA_OPERATING_SYSTEM_DRIVER_FILENAME = NVME_CONTROLLER_METADATA_ELEMENT_TYPES.OPERATING_SYSTEM_DRIVER_FILENAME;
pub const NVME_CONTROLLER_METADATA_DISPLAY_DRIVER_NAME = NVME_CONTROLLER_METADATA_ELEMENT_TYPES.DISPLAY_DRIVER_NAME;
pub const NVME_CONTROLLER_METADATA_DISPLAY_DRIVER_VERSION = NVME_CONTROLLER_METADATA_ELEMENT_TYPES.DISPLAY_DRIVER_VERSION;
pub const NVME_CONTROLLER_METADATA_HOST_DETERMINED_FAILURE_RECORD = NVME_CONTROLLER_METADATA_ELEMENT_TYPES.HOST_DETERMINED_FAILURE_RECORD;

pub const NVME_NAMESPACE_METADATA_ELEMENT_TYPES = enum(i32) {
    OPERATING_SYSTEM_NAMESPACE_NAME = 1,
    PREBOOT_NAMESPACE_NAME = 2,
    OPERATING_SYSTEM_NAMESPACE_NAME_QUALIFIER_1 = 3,
    OPERATING_SYSTEM_NAMESPACE_NAME_QUALIFIER_2 = 4,
};
pub const NVME_NAMESPACE_METADATA_OPERATING_SYSTEM_NAMESPACE_NAME = NVME_NAMESPACE_METADATA_ELEMENT_TYPES.OPERATING_SYSTEM_NAMESPACE_NAME;
pub const NVME_NAMESPACE_METADATA_PREBOOT_NAMESPACE_NAME = NVME_NAMESPACE_METADATA_ELEMENT_TYPES.PREBOOT_NAMESPACE_NAME;
pub const NVME_NAMESPACE_METADATA_OPERATING_SYSTEM_NAMESPACE_NAME_QUALIFIER_1 = NVME_NAMESPACE_METADATA_ELEMENT_TYPES.OPERATING_SYSTEM_NAMESPACE_NAME_QUALIFIER_1;
pub const NVME_NAMESPACE_METADATA_OPERATING_SYSTEM_NAMESPACE_NAME_QUALIFIER_2 = NVME_NAMESPACE_METADATA_ELEMENT_TYPES.OPERATING_SYSTEM_NAMESPACE_NAME_QUALIFIER_2;

pub const NVME_HOST_METADATA_ELEMENT_DESCRIPTOR = extern struct {
    _bitfield: u32,
    EVAL: [1]u8,
};

pub const NVME_FEATURE_HOST_METADATA_DATA = extern struct {
    NumberOfMetadataElementDescriptors: u8,
    Reserved0: u8,
    MetadataElementDescriptors: [4094]u8,
};

pub const NVME_CDW0_FEATURE_ERROR_INJECTION = extern union {
    Anonymous: extern struct {
        _bitfield: u32,
    },
    AsUlong: u32,
};

pub const NVME_ERROR_INJECTION_ENTRY = extern struct {
    Flags: extern union {
        Anonymous: extern struct {
            _bitfield: u8,
        },
        AsUchar: u8,
    },
    Reserved1: u8,
    ErrorInjectionType: u16,
    ErrorInjectionTypeSpecific: [28]u8,
};

pub const NVME_ERROR_INJECTION_TYPES = enum(i32) {
    RESERVED0 = 0,
    DEVICE_PANIC_CPU_CONTROLLER_HANG = 1,
    DEVICE_PANIC_NAND_HANG = 2,
    DEVICE_PANIC_PLP_DEFECT = 3,
    DEVICE_PANIC_LOGICAL_FW_ERROR = 4,
    DEVICE_PANIC_DRAM_CORRUPTION_CRITICAL = 5,
    DEVICE_PANIC_DRAM_CORRUPTION_NONCRITICAL = 6,
    DEVICE_PANIC_NAND_CORRUPTION = 7,
    DEVICE_PANIC_SRAM_CORRUPTION = 8,
    DEVICE_PANIC_HW_MALFUNCTION = 9,
    RESERVED1 = 10,
    MAX = 65535,
};
pub const NVME_ERROR_INJECTION_TYPE_RESERVED0 = NVME_ERROR_INJECTION_TYPES.RESERVED0;
pub const NVME_ERROR_INJECTION_TYPE_DEVICE_PANIC_CPU_CONTROLLER_HANG = NVME_ERROR_INJECTION_TYPES.DEVICE_PANIC_CPU_CONTROLLER_HANG;
pub const NVME_ERROR_INJECTION_TYPE_DEVICE_PANIC_NAND_HANG = NVME_ERROR_INJECTION_TYPES.DEVICE_PANIC_NAND_HANG;
pub const NVME_ERROR_INJECTION_TYPE_DEVICE_PANIC_PLP_DEFECT = NVME_ERROR_INJECTION_TYPES.DEVICE_PANIC_PLP_DEFECT;
pub const NVME_ERROR_INJECTION_TYPE_DEVICE_PANIC_LOGICAL_FW_ERROR = NVME_ERROR_INJECTION_TYPES.DEVICE_PANIC_LOGICAL_FW_ERROR;
pub const NVME_ERROR_INJECTION_TYPE_DEVICE_PANIC_DRAM_CORRUPTION_CRITICAL = NVME_ERROR_INJECTION_TYPES.DEVICE_PANIC_DRAM_CORRUPTION_CRITICAL;
pub const NVME_ERROR_INJECTION_TYPE_DEVICE_PANIC_DRAM_CORRUPTION_NONCRITICAL = NVME_ERROR_INJECTION_TYPES.DEVICE_PANIC_DRAM_CORRUPTION_NONCRITICAL;
pub const NVME_ERROR_INJECTION_TYPE_DEVICE_PANIC_NAND_CORRUPTION = NVME_ERROR_INJECTION_TYPES.DEVICE_PANIC_NAND_CORRUPTION;
pub const NVME_ERROR_INJECTION_TYPE_DEVICE_PANIC_SRAM_CORRUPTION = NVME_ERROR_INJECTION_TYPES.DEVICE_PANIC_SRAM_CORRUPTION;
pub const NVME_ERROR_INJECTION_TYPE_DEVICE_PANIC_HW_MALFUNCTION = NVME_ERROR_INJECTION_TYPES.DEVICE_PANIC_HW_MALFUNCTION;
pub const NVME_ERROR_INJECTION_TYPE_RESERVED1 = NVME_ERROR_INJECTION_TYPES.RESERVED1;
pub const NVME_ERROR_INJECTION_TYPE_MAX = NVME_ERROR_INJECTION_TYPES.MAX;

pub const NVME_CDW11_FEATURE_CLEAR_FW_UPDATE_HISTORY = extern union {
    Anonymous: extern struct {
        _bitfield: u32,
    },
    AsUlong: u32,
};

pub const NVME_CDW11_FEATURE_READONLY_WRITETHROUGH_MODE = extern union {
    Anonymous: extern struct {
        _bitfield: u32,
    },
    AsUlong: u32,
};

pub const NVME_CDW0_FEATURE_READONLY_WRITETHROUGH_MODE = extern union {
    Anonymous: extern struct {
        _bitfield: u32,
    },
    AsUlong: u32,
};

pub const NVME_CDW11_FEATURE_CLEAR_PCIE_CORRECTABLE_ERROR_COUNTERS = extern union {
    Anonymous: extern struct {
        _bitfield: u32,
    },
    AsUlong: u32,
};

pub const NVME_CDW11_FEATURE_ENABLE_IEEE1667_SILO = extern union {
    Anonymous: extern struct {
        _bitfield: u32,
    },
    AsUlong: u32,
};

pub const NVME_CDW0_FEATURE_ENABLE_IEEE1667_SILO = extern union {
    Anonymous: extern struct {
        _bitfield: u32,
    },
    AsUlong: u32,
};

pub const NVME_CDW11_FEATURE_HOST_IDENTIFIER = extern struct {
    _bitfield: u32,
};

pub const NVME_FEATURE_HOST_IDENTIFIER_DATA = extern struct {
    HOSTID: [16]u8,
};

pub const NVME_CDW11_FEATURE_RESERVATION_PERSISTENCE = extern struct {
    _bitfield: u32,
};

pub const NVME_CDW11_FEATURE_RESERVATION_NOTIFICATION_MASK = extern struct {
    _bitfield: u32,
};

pub const NVME_CDW11_FEATURES = extern union {
    NumberOfQueues: NVME_CDW11_FEATURE_NUMBER_OF_QUEUES,
    InterruptCoalescing: NVME_CDW11_FEATURE_INTERRUPT_COALESCING,
    InterruptVectorConfig: NVME_CDW11_FEATURE_INTERRUPT_VECTOR_CONFIG,
    LbaRangeType: NVME_CDW11_FEATURE_LBA_RANGE_TYPE,
    Arbitration: NVME_CDW11_FEATURE_ARBITRATION,
    VolatileWriteCache: NVME_CDW11_FEATURE_VOLATILE_WRITE_CACHE,
    AsyncEventConfig: NVME_CDW11_FEATURE_ASYNC_EVENT_CONFIG,
    PowerManagement: NVME_CDW11_FEATURE_POWER_MANAGEMENT,
    AutoPowerStateTransition: NVME_CDW11_FEATURE_AUTO_POWER_STATE_TRANSITION,
    TemperatureThreshold: NVME_CDW11_FEATURE_TEMPERATURE_THRESHOLD,
    ErrorRecovery: NVME_CDW11_FEATURE_ERROR_RECOVERY,
    HostMemoryBuffer: NVME_CDW11_FEATURE_HOST_MEMORY_BUFFER,
    WriteAtomicityNormal: NVME_CDW11_FEATURE_WRITE_ATOMICITY_NORMAL,
    NonOperationalPowerState: NVME_CDW11_FEATURE_NON_OPERATIONAL_POWER_STATE,
    IoCommandSetProfile: NVME_CDW11_FEATURE_IO_COMMAND_SET_PROFILE,
    ErrorInjection: NVME_CDW0_FEATURE_ERROR_INJECTION,
    HostIdentifier: NVME_CDW11_FEATURE_HOST_IDENTIFIER,
    ReservationPersistence: NVME_CDW11_FEATURE_RESERVATION_PERSISTENCE,
    ReservationNotificationMask: NVME_CDW11_FEATURE_RESERVATION_NOTIFICATION_MASK,
    GetHostMetadata: NVME_CDW11_FEATURE_GET_HOST_METADATA,
    SetHostMetadata: NVME_CDW11_FEATURE_SET_HOST_METADATA,
    AsUlong: u32,
};

pub const NVME_CDW12_FEATURES = extern union {
    HostMemoryBuffer: NVME_CDW12_FEATURE_HOST_MEMORY_BUFFER,
    AsUlong: u32,
};

pub const NVME_CDW13_FEATURES = extern union {
    HostMemoryBuffer: NVME_CDW13_FEATURE_HOST_MEMORY_BUFFER,
    AsUlong: u32,
};

pub const NVME_CDW14_FEATURES = extern union {
    HostMemoryBuffer: NVME_CDW14_FEATURE_HOST_MEMORY_BUFFER,
    AsUlong: u32,
};

pub const NVME_CDW15_FEATURES = extern union {
    HostMemoryBuffer: NVME_CDW15_FEATURE_HOST_MEMORY_BUFFER,
    AsUlong: u32,
};

pub const NVME_LOG_PAGES = enum(i32) {
    ERROR_INFO = 1,
    HEALTH_INFO = 2,
    FIRMWARE_SLOT_INFO = 3,
    CHANGED_NAMESPACE_LIST = 4,
    COMMAND_EFFECTS = 5,
    DEVICE_SELF_TEST = 6,
    TELEMETRY_HOST_INITIATED = 7,
    TELEMETRY_CTLR_INITIATED = 8,
    ENDURANCE_GROUP_INFORMATION = 9,
    PREDICTABLE_LATENCY_NVM_SET = 10,
    PREDICTABLE_LATENCY_EVENT_AGGREGATE = 11,
    ASYMMETRIC_NAMESPACE_ACCESS = 12,
    PERSISTENT_EVENT_LOG = 13,
    LBA_STATUS_INFORMATION = 14,
    ENDURANCE_GROUP_EVENT_AGGREGATE = 15,
    RESERVATION_NOTIFICATION = 128,
    SANITIZE_STATUS = 129,
    CHANGED_ZONE_LIST = 191,
};
pub const NVME_LOG_PAGE_ERROR_INFO = NVME_LOG_PAGES.ERROR_INFO;
pub const NVME_LOG_PAGE_HEALTH_INFO = NVME_LOG_PAGES.HEALTH_INFO;
pub const NVME_LOG_PAGE_FIRMWARE_SLOT_INFO = NVME_LOG_PAGES.FIRMWARE_SLOT_INFO;
pub const NVME_LOG_PAGE_CHANGED_NAMESPACE_LIST = NVME_LOG_PAGES.CHANGED_NAMESPACE_LIST;
pub const NVME_LOG_PAGE_COMMAND_EFFECTS = NVME_LOG_PAGES.COMMAND_EFFECTS;
pub const NVME_LOG_PAGE_DEVICE_SELF_TEST = NVME_LOG_PAGES.DEVICE_SELF_TEST;
pub const NVME_LOG_PAGE_TELEMETRY_HOST_INITIATED = NVME_LOG_PAGES.TELEMETRY_HOST_INITIATED;
pub const NVME_LOG_PAGE_TELEMETRY_CTLR_INITIATED = NVME_LOG_PAGES.TELEMETRY_CTLR_INITIATED;
pub const NVME_LOG_PAGE_ENDURANCE_GROUP_INFORMATION = NVME_LOG_PAGES.ENDURANCE_GROUP_INFORMATION;
pub const NVME_LOG_PAGE_PREDICTABLE_LATENCY_NVM_SET = NVME_LOG_PAGES.PREDICTABLE_LATENCY_NVM_SET;
pub const NVME_LOG_PAGE_PREDICTABLE_LATENCY_EVENT_AGGREGATE = NVME_LOG_PAGES.PREDICTABLE_LATENCY_EVENT_AGGREGATE;
pub const NVME_LOG_PAGE_ASYMMETRIC_NAMESPACE_ACCESS = NVME_LOG_PAGES.ASYMMETRIC_NAMESPACE_ACCESS;
pub const NVME_LOG_PAGE_PERSISTENT_EVENT_LOG = NVME_LOG_PAGES.PERSISTENT_EVENT_LOG;
pub const NVME_LOG_PAGE_LBA_STATUS_INFORMATION = NVME_LOG_PAGES.LBA_STATUS_INFORMATION;
pub const NVME_LOG_PAGE_ENDURANCE_GROUP_EVENT_AGGREGATE = NVME_LOG_PAGES.ENDURANCE_GROUP_EVENT_AGGREGATE;
pub const NVME_LOG_PAGE_RESERVATION_NOTIFICATION = NVME_LOG_PAGES.RESERVATION_NOTIFICATION;
pub const NVME_LOG_PAGE_SANITIZE_STATUS = NVME_LOG_PAGES.SANITIZE_STATUS;
pub const NVME_LOG_PAGE_CHANGED_ZONE_LIST = NVME_LOG_PAGES.CHANGED_ZONE_LIST;

pub const NVME_CDW10_GET_LOG_PAGE = extern union {
    Anonymous: extern struct {
        _bitfield: u32,
    },
    AsUlong: u32,
};

pub const NVME_CDW10_GET_LOG_PAGE_V13 = extern union {
    Anonymous: extern struct {
        _bitfield: u32,
    },
    AsUlong: u32,
};

pub const NVME_CDW11_GET_LOG_PAGE = extern union {
    Anonymous: extern struct {
        _bitfield: u32,
    },
    AsUlong: u32,
};

pub const NVME_CDW12_GET_LOG_PAGE = extern struct {
    LPOL: u32,
};

pub const NVME_CDW13_GET_LOG_PAGE = extern struct {
    LPOU: u32,
};

pub const NVME_CDW14_GET_LOG_PAGE = extern union {
    Anonymous: extern struct {
        _bitfield: u32,
    },
    AsUlong: u32,
};

pub const NVME_ERROR_INFO_LOG = extern struct {
    ErrorCount: u64,
    SQID: u16,
    CMDID: u16,
    Status: NVME_COMMAND_STATUS,
    ParameterErrorLocation: extern struct {
        _bitfield: u16,
    },
    Lba: u64,
    NameSpace: u32,
    VendorInfoAvailable: u8,
    Reserved0: [3]u8,
    CommandSpecificInfo: u64,
    Reserved1: [24]u8,
};

pub const NVME_HEALTH_INFO_LOG = extern struct {
    CriticalWarning: extern union {
        Anonymous: extern struct {
            _bitfield: u8,
        },
        AsUchar: u8,
    },
    Temperature: [2]u8,
    AvailableSpare: u8,
    AvailableSpareThreshold: u8,
    PercentageUsed: u8,
    Reserved0: [26]u8,
    DataUnitRead: [16]u8,
    DataUnitWritten: [16]u8,
    HostReadCommands: [16]u8,
    HostWrittenCommands: [16]u8,
    ControllerBusyTime: [16]u8,
    PowerCycle: [16]u8,
    PowerOnHours: [16]u8,
    UnsafeShutdowns: [16]u8,
    MediaErrors: [16]u8,
    ErrorInfoLogEntryCount: [16]u8,
    WarningCompositeTemperatureTime: u32,
    CriticalCompositeTemperatureTime: u32,
    TemperatureSensor1: u16,
    TemperatureSensor2: u16,
    TemperatureSensor3: u16,
    TemperatureSensor4: u16,
    TemperatureSensor5: u16,
    TemperatureSensor6: u16,
    TemperatureSensor7: u16,
    TemperatureSensor8: u16,
    Reserved1: [296]u8,
};

pub const NVME_TELEMETRY_HOST_INITIATED_LOG = extern struct {
    LogIdentifier: u8,
    Reserved0: [4]u8,
    OrganizationID: [3]u8,
    Area1LastBlock: u16,
    Area2LastBlock: u16,
    Area3LastBlock: u16,
    Reserved1: [2]u8,
    Area4LastBlock: u32,
    Reserved2: [361]u8,
    HostInitiatedDataGenerationNumber: u8,
    ControllerInitiatedDataAvailable: u8,
    ControllerInitiatedDataGenerationNumber: u8,
    ReasonIdentifier: [128]u8,
};

pub const NVME_TELEMETRY_CONTROLLER_INITIATED_LOG = extern struct {
    LogIdentifier: u8,
    Reserved0: [4]u8,
    OrganizationID: [3]u8,
    Area1LastBlock: u16,
    Area2LastBlock: u16,
    Area3LastBlock: u16,
    Reserved1: [2]u8,
    Area4LastBlock: u32,
    Reserved2: [362]u8,
    ControllerInitiatedDataAvailable: u8,
    ControllerInitiatedDataGenerationNumber: u8,
    ReasonIdentifier: [128]u8,
};

pub const NVME_FIRMWARE_SLOT_INFO_LOG = extern struct {
    AFI: extern struct {
        _bitfield: u8,
    },
    Reserved0: [7]u8,
    FRS: [7]u64,
    Reserved1: [448]u8,
};

pub const NVME_CHANGED_NAMESPACE_LIST_LOG = extern struct {
    NSID: [1024]u32,
};

pub const NVME_CHANGED_ZONE_LIST_LOG = extern struct {
    ZoneIdentifiersCount: u16,
    Reserved: [6]u8,
    ZoneIdentifier: [511]u64,
};

pub const NVME_COMMAND_EFFECT_SBUMISSION_EXECUTION_LIMITS = enum(i32) {
    NONE = 0,
    SINGLE_PER_NAMESPACE = 1,
    SINGLE_PER_CONTROLLER = 2,
};
pub const NVME_COMMAND_EFFECT_SBUMISSION_EXECUTION_LIMIT_NONE = NVME_COMMAND_EFFECT_SBUMISSION_EXECUTION_LIMITS.NONE;
pub const NVME_COMMAND_EFFECT_SBUMISSION_EXECUTION_LIMIT_SINGLE_PER_NAMESPACE = NVME_COMMAND_EFFECT_SBUMISSION_EXECUTION_LIMITS.SINGLE_PER_NAMESPACE;
pub const NVME_COMMAND_EFFECT_SBUMISSION_EXECUTION_LIMIT_SINGLE_PER_CONTROLLER = NVME_COMMAND_EFFECT_SBUMISSION_EXECUTION_LIMITS.SINGLE_PER_CONTROLLER;

pub const NVME_COMMAND_EFFECTS_DATA = extern union {
    Anonymous: extern struct {
        _bitfield: u32,
    },
    AsUlong: u32,
};

pub const NVME_COMMAND_EFFECTS_LOG = extern struct {
    ACS: [256]NVME_COMMAND_EFFECTS_DATA,
    IOCS: [256]NVME_COMMAND_EFFECTS_DATA,
    Reserved: [2048]u8,
};

pub const NVME_DEVICE_SELF_TEST_RESULT_DATA = extern struct {
    Status: extern struct {
        _bitfield: u8,
    } align(1),
    SegmentNumber: u8 align(1),
    ValidDiagnostics: extern struct {
        _bitfield: u8,
    } align(1),
    Reserved: u8 align(1),
    POH: u64 align(1),
    NSID: u32 align(1),
    FailingLBA: u64 align(1),
    StatusCodeType: extern struct {
        _bitfield: u8,
    } align(1),
    StatusCode: u8 align(1),
    VendorSpecific: u16 align(1),
};

pub const NVME_DEVICE_SELF_TEST_LOG = extern struct {
    CurrentOperation: extern struct {
        _bitfield: u8,
    },
    CurrentCompletion: extern struct {
        _bitfield: u8,
    },
    Reserved: [2]u8,
    ResultData: [20]NVME_DEVICE_SELF_TEST_RESULT_DATA,
};

pub const NVME_ENDURANCE_GROUP_LOG = extern struct {
    Reserved0: u32 align(1),
    AvailableSpareThreshold: u8 align(1),
    PercentageUsed: u8 align(1),
    Reserved1: [26]u8 align(1),
    EnduranceEstimate: [16]u8 align(1),
    DataUnitsRead: [16]u8 align(1),
    DataUnitsWritten: [16]u8 align(1),
    MediaUnitsWritten: [16]u8 align(1),
    Reserved2: [416]u8 align(1),
};

pub const NVME_PERSISTENT_EVENT_LOG_HEADER = extern struct {
    LogIdentifier: u8 align(1),
    Reserved0: [3]u8 align(1),
    TotalNumberOfEvents: u32 align(1),
    TotalLogLength: u64 align(1),
    LogRevision: u8 align(1),
    Reserved1: u8 align(1),
    LogHeaderLength: u16 align(1),
    Timestamp: u64 align(1),
    PowerOnHours: [16]u8 align(1),
    PowerCycleCount: u64 align(1),
    PciVendorId: u16 align(1),
    PciSubsystemVendorId: u16 align(1),
    SerialNumber: [20]u8 align(1),
    ModelNumber: [40]u8 align(1),
    NVMSubsystemNVMeQualifiedName: [256]u8 align(1),
    Reserved: [108]u8 align(1),
    SupportedEventsBitmap: [32]u8 align(1),
};

pub const NVME_PERSISTENT_EVENT_LOG_EVENT_HEADER = extern struct {
    EventType: u8 align(1),
    EventTypeRevision: u8 align(1),
    EventHeaderLength: u8 align(1),
    Reserved0: u8 align(1),
    ControllerIdentifier: u16 align(1),
    EventTimestamp: u64 align(1),
    Reserved1: [6]u8 align(1),
    VendorSpecificInformationLength: u16 align(1),
    EventLength: u16 align(1),
};

pub const NVME_PERSISTENT_EVENT_LOG_EVENT_TYPES = enum(i32) {
    RESERVED0 = 0,
    SMART_HEALTH_LOG_SNAPSHOT = 1,
    FIRMWARE_COMMIT = 2,
    TIMESTAMP_CHANGE = 3,
    POWER_ON_OR_RESET = 4,
    NVM_SUBSYSTEM_HARDWARE_ERROR = 5,
    CHANGE_NAMESPACE = 6,
    FORMAT_NVM_START = 7,
    FORMAT_NVM_COMPLETION = 8,
    SANITIZE_START = 9,
    SANITIZE_COMPLETION = 10,
    SET_FEATURE = 11,
    TELEMETRY_LOG_CREATED = 12,
    THERMAL_EXCURSION = 13,
    RESERVED1_BEGIN = 14,
    RESERVED1_END = 221,
    VENDOR_SPECIFIC_EVENT = 222,
    TCG_DEFINED = 223,
    RESERVED2_BEGIN = 224,
    RESERVED2_END = 255,
    // MAX = 255, this enum value conflicts with RESERVED2_END
};
pub const NVME_PERSISTENT_EVENT_TYPE_RESERVED0 = NVME_PERSISTENT_EVENT_LOG_EVENT_TYPES.RESERVED0;
pub const NVME_PERSISTENT_EVENT_TYPE_SMART_HEALTH_LOG_SNAPSHOT = NVME_PERSISTENT_EVENT_LOG_EVENT_TYPES.SMART_HEALTH_LOG_SNAPSHOT;
pub const NVME_PERSISTENT_EVENT_TYPE_FIRMWARE_COMMIT = NVME_PERSISTENT_EVENT_LOG_EVENT_TYPES.FIRMWARE_COMMIT;
pub const NVME_PERSISTENT_EVENT_TYPE_TIMESTAMP_CHANGE = NVME_PERSISTENT_EVENT_LOG_EVENT_TYPES.TIMESTAMP_CHANGE;
pub const NVME_PERSISTENT_EVENT_TYPE_POWER_ON_OR_RESET = NVME_PERSISTENT_EVENT_LOG_EVENT_TYPES.POWER_ON_OR_RESET;
pub const NVME_PERSISTENT_EVENT_TYPE_NVM_SUBSYSTEM_HARDWARE_ERROR = NVME_PERSISTENT_EVENT_LOG_EVENT_TYPES.NVM_SUBSYSTEM_HARDWARE_ERROR;
pub const NVME_PERSISTENT_EVENT_TYPE_CHANGE_NAMESPACE = NVME_PERSISTENT_EVENT_LOG_EVENT_TYPES.CHANGE_NAMESPACE;
pub const NVME_PERSISTENT_EVENT_TYPE_FORMAT_NVM_START = NVME_PERSISTENT_EVENT_LOG_EVENT_TYPES.FORMAT_NVM_START;
pub const NVME_PERSISTENT_EVENT_TYPE_FORMAT_NVM_COMPLETION = NVME_PERSISTENT_EVENT_LOG_EVENT_TYPES.FORMAT_NVM_COMPLETION;
pub const NVME_PERSISTENT_EVENT_TYPE_SANITIZE_START = NVME_PERSISTENT_EVENT_LOG_EVENT_TYPES.SANITIZE_START;
pub const NVME_PERSISTENT_EVENT_TYPE_SANITIZE_COMPLETION = NVME_PERSISTENT_EVENT_LOG_EVENT_TYPES.SANITIZE_COMPLETION;
pub const NVME_PERSISTENT_EVENT_TYPE_SET_FEATURE = NVME_PERSISTENT_EVENT_LOG_EVENT_TYPES.SET_FEATURE;
pub const NVME_PERSISTENT_EVENT_TYPE_TELEMETRY_LOG_CREATED = NVME_PERSISTENT_EVENT_LOG_EVENT_TYPES.TELEMETRY_LOG_CREATED;
pub const NVME_PERSISTENT_EVENT_TYPE_THERMAL_EXCURSION = NVME_PERSISTENT_EVENT_LOG_EVENT_TYPES.THERMAL_EXCURSION;
pub const NVME_PERSISTENT_EVENT_TYPE_RESERVED1_BEGIN = NVME_PERSISTENT_EVENT_LOG_EVENT_TYPES.RESERVED1_BEGIN;
pub const NVME_PERSISTENT_EVENT_TYPE_RESERVED1_END = NVME_PERSISTENT_EVENT_LOG_EVENT_TYPES.RESERVED1_END;
pub const NVME_PERSISTENT_EVENT_TYPE_VENDOR_SPECIFIC_EVENT = NVME_PERSISTENT_EVENT_LOG_EVENT_TYPES.VENDOR_SPECIFIC_EVENT;
pub const NVME_PERSISTENT_EVENT_TYPE_TCG_DEFINED = NVME_PERSISTENT_EVENT_LOG_EVENT_TYPES.TCG_DEFINED;
pub const NVME_PERSISTENT_EVENT_TYPE_RESERVED2_BEGIN = NVME_PERSISTENT_EVENT_LOG_EVENT_TYPES.RESERVED2_BEGIN;
pub const NVME_PERSISTENT_EVENT_TYPE_RESERVED2_END = NVME_PERSISTENT_EVENT_LOG_EVENT_TYPES.RESERVED2_END;
pub const NVME_PERSISTENT_EVENT_TYPE_MAX = NVME_PERSISTENT_EVENT_LOG_EVENT_TYPES.RESERVED2_END;

pub const NVME_RESERVATION_NOTIFICATION_TYPES = enum(i32) {
    EMPTY_LOG_PAGE = 0,
    REGISTRATION_PREEMPTED = 1,
    REGISTRATION_RELEASED = 2,
    RESERVATION_PREEPMPTED = 3,
};
pub const NVME_RESERVATION_NOTIFICATION_TYPE_EMPTY_LOG_PAGE = NVME_RESERVATION_NOTIFICATION_TYPES.EMPTY_LOG_PAGE;
pub const NVME_RESERVATION_NOTIFICATION_TYPE_REGISTRATION_PREEMPTED = NVME_RESERVATION_NOTIFICATION_TYPES.REGISTRATION_PREEMPTED;
pub const NVME_RESERVATION_NOTIFICATION_TYPE_REGISTRATION_RELEASED = NVME_RESERVATION_NOTIFICATION_TYPES.REGISTRATION_RELEASED;
pub const NVME_RESERVATION_NOTIFICATION_TYPE_RESERVATION_PREEPMPTED = NVME_RESERVATION_NOTIFICATION_TYPES.RESERVATION_PREEPMPTED;

pub const NVME_RESERVATION_NOTIFICATION_LOG = extern struct {
    LogPageCount: u64,
    LogPageType: u8,
    AvailableLogPageCount: u8,
    Reserved0: [2]u8,
    NameSpaceId: u32,
    Reserved1: [48]u8,
};

pub const NVME_SANITIZE_OPERATION_STATUS = enum(i32) {
    NONE = 0,
    SUCCEEDED = 1,
    IN_PROGRESS = 2,
    FAILED = 3,
    SUCCEEDED_WITH_FORCED_DEALLOCATION = 4,
};
pub const NVME_SANITIZE_OPERATION_NONE = NVME_SANITIZE_OPERATION_STATUS.NONE;
pub const NVME_SANITIZE_OPERATION_SUCCEEDED = NVME_SANITIZE_OPERATION_STATUS.SUCCEEDED;
pub const NVME_SANITIZE_OPERATION_IN_PROGRESS = NVME_SANITIZE_OPERATION_STATUS.IN_PROGRESS;
pub const NVME_SANITIZE_OPERATION_FAILED = NVME_SANITIZE_OPERATION_STATUS.FAILED;
pub const NVME_SANITIZE_OPERATION_SUCCEEDED_WITH_FORCED_DEALLOCATION = NVME_SANITIZE_OPERATION_STATUS.SUCCEEDED_WITH_FORCED_DEALLOCATION;

pub const NVME_SANITIZE_STATUS = extern struct {
    _bitfield: u16,
};

pub const NVME_SANITIZE_STATUS_LOG = extern struct {
    SPROG: u16,
    SSTAT: NVME_SANITIZE_STATUS,
    SCDW10: u32,
    EstimatedTimeForOverwrite: u32,
    EstimatedTimeForBlockErase: u32,
    EstimatedTimeForCryptoErase: u32,
    EstimatedTimeForOverwriteWithNoDeallocateMediaModification: u32,
    EstimatedTimeForBlockEraseWithNoDeallocateMediaModification: u32,
    EstimatedTimeForCryptoEraseWithNoDeallocateMediaModification: u32,
    Reserved: [480]u8,
};

pub const NVME_CDW10_FIRMWARE_DOWNLOAD = extern struct {
    NUMD: u32,
};

pub const NVME_CDW11_FIRMWARE_DOWNLOAD = extern struct {
    OFST: u32,
};

pub const NVME_FIRMWARE_ACTIVATE_ACTIONS = enum(i32) {
    DOWNLOAD_TO_SLOT = 0,
    DOWNLOAD_TO_SLOT_AND_ACTIVATE = 1,
    ACTIVATE = 2,
    DOWNLOAD_TO_SLOT_AND_ACTIVATE_IMMEDIATE = 3,
};
pub const NVME_FIRMWARE_ACTIVATE_ACTION_DOWNLOAD_TO_SLOT = NVME_FIRMWARE_ACTIVATE_ACTIONS.DOWNLOAD_TO_SLOT;
pub const NVME_FIRMWARE_ACTIVATE_ACTION_DOWNLOAD_TO_SLOT_AND_ACTIVATE = NVME_FIRMWARE_ACTIVATE_ACTIONS.DOWNLOAD_TO_SLOT_AND_ACTIVATE;
pub const NVME_FIRMWARE_ACTIVATE_ACTION_ACTIVATE = NVME_FIRMWARE_ACTIVATE_ACTIONS.ACTIVATE;
pub const NVME_FIRMWARE_ACTIVATE_ACTION_DOWNLOAD_TO_SLOT_AND_ACTIVATE_IMMEDIATE = NVME_FIRMWARE_ACTIVATE_ACTIONS.DOWNLOAD_TO_SLOT_AND_ACTIVATE_IMMEDIATE;

pub const NVME_CDW10_FIRMWARE_ACTIVATE = extern union {
    Anonymous: extern struct {
        _bitfield: u32,
    },
    AsUlong: u32,
};

pub const NVME_PROTECTION_INFORMATION_TYPES = enum(i32) {
    NOT_ENABLED = 0,
    TYPE1 = 1,
    TYPE2 = 2,
    TYPE3 = 3,
};
pub const NVME_PROTECTION_INFORMATION_NOT_ENABLED = NVME_PROTECTION_INFORMATION_TYPES.NOT_ENABLED;
pub const NVME_PROTECTION_INFORMATION_TYPE1 = NVME_PROTECTION_INFORMATION_TYPES.TYPE1;
pub const NVME_PROTECTION_INFORMATION_TYPE2 = NVME_PROTECTION_INFORMATION_TYPES.TYPE2;
pub const NVME_PROTECTION_INFORMATION_TYPE3 = NVME_PROTECTION_INFORMATION_TYPES.TYPE3;

pub const NVME_SECURE_ERASE_SETTINGS = enum(i32) {
    NONE = 0,
    USER_DATA = 1,
    CRYPTOGRAPHIC = 2,
};
pub const NVME_SECURE_ERASE_NONE = NVME_SECURE_ERASE_SETTINGS.NONE;
pub const NVME_SECURE_ERASE_USER_DATA = NVME_SECURE_ERASE_SETTINGS.USER_DATA;
pub const NVME_SECURE_ERASE_CRYPTOGRAPHIC = NVME_SECURE_ERASE_SETTINGS.CRYPTOGRAPHIC;

pub const NVME_CDW10_FORMAT_NVM = extern union {
    Anonymous: extern struct {
        _bitfield: u32,
    },
    AsUlong: u32,
};

pub const NVME_NO_DEALLOCATE_MODIFIES_MEDIA_AFTER_SANITIZE = enum(i32) {
    ADDITIONALLY_MODIFIED_AFTER_SANITIZE_NOT_DEFINED = 0,
    NOT_ADDITIONALLY_MODIFIED_AFTER_SANITIZE = 1,
    ADDITIONALLY_MOFIDIED_AFTER_SANITIZE = 2,
};
pub const NVME_MEDIA_ADDITIONALLY_MODIFIED_AFTER_SANITIZE_NOT_DEFINED = NVME_NO_DEALLOCATE_MODIFIES_MEDIA_AFTER_SANITIZE.ADDITIONALLY_MODIFIED_AFTER_SANITIZE_NOT_DEFINED;
pub const NVME_MEDIA_NOT_ADDITIONALLY_MODIFIED_AFTER_SANITIZE = NVME_NO_DEALLOCATE_MODIFIES_MEDIA_AFTER_SANITIZE.NOT_ADDITIONALLY_MODIFIED_AFTER_SANITIZE;
pub const NVME_MEDIA_ADDITIONALLY_MOFIDIED_AFTER_SANITIZE = NVME_NO_DEALLOCATE_MODIFIES_MEDIA_AFTER_SANITIZE.ADDITIONALLY_MOFIDIED_AFTER_SANITIZE;

pub const NVME_SANITIZE_ACTION = enum(i32) {
    RESERVED = 0,
    EXIT_FAILURE_MODE = 1,
    START_BLOCK_ERASE_SANITIZE = 2,
    START_OVERWRITE_SANITIZE = 3,
    START_CRYPTO_ERASE_SANITIZE = 4,
};
pub const NVME_SANITIZE_ACTION_RESERVED = NVME_SANITIZE_ACTION.RESERVED;
pub const NVME_SANITIZE_ACTION_EXIT_FAILURE_MODE = NVME_SANITIZE_ACTION.EXIT_FAILURE_MODE;
pub const NVME_SANITIZE_ACTION_START_BLOCK_ERASE_SANITIZE = NVME_SANITIZE_ACTION.START_BLOCK_ERASE_SANITIZE;
pub const NVME_SANITIZE_ACTION_START_OVERWRITE_SANITIZE = NVME_SANITIZE_ACTION.START_OVERWRITE_SANITIZE;
pub const NVME_SANITIZE_ACTION_START_CRYPTO_ERASE_SANITIZE = NVME_SANITIZE_ACTION.START_CRYPTO_ERASE_SANITIZE;

pub const NVME_CDW10_SANITIZE = extern union {
    Anonymous: extern struct {
        _bitfield: u32,
    },
    AsUlong: u32,
};

pub const NVME_CDW11_SANITIZE = extern union {
    Anonymous: extern struct {
        OVRPAT: u32,
    },
    AsUlong: u32,
};

pub const NVME_RESERVATION_TYPES = enum(i32) {
    RESERVED = 0,
    WRITE_EXCLUSIVE = 1,
    EXCLUSIVE_ACCESS = 2,
    WRITE_EXCLUSIVE_REGISTRANTS_ONLY = 3,
    EXCLUSIVE_ACCESS_REGISTRANTS_ONLY = 4,
    WRITE_EXCLUSIVE_ALL_REGISTRANTS = 5,
    EXCLUSIVE_ACCESS_ALL_REGISTRANTS = 6,
};
pub const NVME_RESERVATION_TYPE_RESERVED = NVME_RESERVATION_TYPES.RESERVED;
pub const NVME_RESERVATION_TYPE_WRITE_EXCLUSIVE = NVME_RESERVATION_TYPES.WRITE_EXCLUSIVE;
pub const NVME_RESERVATION_TYPE_EXCLUSIVE_ACCESS = NVME_RESERVATION_TYPES.EXCLUSIVE_ACCESS;
pub const NVME_RESERVATION_TYPE_WRITE_EXCLUSIVE_REGISTRANTS_ONLY = NVME_RESERVATION_TYPES.WRITE_EXCLUSIVE_REGISTRANTS_ONLY;
pub const NVME_RESERVATION_TYPE_EXCLUSIVE_ACCESS_REGISTRANTS_ONLY = NVME_RESERVATION_TYPES.EXCLUSIVE_ACCESS_REGISTRANTS_ONLY;
pub const NVME_RESERVATION_TYPE_WRITE_EXCLUSIVE_ALL_REGISTRANTS = NVME_RESERVATION_TYPES.WRITE_EXCLUSIVE_ALL_REGISTRANTS;
pub const NVME_RESERVATION_TYPE_EXCLUSIVE_ACCESS_ALL_REGISTRANTS = NVME_RESERVATION_TYPES.EXCLUSIVE_ACCESS_ALL_REGISTRANTS;

pub const NVME_RESERVATION_ACQUIRE_ACTIONS = enum(i32) {
    ACQUIRE = 0,
    PREEMPT = 1,
    PREEMPT_AND_ABORT = 2,
};
pub const NVME_RESERVATION_ACQUIRE_ACTION_ACQUIRE = NVME_RESERVATION_ACQUIRE_ACTIONS.ACQUIRE;
pub const NVME_RESERVATION_ACQUIRE_ACTION_PREEMPT = NVME_RESERVATION_ACQUIRE_ACTIONS.PREEMPT;
pub const NVME_RESERVATION_ACQUIRE_ACTION_PREEMPT_AND_ABORT = NVME_RESERVATION_ACQUIRE_ACTIONS.PREEMPT_AND_ABORT;

pub const NVME_CDW0_RESERVATION_PERSISTENCE = extern struct {
    _bitfield: u32,
};

pub const NVME_CDW10_RESERVATION_ACQUIRE = extern union {
    Anonymous: extern struct {
        _bitfield: u32,
    },
    AsUlong: u32,
};

pub const NVME_RESERVATION_ACQUIRE_DATA_STRUCTURE = extern struct {
    CRKEY: u64,
    PRKEY: u64,
};

pub const NVME_RESERVATION_REGISTER_ACTIONS = enum(i32) {
    REGISTER = 0,
    UNREGISTER = 1,
    REPLACE = 2,
};
pub const NVME_RESERVATION_REGISTER_ACTION_REGISTER = NVME_RESERVATION_REGISTER_ACTIONS.REGISTER;
pub const NVME_RESERVATION_REGISTER_ACTION_UNREGISTER = NVME_RESERVATION_REGISTER_ACTIONS.UNREGISTER;
pub const NVME_RESERVATION_REGISTER_ACTION_REPLACE = NVME_RESERVATION_REGISTER_ACTIONS.REPLACE;

pub const NVME_RESERVATION_REGISTER_PTPL_STATE_CHANGES = enum(i32) {
    NO_CHANGE = 0,
    RESERVED = 1,
    SET_TO_0 = 2,
    SET_TO_1 = 3,
};
pub const NVME_RESERVATION_REGISTER_PTPL_STATE_NO_CHANGE = NVME_RESERVATION_REGISTER_PTPL_STATE_CHANGES.NO_CHANGE;
pub const NVME_RESERVATION_REGISTER_PTPL_STATE_RESERVED = NVME_RESERVATION_REGISTER_PTPL_STATE_CHANGES.RESERVED;
pub const NVME_RESERVATION_REGISTER_PTPL_STATE_SET_TO_0 = NVME_RESERVATION_REGISTER_PTPL_STATE_CHANGES.SET_TO_0;
pub const NVME_RESERVATION_REGISTER_PTPL_STATE_SET_TO_1 = NVME_RESERVATION_REGISTER_PTPL_STATE_CHANGES.SET_TO_1;

pub const NVME_CDW10_RESERVATION_REGISTER = extern union {
    Anonymous: extern struct {
        _bitfield: u32,
    },
    AsUlong: u32,
};

pub const NVME_RESERVATION_REGISTER_DATA_STRUCTURE = extern struct {
    CRKEY: u64,
    NRKEY: u64,
};

pub const NVME_RESERVATION_RELEASE_ACTIONS = enum(i32) {
    RELEASE = 0,
    CLEAR = 1,
};
pub const NVME_RESERVATION_RELEASE_ACTION_RELEASE = NVME_RESERVATION_RELEASE_ACTIONS.RELEASE;
pub const NVME_RESERVATION_RELEASE_ACTION_CLEAR = NVME_RESERVATION_RELEASE_ACTIONS.CLEAR;

pub const NVME_CDW10_RESERVATION_RELEASE = extern union {
    Anonymous: extern struct {
        _bitfield: u32,
    },
    AsUlong: u32,
};

pub const NVME_RESERVATION_RELEASE_DATA_STRUCTURE = extern struct {
    CRKEY: u64,
};

pub const NVME_CDW10_RESERVATION_REPORT = extern union {
    Anonymous: extern struct {
        NUMD: u32,
    },
    AsUlong: u32,
};

pub const NVME_CDW11_RESERVATION_REPORT = extern union {
    Anonymous: extern struct {
        _bitfield: u32,
    },
    AsUlong: u32,
};

pub const NVME_RESERVATION_REPORT_STATUS_HEADER = extern struct {
    GEN: u32 align(1),
    RTYPE: u8 align(1),
    REGCTL: u16 align(1),
    Reserved: [2]u8 align(1),
    PTPLS: u8 align(1),
    Reserved1: [14]u8 align(1),
};

pub const NVME_REGISTERED_CONTROLLER_DATA = extern struct {
    CNTLID: u16,
    RCSTS: extern struct {
        _bitfield: u8,
    },
    Reserved: [5]u8,
    HOSTID: [8]u8,
    RKEY: u64,
};

pub const NVME_RESERVATION_REPORT_STATUS_DATA_STRUCTURE = extern struct {
    Header: NVME_RESERVATION_REPORT_STATUS_HEADER,
    RegisteredControllersData: [1]NVME_REGISTERED_CONTROLLER_DATA,
};

pub const NVME_REGISTERED_CONTROLLER_EXTENDED_DATA = extern struct {
    CNTLID: u16,
    RCSTS: extern struct {
        _bitfield: u8,
    },
    Reserved: [5]u8,
    RKEY: u64,
    HOSTID: [16]u8,
    Reserved1: [32]u8,
};

pub const NVME_RESERVATION_REPORT_STATUS_EXTENDED_DATA_STRUCTURE = extern struct {
    Header: NVME_RESERVATION_REPORT_STATUS_HEADER,
    Reserved1: [40]u8,
    RegisteredControllersExtendedData: [1]NVME_REGISTERED_CONTROLLER_EXTENDED_DATA,
};

pub const NVME_DIRECTIVE_TYPES = enum(i32) {
    IDENTIFY = 0,
    STREAMS = 1,
};
pub const NVME_DIRECTIVE_TYPE_IDENTIFY = NVME_DIRECTIVE_TYPES.IDENTIFY;
pub const NVME_DIRECTIVE_TYPE_STREAMS = NVME_DIRECTIVE_TYPES.STREAMS;

pub const NVME_CDW10_DIRECTIVE_RECEIVE = extern struct {
    NUMD: u32,
};

pub const NVME_CDW11_DIRECTIVE_RECEIVE = extern union {
    Anonymous: extern struct {
        _bitfield: u32,
    },
    AsUlong: u32,
};

pub const NVME_CDW10_DIRECTIVE_SEND = extern struct {
    NUMD: u32,
};

pub const NVME_CDW11_DIRECTIVE_SEND = extern union {
    Anonymous: extern struct {
        _bitfield: u32,
    },
    AsUlong: u32,
};

pub const NVME_DIRECTIVE_RECEIVE_IDENTIFY_OPERATIONS = enum(i32) {
    S = 1,
};
pub const NVME_DIRECTIVE_RECEIVE_IDENTIFY_OPERATION_RETURN_PARAMETERS = NVME_DIRECTIVE_RECEIVE_IDENTIFY_OPERATIONS.S;

pub const NVME_DIRECTIVE_SEND_IDENTIFY_OPERATIONS = enum(i32) {
    E = 1,
};
pub const NVME_DIRECTIVE_SEND_IDENTIFY_OPERATION_ENABLE_DIRECTIVE = NVME_DIRECTIVE_SEND_IDENTIFY_OPERATIONS.E;

pub const NVME_DIRECTIVE_IDENTIFY_RETURN_PARAMETERS_DESCRIPTOR = extern struct {
    _bitfield: u8,
    Reserved1: [31]u8,
};

pub const NVME_DIRECTIVE_IDENTIFY_RETURN_PARAMETERS = extern struct {
    DirectivesSupported: NVME_DIRECTIVE_IDENTIFY_RETURN_PARAMETERS_DESCRIPTOR,
    DirectivesEnabled: NVME_DIRECTIVE_IDENTIFY_RETURN_PARAMETERS_DESCRIPTOR,
};

pub const NVME_CDW12_DIRECTIVE_SEND_IDENTIFY_ENABLE_DIRECTIVE = extern union {
    Anonymous: extern struct {
        _bitfield: u32,
    },
    AsUlong: u32,
};

pub const NVME_DIRECTIVE_RECEIVE_STREAMS_OPERATIONS = enum(i32) {
    RETURN_PARAMETERS = 1,
    GET_STATUS = 2,
    ALLOCATE_RESOURCES = 3,
};
pub const NVME_DIRECTIVE_RECEIVE_STREAMS_OPERATION_RETURN_PARAMETERS = NVME_DIRECTIVE_RECEIVE_STREAMS_OPERATIONS.RETURN_PARAMETERS;
pub const NVME_DIRECTIVE_RECEIVE_STREAMS_OPERATION_GET_STATUS = NVME_DIRECTIVE_RECEIVE_STREAMS_OPERATIONS.GET_STATUS;
pub const NVME_DIRECTIVE_RECEIVE_STREAMS_OPERATION_ALLOCATE_RESOURCES = NVME_DIRECTIVE_RECEIVE_STREAMS_OPERATIONS.ALLOCATE_RESOURCES;

pub const NVME_DIRECTIVE_SEND_STREAMS_OPERATIONS = enum(i32) {
    IDENTIFIER = 1,
    RESOURCES = 2,
};
pub const NVME_DIRECTIVE_SEND_STREAMS_OPERATION_RELEASE_IDENTIFIER = NVME_DIRECTIVE_SEND_STREAMS_OPERATIONS.IDENTIFIER;
pub const NVME_DIRECTIVE_SEND_STREAMS_OPERATION_RELEASE_RESOURCES = NVME_DIRECTIVE_SEND_STREAMS_OPERATIONS.RESOURCES;

pub const NVME_DIRECTIVE_STREAMS_RETURN_PARAMETERS = extern struct {
    MSL: u16,
    NSSA: u16,
    NSSO: u16,
    Reserved0: [10]u8,
    SWS: u32,
    SGS: u16,
    NSA: u16,
    NSO: u16,
    Reserved1: [6]u8,
};

pub const NVME_DIRECTIVE_STREAMS_GET_STATUS_DATA = extern struct {
    OpenStreamCount: u16,
    StreamIdentifiers: [65535]u16,
};

pub const NVME_CDW12_DIRECTIVE_RECEIVE_STREAMS_ALLOCATE_RESOURCES = extern union {
    Anonymous: extern struct {
        _bitfield: u32,
    },
    AsUlong: u32,
};

pub const NVME_COMPLETION_DW0_DIRECTIVE_RECEIVE_STREAMS_ALLOCATE_RESOURCES = extern struct {
    Anonymous: extern struct {
        _bitfield: u32,
    },
    AsUlong: u32,
};

pub const NVME_CDW12_DIRECTIVE_SEND = extern union {
    EnableDirective: NVME_CDW12_DIRECTIVE_SEND_IDENTIFY_ENABLE_DIRECTIVE,
    AsUlong: u32,
};

pub const NVME_CDW12_DIRECTIVE_RECEIVE = extern union {
    AllocateResources: NVME_CDW12_DIRECTIVE_RECEIVE_STREAMS_ALLOCATE_RESOURCES,
    AsUlong: u32,
};

pub const NVME_CDW10_SECURITY_SEND_RECEIVE = extern union {
    Anonymous: extern struct {
        _bitfield: u32,
    },
    AsUlong: u32,
};

pub const NVME_CDW11_SECURITY_SEND = extern struct {
    TL: u32,
};

pub const NVME_CDW11_SECURITY_RECEIVE = extern struct {
    AL: u32,
};

pub const NVME_NVM_COMMANDS = enum(i32) {
    FLUSH = 0,
    WRITE = 1,
    READ = 2,
    WRITE_UNCORRECTABLE = 4,
    COMPARE = 5,
    WRITE_ZEROES = 8,
    DATASET_MANAGEMENT = 9,
    VERIFY = 12,
    RESERVATION_REGISTER = 13,
    RESERVATION_REPORT = 14,
    RESERVATION_ACQUIRE = 17,
    RESERVATION_RELEASE = 21,
    COPY = 25,
    ZONE_MANAGEMENT_SEND = 121,
    ZONE_MANAGEMENT_RECEIVE = 122,
    ZONE_APPEND = 125,
};
pub const NVME_NVM_COMMAND_FLUSH = NVME_NVM_COMMANDS.FLUSH;
pub const NVME_NVM_COMMAND_WRITE = NVME_NVM_COMMANDS.WRITE;
pub const NVME_NVM_COMMAND_READ = NVME_NVM_COMMANDS.READ;
pub const NVME_NVM_COMMAND_WRITE_UNCORRECTABLE = NVME_NVM_COMMANDS.WRITE_UNCORRECTABLE;
pub const NVME_NVM_COMMAND_COMPARE = NVME_NVM_COMMANDS.COMPARE;
pub const NVME_NVM_COMMAND_WRITE_ZEROES = NVME_NVM_COMMANDS.WRITE_ZEROES;
pub const NVME_NVM_COMMAND_DATASET_MANAGEMENT = NVME_NVM_COMMANDS.DATASET_MANAGEMENT;
pub const NVME_NVM_COMMAND_VERIFY = NVME_NVM_COMMANDS.VERIFY;
pub const NVME_NVM_COMMAND_RESERVATION_REGISTER = NVME_NVM_COMMANDS.RESERVATION_REGISTER;
pub const NVME_NVM_COMMAND_RESERVATION_REPORT = NVME_NVM_COMMANDS.RESERVATION_REPORT;
pub const NVME_NVM_COMMAND_RESERVATION_ACQUIRE = NVME_NVM_COMMANDS.RESERVATION_ACQUIRE;
pub const NVME_NVM_COMMAND_RESERVATION_RELEASE = NVME_NVM_COMMANDS.RESERVATION_RELEASE;
pub const NVME_NVM_COMMAND_COPY = NVME_NVM_COMMANDS.COPY;
pub const NVME_NVM_COMMAND_ZONE_MANAGEMENT_SEND = NVME_NVM_COMMANDS.ZONE_MANAGEMENT_SEND;
pub const NVME_NVM_COMMAND_ZONE_MANAGEMENT_RECEIVE = NVME_NVM_COMMANDS.ZONE_MANAGEMENT_RECEIVE;
pub const NVME_NVM_COMMAND_ZONE_APPEND = NVME_NVM_COMMANDS.ZONE_APPEND;

pub const NVME_CDW12_READ_WRITE = extern union {
    Anonymous: extern struct {
        _bitfield: u32,
    },
    AsUlong: u32,
};

pub const NVME_ACCESS_FREQUENCIES = enum(i32) {
    NONE = 0,
    TYPICAL = 1,
    INFR_WRITE_INFR_READ = 2,
    INFR_WRITE_FR_READ = 3,
    FR_WRITE_INFR_READ = 4,
    FR_WRITE_FR_READ = 5,
    ONE_TIME_READ = 6,
    SPECULATIVE_READ = 7,
    WILL_BE_OVERWRITTEN = 8,
};
pub const NVME_ACCESS_FREQUENCY_NONE = NVME_ACCESS_FREQUENCIES.NONE;
pub const NVME_ACCESS_FREQUENCY_TYPICAL = NVME_ACCESS_FREQUENCIES.TYPICAL;
pub const NVME_ACCESS_FREQUENCY_INFR_WRITE_INFR_READ = NVME_ACCESS_FREQUENCIES.INFR_WRITE_INFR_READ;
pub const NVME_ACCESS_FREQUENCY_INFR_WRITE_FR_READ = NVME_ACCESS_FREQUENCIES.INFR_WRITE_FR_READ;
pub const NVME_ACCESS_FREQUENCY_FR_WRITE_INFR_READ = NVME_ACCESS_FREQUENCIES.FR_WRITE_INFR_READ;
pub const NVME_ACCESS_FREQUENCY_FR_WRITE_FR_READ = NVME_ACCESS_FREQUENCIES.FR_WRITE_FR_READ;
pub const NVME_ACCESS_FREQUENCY_ONE_TIME_READ = NVME_ACCESS_FREQUENCIES.ONE_TIME_READ;
pub const NVME_ACCESS_FREQUENCY_SPECULATIVE_READ = NVME_ACCESS_FREQUENCIES.SPECULATIVE_READ;
pub const NVME_ACCESS_FREQUENCY_WILL_BE_OVERWRITTEN = NVME_ACCESS_FREQUENCIES.WILL_BE_OVERWRITTEN;

pub const NVME_ACCESS_LATENCIES = enum(i32) {
    NONE = 0,
    IDLE = 1,
    NORMAL = 2,
    LOW = 3,
};
pub const NVME_ACCESS_LATENCY_NONE = NVME_ACCESS_LATENCIES.NONE;
pub const NVME_ACCESS_LATENCY_IDLE = NVME_ACCESS_LATENCIES.IDLE;
pub const NVME_ACCESS_LATENCY_NORMAL = NVME_ACCESS_LATENCIES.NORMAL;
pub const NVME_ACCESS_LATENCY_LOW = NVME_ACCESS_LATENCIES.LOW;

pub const NVME_CDW13_READ_WRITE = extern union {
    Anonymous: extern struct {
        DSM: extern struct {
            _bitfield: u8,
        },
        Reserved: u8,
        DSPEC: u16,
    },
    AsUlong: u32,
};

pub const NVME_CDW15_READ_WRITE = extern union {
    Anonymous: extern struct {
        _bitfield: u32,
    },
    AsUlong: u32,
};

pub const NVME_CONTEXT_ATTRIBUTES = extern union {
    Anonymous: extern struct {
        _bitfield: u32,
    },
    AsUlong: u32,
};

pub const NVME_LBA_RANGE = extern struct {
    Attributes: NVME_CONTEXT_ATTRIBUTES,
    LogicalBlockCount: u32,
    StartingLBA: u64,
};

pub const NVME_CDW10_DATASET_MANAGEMENT = extern union {
    Anonymous: extern struct {
        _bitfield: u32,
    },
    AsUlong: u32,
};

pub const NVME_CDW11_DATASET_MANAGEMENT = extern union {
    Anonymous: extern struct {
        _bitfield: u32,
    },
    AsUlong: u32,
};

pub const NVME_ZONE_DESCRIPTOR = extern struct {
    Anonymous1: extern struct {
        _bitfield: u8,
    },
    Anonymous2: extern struct {
        _bitfield: u8,
    },
    ZA: extern struct {
        _bitfield: u8,
    },
    Reserved3: [5]u8,
    ZCAP: u64,
    ZSLBA: u64,
    WritePointer: u64,
    Reserved4: [32]u8,
};

pub const ZONE_STATE = enum(i32) {
    E = 1,
    IO = 2,
    EO = 3,
    C = 4,
    RO = 13,
    F = 14,
    O = 15,
};
pub const NVME_STATE_ZSE = ZONE_STATE.E;
pub const NVME_STATE_ZSIO = ZONE_STATE.IO;
pub const NVME_STATE_ZSEO = ZONE_STATE.EO;
pub const NVME_STATE_ZSC = ZONE_STATE.C;
pub const NVME_STATE_ZSRO = ZONE_STATE.RO;
pub const NVME_STATE_ZSF = ZONE_STATE.F;
pub const NVME_STATE_ZSO = ZONE_STATE.O;

pub const NVME_ZONE_SEND_ACTION = enum(i32) {
    CLOSE = 1,
    FINISH = 2,
    OPEN = 3,
    RESET = 4,
    OFFLINE = 5,
    SET_ZONE_DESCRIPTOR = 16,
};
pub const NVME_ZONE_SEND_CLOSE = NVME_ZONE_SEND_ACTION.CLOSE;
pub const NVME_ZONE_SEND_FINISH = NVME_ZONE_SEND_ACTION.FINISH;
pub const NVME_ZONE_SEND_OPEN = NVME_ZONE_SEND_ACTION.OPEN;
pub const NVME_ZONE_SEND_RESET = NVME_ZONE_SEND_ACTION.RESET;
pub const NVME_ZONE_SEND_OFFLINE = NVME_ZONE_SEND_ACTION.OFFLINE;
pub const NVME_ZONE_SEND_SET_ZONE_DESCRIPTOR = NVME_ZONE_SEND_ACTION.SET_ZONE_DESCRIPTOR;

pub const NVME_CDW10_ZONE_MANAGEMENT_SEND = extern struct {
    SLBA: u64,
};

pub const NVME_CDW13_ZONE_MANAGEMENT_SEND = extern union {
    Anonymous: extern struct {
        _bitfield: u32,
    },
    AsUlong: u32,
};

pub const NVME_REPORT_ZONE_INFO = extern struct {
    ZoneCount: u64,
    Reserved: [7]u64,
    ZoneDescriptor: [1]NVME_ZONE_DESCRIPTOR,
};

pub const NVME_ZONE_DESCRIPTOR_EXTENSION = extern struct {
    ZoneDescriptorExtensionInfo: [64]u8,
};

pub const NVME_ZONE_EXTENDED_REPORT_ZONE_DESC = extern struct {
    ZoneDescriptor: NVME_ZONE_DESCRIPTOR,
    ZoneDescriptorExtension: [1]NVME_ZONE_DESCRIPTOR_EXTENSION,
};

pub const NVME_EXTENDED_REPORT_ZONE_INFO = extern struct {
    ZoneCount: u64,
    Reserved: [7]u64,
    Desc: [1]NVME_ZONE_EXTENDED_REPORT_ZONE_DESC,
};

pub const NVME_ZONE_RECEIVE_ACTION = enum(i32) {
    REPORT_ZONES = 0,
    EXTENDED_REPORT_ZONES = 1,
};
pub const NVME_ZONE_RECEIVE_REPORT_ZONES = NVME_ZONE_RECEIVE_ACTION.REPORT_ZONES;
pub const NVME_ZONE_RECEIVE_EXTENDED_REPORT_ZONES = NVME_ZONE_RECEIVE_ACTION.EXTENDED_REPORT_ZONES;

pub const NVME_ZONE_RECEIVE_ACTION_SPECIFIC = enum(i32) {
    ALL_ZONES = 0,
    EMPTY_STATE_ZONES = 1,
    IO_STATE_ZONES = 2,
    EO_STATE_ZONES = 3,
    CLOSED_STATE_ZONES = 4,
    FULL_STATE_ZONES = 5,
    RO_STATE_ZONES = 6,
    OFFLINE_STATE_ZONES = 7,
};
pub const NVME_ZRA_ALL_ZONES = NVME_ZONE_RECEIVE_ACTION_SPECIFIC.ALL_ZONES;
pub const NVME_ZRA_EMPTY_STATE_ZONES = NVME_ZONE_RECEIVE_ACTION_SPECIFIC.EMPTY_STATE_ZONES;
pub const NVME_ZRA_IO_STATE_ZONES = NVME_ZONE_RECEIVE_ACTION_SPECIFIC.IO_STATE_ZONES;
pub const NVME_ZRA_EO_STATE_ZONES = NVME_ZONE_RECEIVE_ACTION_SPECIFIC.EO_STATE_ZONES;
pub const NVME_ZRA_CLOSED_STATE_ZONES = NVME_ZONE_RECEIVE_ACTION_SPECIFIC.CLOSED_STATE_ZONES;
pub const NVME_ZRA_FULL_STATE_ZONES = NVME_ZONE_RECEIVE_ACTION_SPECIFIC.FULL_STATE_ZONES;
pub const NVME_ZRA_RO_STATE_ZONES = NVME_ZONE_RECEIVE_ACTION_SPECIFIC.RO_STATE_ZONES;
pub const NVME_ZRA_OFFLINE_STATE_ZONES = NVME_ZONE_RECEIVE_ACTION_SPECIFIC.OFFLINE_STATE_ZONES;

pub const NVME_CDW10_ZONE_MANAGEMENT_RECEIVE = extern struct {
    SLBA: u64,
};

pub const NVME_CDW13_ZONE_MANAGEMENT_RECEIVE = extern union {
    Anonymous: extern struct {
        _bitfield: u32,
    },
    AsUlong: u32,
};

pub const NVME_CDW10_ZONE_APPEND = extern struct {
    SLBA: u64,
};

pub const NVME_CDW12_ZONE_APPEND = extern union {
    Anonymous: extern struct {
        _bitfield: u32,
    },
    AsUlong: u32,
};

pub const NVME_CDW15_ZONE_APPEND = extern union {
    Anonymous: extern struct {
        _bitfield: u32,
    },
    AsUlong: u32,
};

pub const NVME_COMMAND_DWORD0 = extern union {
    Anonymous: extern struct {
        _bitfield: u32,
    },
    AsUlong: u32,
};

pub const NVME_FUSED_OPERATION_CODES = enum(i32) {
    NORMAL = 0,
    FIRST_CMD = 1,
    SECOND_CMD = 2,
};
pub const NVME_FUSED_OPERATION_NORMAL = NVME_FUSED_OPERATION_CODES.NORMAL;
pub const NVME_FUSED_OPERATION_FIRST_CMD = NVME_FUSED_OPERATION_CODES.FIRST_CMD;
pub const NVME_FUSED_OPERATION_SECOND_CMD = NVME_FUSED_OPERATION_CODES.SECOND_CMD;

pub const NVME_PRP_ENTRY = extern union {
    Anonymous: extern struct {
        _bitfield: u64,
    },
    AsUlonglong: u64,
};

pub const NVME_COMMAND = extern struct {
    CDW0: NVME_COMMAND_DWORD0,
    NSID: u32,
    Reserved0: [2]u32,
    MPTR: u64,
    PRP1: u64,
    PRP2: u64,
    u: extern union {
        GENERAL: extern struct {
            CDW10: u32,
            CDW11: u32,
            CDW12: u32,
            CDW13: u32,
            CDW14: u32,
            CDW15: u32,
        },
        IDENTIFY: extern struct {
            CDW10: NVME_CDW10_IDENTIFY,
            CDW11: NVME_CDW11_IDENTIFY,
            CDW12: u32,
            CDW13: u32,
            CDW14: u32,
            CDW15: u32,
        },
        ABORT: extern struct {
            CDW10: NVME_CDW10_ABORT,
            CDW11: u32,
            CDW12: u32,
            CDW13: u32,
            CDW14: u32,
            CDW15: u32,
        },
        GETFEATURES: extern struct {
            CDW10: NVME_CDW10_GET_FEATURES,
            CDW11: NVME_CDW11_FEATURES,
            CDW12: u32,
            CDW13: u32,
            CDW14: u32,
            CDW15: u32,
        },
        SETFEATURES: extern struct {
            CDW10: NVME_CDW10_SET_FEATURES,
            CDW11: NVME_CDW11_FEATURES,
            CDW12: NVME_CDW12_FEATURES,
            CDW13: NVME_CDW13_FEATURES,
            CDW14: NVME_CDW14_FEATURES,
            CDW15: NVME_CDW15_FEATURES,
        },
        GETLOGPAGE: extern struct {
            Anonymous: extern union {
                CDW10: NVME_CDW10_GET_LOG_PAGE,
                CDW10_V13: NVME_CDW10_GET_LOG_PAGE_V13,
            },
            CDW11: NVME_CDW11_GET_LOG_PAGE,
            CDW12: NVME_CDW12_GET_LOG_PAGE,
            CDW13: NVME_CDW13_GET_LOG_PAGE,
            CDW14: NVME_CDW14_GET_LOG_PAGE,
            CDW15: u32,
        },
        CREATEIOCQ: extern struct {
            CDW10: NVME_CDW10_CREATE_IO_QUEUE,
            CDW11: NVME_CDW11_CREATE_IO_CQ,
            CDW12: u32,
            CDW13: u32,
            CDW14: u32,
            CDW15: u32,
        },
        CREATEIOSQ: extern struct {
            CDW10: NVME_CDW10_CREATE_IO_QUEUE,
            CDW11: NVME_CDW11_CREATE_IO_SQ,
            CDW12: u32,
            CDW13: u32,
            CDW14: u32,
            CDW15: u32,
        },
        DATASETMANAGEMENT: extern struct {
            CDW10: NVME_CDW10_DATASET_MANAGEMENT,
            CDW11: NVME_CDW11_DATASET_MANAGEMENT,
            CDW12: u32,
            CDW13: u32,
            CDW14: u32,
            CDW15: u32,
        },
        SECURITYSEND: extern struct {
            CDW10: NVME_CDW10_SECURITY_SEND_RECEIVE,
            CDW11: NVME_CDW11_SECURITY_SEND,
            CDW12: u32,
            CDW13: u32,
            CDW14: u32,
            CDW15: u32,
        },
        SECURITYRECEIVE: extern struct {
            CDW10: NVME_CDW10_SECURITY_SEND_RECEIVE,
            CDW11: NVME_CDW11_SECURITY_RECEIVE,
            CDW12: u32,
            CDW13: u32,
            CDW14: u32,
            CDW15: u32,
        },
        FIRMWAREDOWNLOAD: extern struct {
            CDW10: NVME_CDW10_FIRMWARE_DOWNLOAD,
            CDW11: NVME_CDW11_FIRMWARE_DOWNLOAD,
            CDW12: u32,
            CDW13: u32,
            CDW14: u32,
            CDW15: u32,
        },
        FIRMWAREACTIVATE: extern struct {
            CDW10: NVME_CDW10_FIRMWARE_ACTIVATE,
            CDW11: u32,
            CDW12: u32,
            CDW13: u32,
            CDW14: u32,
            CDW15: u32,
        },
        FORMATNVM: extern struct {
            CDW10: NVME_CDW10_FORMAT_NVM,
            CDW11: u32,
            CDW12: u32,
            CDW13: u32,
            CDW14: u32,
            CDW15: u32,
        },
        DIRECTIVERECEIVE: extern struct {
            CDW10: NVME_CDW10_DIRECTIVE_RECEIVE,
            CDW11: NVME_CDW11_DIRECTIVE_RECEIVE,
            CDW12: NVME_CDW12_DIRECTIVE_RECEIVE,
            CDW13: u32,
            CDW14: u32,
            CDW15: u32,
        },
        DIRECTIVESEND: extern struct {
            CDW10: NVME_CDW10_DIRECTIVE_SEND,
            CDW11: NVME_CDW11_DIRECTIVE_SEND,
            CDW12: NVME_CDW12_DIRECTIVE_SEND,
            CDW13: u32,
            CDW14: u32,
            CDW15: u32,
        },
        SANITIZE: extern struct {
            CDW10: NVME_CDW10_SANITIZE,
            CDW11: NVME_CDW11_SANITIZE,
            CDW12: u32,
            CDW13: u32,
            CDW14: u32,
            CDW15: u32,
        },
        READWRITE: extern struct {
            LBALOW: u32,
            LBAHIGH: u32,
            CDW12: NVME_CDW12_READ_WRITE,
            CDW13: NVME_CDW13_READ_WRITE,
            CDW14: u32,
            CDW15: NVME_CDW15_READ_WRITE,
        },
        RESERVATIONACQUIRE: extern struct {
            CDW10: NVME_CDW10_RESERVATION_ACQUIRE,
            CDW11: u32,
            CDW12: u32,
            CDW13: u32,
            CDW14: u32,
            CDW15: u32,
        },
        RESERVATIONREGISTER: extern struct {
            CDW10: NVME_CDW10_RESERVATION_REGISTER,
            CDW11: u32,
            CDW12: u32,
            CDW13: u32,
            CDW14: u32,
            CDW15: u32,
        },
        RESERVATIONRELEASE: extern struct {
            CDW10: NVME_CDW10_RESERVATION_RELEASE,
            CDW11: u32,
            CDW12: u32,
            CDW13: u32,
            CDW14: u32,
            CDW15: u32,
        },
        RESERVATIONREPORT: extern struct {
            CDW10: NVME_CDW10_RESERVATION_REPORT,
            CDW11: NVME_CDW11_RESERVATION_REPORT,
            CDW12: u32,
            CDW13: u32,
            CDW14: u32,
            CDW15: u32,
        },
        ZONEMANAGEMENTSEND: extern struct {
            CDW1011: NVME_CDW10_ZONE_MANAGEMENT_SEND,
            CDW12: u32,
            CDW13: NVME_CDW13_ZONE_MANAGEMENT_SEND,
            CDW14: u32,
            CDW15: u32,
        },
        ZONEMANAGEMENTRECEIVE: extern struct {
            CDW1011: NVME_CDW10_ZONE_MANAGEMENT_RECEIVE,
            DWORDCOUNT: u32,
            CDW13: NVME_CDW13_ZONE_MANAGEMENT_RECEIVE,
            CDW14: u32,
            CDW15: u32,
        },
        ZONEAPPEND: extern struct {
            CDW1011: NVME_CDW10_ZONE_APPEND,
            CDW12: NVME_CDW12_ZONE_APPEND,
            CDW13: u32,
            ILBRT: u32,
            CDW15: NVME_CDW15_ZONE_APPEND,
        },
    },
};

pub const NVME_SCSI_NAME_STRING = extern struct {
    PCIVendorID: [4]CHAR,
    ModelNumber: [40]CHAR,
    NamespaceID: [4]CHAR,
    SerialNumber: [20]CHAR,
};


//--------------------------------------------------------------------------------
// Section: Functions (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("../../../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    .unspecified => if (@import("builtin").is_test) struct {
    } else struct {
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (2)
//--------------------------------------------------------------------------------
const Guid = @import("../../../zig.zig").Guid;
const CHAR = @import("../../../windows/win32/foundation.zig").CHAR;

test {
    @setEvalBranchQuota(
        comptime @import("std").meta.declarations(@This()).len * 3
    );

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
