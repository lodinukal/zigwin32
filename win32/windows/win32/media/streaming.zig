//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (16)
//--------------------------------------------------------------------------------
pub const DEVPKEY_Device_PacketWakeSupported = DEVPROPKEY { .fmtid = Guid.initIntString("2293053915, 3340, 19000, 132, 53, 64, 67, 130, 107, 92, 145"), .pid = 0 };
pub const DEVPKEY_Device_SendPacketWakeSupported = DEVPROPKEY { .fmtid = Guid.initIntString("2293053915, 3340, 19000, 132, 53, 64, 67, 130, 107, 92, 145"), .pid = 1 };
pub const DEVPKEY_Device_UDN = DEVPROPKEY { .fmtid = Guid.initIntString("2293053915, 3340, 19000, 132, 53, 64, 67, 130, 107, 92, 145"), .pid = 6 };
pub const DEVPKEY_Device_SupportsAudio = DEVPROPKEY { .fmtid = Guid.initIntString("2293053915, 3340, 19000, 132, 53, 64, 67, 130, 107, 92, 145"), .pid = 8 };
pub const DEVPKEY_Device_SupportsVideo = DEVPROPKEY { .fmtid = Guid.initIntString("2293053915, 3340, 19000, 132, 53, 64, 67, 130, 107, 92, 145"), .pid = 9 };
pub const DEVPKEY_Device_SupportsImages = DEVPROPKEY { .fmtid = Guid.initIntString("2293053915, 3340, 19000, 132, 53, 64, 67, 130, 107, 92, 145"), .pid = 10 };
pub const DEVPKEY_Device_SinkProtocolInfo = DEVPROPKEY { .fmtid = Guid.initIntString("2293053915, 3340, 19000, 132, 53, 64, 67, 130, 107, 92, 145"), .pid = 14 };
pub const DEVPKEY_Device_DLNADOC = DEVPROPKEY { .fmtid = Guid.initIntString("2293053915, 3340, 19000, 132, 53, 64, 67, 130, 107, 92, 145"), .pid = 15 };
pub const DEVPKEY_Device_DLNACAP = DEVPROPKEY { .fmtid = Guid.initIntString("2293053915, 3340, 19000, 132, 53, 64, 67, 130, 107, 92, 145"), .pid = 16 };
pub const DEVPKEY_Device_SupportsSearch = DEVPROPKEY { .fmtid = Guid.initIntString("2293053915, 3340, 19000, 132, 53, 64, 67, 130, 107, 92, 145"), .pid = 17 };
pub const DEVPKEY_Device_SupportsMute = DEVPROPKEY { .fmtid = Guid.initIntString("2293053915, 3340, 19000, 132, 53, 64, 67, 130, 107, 92, 145"), .pid = 18 };
pub const DEVPKEY_Device_MaxVolume = DEVPROPKEY { .fmtid = Guid.initIntString("2293053915, 3340, 19000, 132, 53, 64, 67, 130, 107, 92, 145"), .pid = 19 };
pub const DEVPKEY_Device_SupportsSetNextAVT = DEVPROPKEY { .fmtid = Guid.initIntString("2293053915, 3340, 19000, 132, 53, 64, 67, 130, 107, 92, 145"), .pid = 20 };
pub const GUID_DEVINTERFACE_DMR = Guid.initString("d0875fb4-2196-4c7a-a63d-e416addd60a1");
pub const GUID_DEVINTERFACE_DMP = Guid.initString("25b4e268-2a05-496e-803b-266837fbda4b");
pub const GUID_DEVINTERFACE_DMS = Guid.initString("c96037ae-a558-4470-b432-115a31b85553");

//--------------------------------------------------------------------------------
// Section: Types (14)
//--------------------------------------------------------------------------------
pub const MF_TRANSFER_VIDEO_FRAME_FLAGS = enum(i32) {
    DEFAULT = 0,
    STRETCH = 1,
    IGNORE_PAR = 2,
};
pub const MF_TRANSFER_VIDEO_FRAME_DEFAULT = MF_TRANSFER_VIDEO_FRAME_FLAGS.DEFAULT;
pub const MF_TRANSFER_VIDEO_FRAME_STRETCH = MF_TRANSFER_VIDEO_FRAME_FLAGS.STRETCH;
pub const MF_TRANSFER_VIDEO_FRAME_IGNORE_PAR = MF_TRANSFER_VIDEO_FRAME_FLAGS.IGNORE_PAR;

pub const MF_MEDIASOURCE_STATUS_INFO = enum(i32) {
    FULLYSUPPORTED = 0,
    UNKNOWN = 1,
};
pub const MF_MEDIASOURCE_STATUS_INFO_FULLYSUPPORTED = MF_MEDIASOURCE_STATUS_INFO.FULLYSUPPORTED;
pub const MF_MEDIASOURCE_STATUS_INFO_UNKNOWN = MF_MEDIASOURCE_STATUS_INFO.UNKNOWN;

pub const FaceRectInfoBlobHeader = extern struct {
    Size: u32,
    Count: u32,
};

pub const FaceRectInfo = extern struct {
    Region: RECT,
    confidenceLevel: i32,
};

pub const FaceCharacterizationBlobHeader = extern struct {
    Size: u32,
    Count: u32,
};

pub const FaceCharacterization = extern struct {
    BlinkScoreLeft: u32,
    BlinkScoreRight: u32,
    FacialExpression: u32,
    FacialExpressionScore: u32,
};

pub const CapturedMetadataExposureCompensation = extern struct {
    Flags: u64,
    Value: i32,
};

pub const CapturedMetadataISOGains = extern struct {
    AnalogGain: f32,
    DigitalGain: f32,
};

pub const CapturedMetadataWhiteBalanceGains = extern struct {
    R: f32,
    G: f32,
    B: f32,
};

pub const MetadataTimeStamps = extern struct {
    Flags: u32,
    Device: i64,
    Presentation: i64,
};

pub const HistogramGrid = extern struct {
    Width: u32,
    Height: u32,
    Region: RECT,
};

pub const HistogramBlobHeader = extern struct {
    Size: u32,
    Histograms: u32,
};

pub const HistogramHeader = extern struct {
    Size: u32,
    Bins: u32,
    FourCC: u32,
    ChannelMasks: u32,
    Grid: HistogramGrid,
};

pub const HistogramDataHeader = extern struct {
    Size: u32,
    ChannelMask: u32,
    Linear: u32,
};


//--------------------------------------------------------------------------------
// Section: Functions (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("../../../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    .unspecified => if (@import("builtin").is_test) struct {
    } else struct {
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (3)
//--------------------------------------------------------------------------------
const Guid = @import("../../../zig.zig").Guid;
const DEVPROPKEY = @import("../../../windows/win32/devices/properties.zig").DEVPROPKEY;
const RECT = @import("../../../windows/win32/foundation.zig").RECT;

test {
    @setEvalBranchQuota(
        comptime @import("std").meta.declarations(@This()).len * 3
    );

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
