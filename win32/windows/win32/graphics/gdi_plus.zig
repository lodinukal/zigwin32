//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (303)
//--------------------------------------------------------------------------------
pub const GDIP_EMFPLUS_RECORD_BASE = @as(u32, 16384);
pub const GDIP_WMF_RECORD_BASE = @as(u32, 65536);
pub const ImageFormatUndefined = Guid.initString("b96b3ca9-0728-11d3-9d7b-0000f81ef32e");
pub const ImageFormatMemoryBMP = Guid.initString("b96b3caa-0728-11d3-9d7b-0000f81ef32e");
pub const ImageFormatBMP = Guid.initString("b96b3cab-0728-11d3-9d7b-0000f81ef32e");
pub const ImageFormatEMF = Guid.initString("b96b3cac-0728-11d3-9d7b-0000f81ef32e");
pub const ImageFormatWMF = Guid.initString("b96b3cad-0728-11d3-9d7b-0000f81ef32e");
pub const ImageFormatJPEG = Guid.initString("b96b3cae-0728-11d3-9d7b-0000f81ef32e");
pub const ImageFormatPNG = Guid.initString("b96b3caf-0728-11d3-9d7b-0000f81ef32e");
pub const ImageFormatGIF = Guid.initString("b96b3cb0-0728-11d3-9d7b-0000f81ef32e");
pub const ImageFormatTIFF = Guid.initString("b96b3cb1-0728-11d3-9d7b-0000f81ef32e");
pub const ImageFormatEXIF = Guid.initString("b96b3cb2-0728-11d3-9d7b-0000f81ef32e");
pub const ImageFormatIcon = Guid.initString("b96b3cb5-0728-11d3-9d7b-0000f81ef32e");
pub const ImageFormatHEIF = Guid.initString("b96b3cb6-0728-11d3-9d7b-0000f81ef32e");
pub const ImageFormatWEBP = Guid.initString("b96b3cb7-0728-11d3-9d7b-0000f81ef32e");
pub const FrameDimensionTime = Guid.initString("6aedbd6d-3fb5-418a-83a6-7f45229dc872");
pub const FrameDimensionResolution = Guid.initString("84236f7b-3bd3-428f-8dab-4ea1439ca315");
pub const FrameDimensionPage = Guid.initString("7462dc86-6180-4c7e-8e3f-ee7333a7a483");
pub const FormatIDImageInformation = Guid.initString("e5836cbe-5eef-4f1d-acde-ae4c43b608ce");
pub const FormatIDJpegAppHeaders = Guid.initString("1c4afdcd-6177-43cf-abc7-5f51af39ee85");
pub const EncoderCompression = Guid.initString("e09d739d-ccd4-44ee-8eba-3fbf8be4fc58");
pub const EncoderColorDepth = Guid.initString("66087055-ad66-4c7c-9a18-38a2310b8337");
pub const EncoderScanMethod = Guid.initString("3a4e2661-3109-4e56-8536-42c156e7dcfa");
pub const EncoderVersion = Guid.initString("24d18c76-814a-41a4-bf53-1c219cccf797");
pub const EncoderRenderMethod = Guid.initString("6d42c53a-229a-4825-8bb7-5c99e2b9a8b8");
pub const EncoderQuality = Guid.initString("1d5be4b5-fa4a-452d-9cdd-5db35105e7eb");
pub const EncoderTransformation = Guid.initString("8d0eb2d1-a58e-4ea8-aa14-108074b7b6f9");
pub const EncoderLuminanceTable = Guid.initString("edb33bce-0266-4a77-b904-27216099e717");
pub const EncoderChrominanceTable = Guid.initString("f2e455dc-09b3-4316-8260-676ada32481c");
pub const EncoderSaveFlag = Guid.initString("292266fc-ac40-47bf-8cfc-a85b89a655de");
pub const EncoderColorSpace = Guid.initString("ae7a62a0-ee2c-49d8-9d07-1ba8a927596e");
pub const EncoderImageItems = Guid.initString("63875e13-1f1d-45ab-9195-a29b6066a650");
pub const EncoderSaveAsCMYK = Guid.initString("a219bbc9-0a9d-4005-a3ee-3a421b8bb06c");
pub const CodecIImageBytes = Guid.initString("025d1823-6c7d-447b-bbdb-a3cbc3dfa2fc");
pub const PropertyTagTypeByte = @as(u32, 1);
pub const PropertyTagTypeASCII = @as(u32, 2);
pub const PropertyTagTypeShort = @as(u32, 3);
pub const PropertyTagTypeLong = @as(u32, 4);
pub const PropertyTagTypeRational = @as(u32, 5);
pub const PropertyTagTypeUndefined = @as(u32, 7);
pub const PropertyTagTypeSLONG = @as(u32, 9);
pub const PropertyTagTypeSRational = @as(u32, 10);
pub const PropertyTagExifIFD = @as(u32, 34665);
pub const PropertyTagGpsIFD = @as(u32, 34853);
pub const PropertyTagNewSubfileType = @as(u32, 254);
pub const PropertyTagSubfileType = @as(u32, 255);
pub const PropertyTagImageWidth = @as(u32, 256);
pub const PropertyTagImageHeight = @as(u32, 257);
pub const PropertyTagBitsPerSample = @as(u32, 258);
pub const PropertyTagCompression = @as(u32, 259);
pub const PropertyTagPhotometricInterp = @as(u32, 262);
pub const PropertyTagThreshHolding = @as(u32, 263);
pub const PropertyTagCellWidth = @as(u32, 264);
pub const PropertyTagCellHeight = @as(u32, 265);
pub const PropertyTagFillOrder = @as(u32, 266);
pub const PropertyTagDocumentName = @as(u32, 269);
pub const PropertyTagImageDescription = @as(u32, 270);
pub const PropertyTagEquipMake = @as(u32, 271);
pub const PropertyTagEquipModel = @as(u32, 272);
pub const PropertyTagStripOffsets = @as(u32, 273);
pub const PropertyTagOrientation = @as(u32, 274);
pub const PropertyTagSamplesPerPixel = @as(u32, 277);
pub const PropertyTagRowsPerStrip = @as(u32, 278);
pub const PropertyTagStripBytesCount = @as(u32, 279);
pub const PropertyTagMinSampleValue = @as(u32, 280);
pub const PropertyTagMaxSampleValue = @as(u32, 281);
pub const PropertyTagXResolution = @as(u32, 282);
pub const PropertyTagYResolution = @as(u32, 283);
pub const PropertyTagPlanarConfig = @as(u32, 284);
pub const PropertyTagPageName = @as(u32, 285);
pub const PropertyTagXPosition = @as(u32, 286);
pub const PropertyTagYPosition = @as(u32, 287);
pub const PropertyTagFreeOffset = @as(u32, 288);
pub const PropertyTagFreeByteCounts = @as(u32, 289);
pub const PropertyTagGrayResponseUnit = @as(u32, 290);
pub const PropertyTagGrayResponseCurve = @as(u32, 291);
pub const PropertyTagT4Option = @as(u32, 292);
pub const PropertyTagT6Option = @as(u32, 293);
pub const PropertyTagResolutionUnit = @as(u32, 296);
pub const PropertyTagPageNumber = @as(u32, 297);
pub const PropertyTagTransferFuncition = @as(u32, 301);
pub const PropertyTagSoftwareUsed = @as(u32, 305);
pub const PropertyTagDateTime = @as(u32, 306);
pub const PropertyTagArtist = @as(u32, 315);
pub const PropertyTagHostComputer = @as(u32, 316);
pub const PropertyTagPredictor = @as(u32, 317);
pub const PropertyTagWhitePoint = @as(u32, 318);
pub const PropertyTagPrimaryChromaticities = @as(u32, 319);
pub const PropertyTagColorMap = @as(u32, 320);
pub const PropertyTagHalftoneHints = @as(u32, 321);
pub const PropertyTagTileWidth = @as(u32, 322);
pub const PropertyTagTileLength = @as(u32, 323);
pub const PropertyTagTileOffset = @as(u32, 324);
pub const PropertyTagTileByteCounts = @as(u32, 325);
pub const PropertyTagInkSet = @as(u32, 332);
pub const PropertyTagInkNames = @as(u32, 333);
pub const PropertyTagNumberOfInks = @as(u32, 334);
pub const PropertyTagDotRange = @as(u32, 336);
pub const PropertyTagTargetPrinter = @as(u32, 337);
pub const PropertyTagExtraSamples = @as(u32, 338);
pub const PropertyTagSampleFormat = @as(u32, 339);
pub const PropertyTagSMinSampleValue = @as(u32, 340);
pub const PropertyTagSMaxSampleValue = @as(u32, 341);
pub const PropertyTagTransferRange = @as(u32, 342);
pub const PropertyTagJPEGProc = @as(u32, 512);
pub const PropertyTagJPEGInterFormat = @as(u32, 513);
pub const PropertyTagJPEGInterLength = @as(u32, 514);
pub const PropertyTagJPEGRestartInterval = @as(u32, 515);
pub const PropertyTagJPEGLosslessPredictors = @as(u32, 517);
pub const PropertyTagJPEGPointTransforms = @as(u32, 518);
pub const PropertyTagJPEGQTables = @as(u32, 519);
pub const PropertyTagJPEGDCTables = @as(u32, 520);
pub const PropertyTagJPEGACTables = @as(u32, 521);
pub const PropertyTagYCbCrCoefficients = @as(u32, 529);
pub const PropertyTagYCbCrSubsampling = @as(u32, 530);
pub const PropertyTagYCbCrPositioning = @as(u32, 531);
pub const PropertyTagREFBlackWhite = @as(u32, 532);
pub const PropertyTagICCProfile = @as(u32, 34675);
pub const PropertyTagGamma = @as(u32, 769);
pub const PropertyTagICCProfileDescriptor = @as(u32, 770);
pub const PropertyTagSRGBRenderingIntent = @as(u32, 771);
pub const PropertyTagImageTitle = @as(u32, 800);
pub const PropertyTagCopyright = @as(u32, 33432);
pub const PropertyTagResolutionXUnit = @as(u32, 20481);
pub const PropertyTagResolutionYUnit = @as(u32, 20482);
pub const PropertyTagResolutionXLengthUnit = @as(u32, 20483);
pub const PropertyTagResolutionYLengthUnit = @as(u32, 20484);
pub const PropertyTagPrintFlags = @as(u32, 20485);
pub const PropertyTagPrintFlagsVersion = @as(u32, 20486);
pub const PropertyTagPrintFlagsCrop = @as(u32, 20487);
pub const PropertyTagPrintFlagsBleedWidth = @as(u32, 20488);
pub const PropertyTagPrintFlagsBleedWidthScale = @as(u32, 20489);
pub const PropertyTagHalftoneLPI = @as(u32, 20490);
pub const PropertyTagHalftoneLPIUnit = @as(u32, 20491);
pub const PropertyTagHalftoneDegree = @as(u32, 20492);
pub const PropertyTagHalftoneShape = @as(u32, 20493);
pub const PropertyTagHalftoneMisc = @as(u32, 20494);
pub const PropertyTagHalftoneScreen = @as(u32, 20495);
pub const PropertyTagJPEGQuality = @as(u32, 20496);
pub const PropertyTagGridSize = @as(u32, 20497);
pub const PropertyTagThumbnailFormat = @as(u32, 20498);
pub const PropertyTagThumbnailWidth = @as(u32, 20499);
pub const PropertyTagThumbnailHeight = @as(u32, 20500);
pub const PropertyTagThumbnailColorDepth = @as(u32, 20501);
pub const PropertyTagThumbnailPlanes = @as(u32, 20502);
pub const PropertyTagThumbnailRawBytes = @as(u32, 20503);
pub const PropertyTagThumbnailSize = @as(u32, 20504);
pub const PropertyTagThumbnailCompressedSize = @as(u32, 20505);
pub const PropertyTagColorTransferFunction = @as(u32, 20506);
pub const PropertyTagThumbnailData = @as(u32, 20507);
pub const PropertyTagThumbnailImageWidth = @as(u32, 20512);
pub const PropertyTagThumbnailImageHeight = @as(u32, 20513);
pub const PropertyTagThumbnailBitsPerSample = @as(u32, 20514);
pub const PropertyTagThumbnailCompression = @as(u32, 20515);
pub const PropertyTagThumbnailPhotometricInterp = @as(u32, 20516);
pub const PropertyTagThumbnailImageDescription = @as(u32, 20517);
pub const PropertyTagThumbnailEquipMake = @as(u32, 20518);
pub const PropertyTagThumbnailEquipModel = @as(u32, 20519);
pub const PropertyTagThumbnailStripOffsets = @as(u32, 20520);
pub const PropertyTagThumbnailOrientation = @as(u32, 20521);
pub const PropertyTagThumbnailSamplesPerPixel = @as(u32, 20522);
pub const PropertyTagThumbnailRowsPerStrip = @as(u32, 20523);
pub const PropertyTagThumbnailStripBytesCount = @as(u32, 20524);
pub const PropertyTagThumbnailResolutionX = @as(u32, 20525);
pub const PropertyTagThumbnailResolutionY = @as(u32, 20526);
pub const PropertyTagThumbnailPlanarConfig = @as(u32, 20527);
pub const PropertyTagThumbnailResolutionUnit = @as(u32, 20528);
pub const PropertyTagThumbnailTransferFunction = @as(u32, 20529);
pub const PropertyTagThumbnailSoftwareUsed = @as(u32, 20530);
pub const PropertyTagThumbnailDateTime = @as(u32, 20531);
pub const PropertyTagThumbnailArtist = @as(u32, 20532);
pub const PropertyTagThumbnailWhitePoint = @as(u32, 20533);
pub const PropertyTagThumbnailPrimaryChromaticities = @as(u32, 20534);
pub const PropertyTagThumbnailYCbCrCoefficients = @as(u32, 20535);
pub const PropertyTagThumbnailYCbCrSubsampling = @as(u32, 20536);
pub const PropertyTagThumbnailYCbCrPositioning = @as(u32, 20537);
pub const PropertyTagThumbnailRefBlackWhite = @as(u32, 20538);
pub const PropertyTagThumbnailCopyRight = @as(u32, 20539);
pub const PropertyTagLuminanceTable = @as(u32, 20624);
pub const PropertyTagChrominanceTable = @as(u32, 20625);
pub const PropertyTagFrameDelay = @as(u32, 20736);
pub const PropertyTagLoopCount = @as(u32, 20737);
pub const PropertyTagGlobalPalette = @as(u32, 20738);
pub const PropertyTagIndexBackground = @as(u32, 20739);
pub const PropertyTagIndexTransparent = @as(u32, 20740);
pub const PropertyTagPixelUnit = @as(u32, 20752);
pub const PropertyTagPixelPerUnitX = @as(u32, 20753);
pub const PropertyTagPixelPerUnitY = @as(u32, 20754);
pub const PropertyTagPaletteHistogram = @as(u32, 20755);
pub const PropertyTagExifExposureTime = @as(u32, 33434);
pub const PropertyTagExifFNumber = @as(u32, 33437);
pub const PropertyTagExifExposureProg = @as(u32, 34850);
pub const PropertyTagExifSpectralSense = @as(u32, 34852);
pub const PropertyTagExifISOSpeed = @as(u32, 34855);
pub const PropertyTagExifOECF = @as(u32, 34856);
pub const PropertyTagExifVer = @as(u32, 36864);
pub const PropertyTagExifDTOrig = @as(u32, 36867);
pub const PropertyTagExifDTDigitized = @as(u32, 36868);
pub const PropertyTagExifCompConfig = @as(u32, 37121);
pub const PropertyTagExifCompBPP = @as(u32, 37122);
pub const PropertyTagExifShutterSpeed = @as(u32, 37377);
pub const PropertyTagExifAperture = @as(u32, 37378);
pub const PropertyTagExifBrightness = @as(u32, 37379);
pub const PropertyTagExifExposureBias = @as(u32, 37380);
pub const PropertyTagExifMaxAperture = @as(u32, 37381);
pub const PropertyTagExifSubjectDist = @as(u32, 37382);
pub const PropertyTagExifMeteringMode = @as(u32, 37383);
pub const PropertyTagExifLightSource = @as(u32, 37384);
pub const PropertyTagExifFlash = @as(u32, 37385);
pub const PropertyTagExifFocalLength = @as(u32, 37386);
pub const PropertyTagExifSubjectArea = @as(u32, 37396);
pub const PropertyTagExifMakerNote = @as(u32, 37500);
pub const PropertyTagExifUserComment = @as(u32, 37510);
pub const PropertyTagExifDTSubsec = @as(u32, 37520);
pub const PropertyTagExifDTOrigSS = @as(u32, 37521);
pub const PropertyTagExifDTDigSS = @as(u32, 37522);
pub const PropertyTagExifFPXVer = @as(u32, 40960);
pub const PropertyTagExifColorSpace = @as(u32, 40961);
pub const PropertyTagExifPixXDim = @as(u32, 40962);
pub const PropertyTagExifPixYDim = @as(u32, 40963);
pub const PropertyTagExifRelatedWav = @as(u32, 40964);
pub const PropertyTagExifInterop = @as(u32, 40965);
pub const PropertyTagExifFlashEnergy = @as(u32, 41483);
pub const PropertyTagExifSpatialFR = @as(u32, 41484);
pub const PropertyTagExifFocalXRes = @as(u32, 41486);
pub const PropertyTagExifFocalYRes = @as(u32, 41487);
pub const PropertyTagExifFocalResUnit = @as(u32, 41488);
pub const PropertyTagExifSubjectLoc = @as(u32, 41492);
pub const PropertyTagExifExposureIndex = @as(u32, 41493);
pub const PropertyTagExifSensingMethod = @as(u32, 41495);
pub const PropertyTagExifFileSource = @as(u32, 41728);
pub const PropertyTagExifSceneType = @as(u32, 41729);
pub const PropertyTagExifCfaPattern = @as(u32, 41730);
pub const PropertyTagExifCustomRendered = @as(u32, 41985);
pub const PropertyTagExifExposureMode = @as(u32, 41986);
pub const PropertyTagExifWhiteBalance = @as(u32, 41987);
pub const PropertyTagExifDigitalZoomRatio = @as(u32, 41988);
pub const PropertyTagExifFocalLengthIn35mmFilm = @as(u32, 41989);
pub const PropertyTagExifSceneCaptureType = @as(u32, 41990);
pub const PropertyTagExifGainControl = @as(u32, 41991);
pub const PropertyTagExifContrast = @as(u32, 41992);
pub const PropertyTagExifSaturation = @as(u32, 41993);
pub const PropertyTagExifSharpness = @as(u32, 41994);
pub const PropertyTagExifDeviceSettingDesc = @as(u32, 41995);
pub const PropertyTagExifSubjectDistanceRange = @as(u32, 41996);
pub const PropertyTagExifUniqueImageID = @as(u32, 42016);
pub const PropertyTagGpsVer = @as(u32, 0);
pub const PropertyTagGpsLatitudeRef = @as(u32, 1);
pub const PropertyTagGpsLatitude = @as(u32, 2);
pub const PropertyTagGpsLongitudeRef = @as(u32, 3);
pub const PropertyTagGpsLongitude = @as(u32, 4);
pub const PropertyTagGpsAltitudeRef = @as(u32, 5);
pub const PropertyTagGpsAltitude = @as(u32, 6);
pub const PropertyTagGpsGpsTime = @as(u32, 7);
pub const PropertyTagGpsGpsSatellites = @as(u32, 8);
pub const PropertyTagGpsGpsStatus = @as(u32, 9);
pub const PropertyTagGpsGpsMeasureMode = @as(u32, 10);
pub const PropertyTagGpsGpsDop = @as(u32, 11);
pub const PropertyTagGpsSpeedRef = @as(u32, 12);
pub const PropertyTagGpsSpeed = @as(u32, 13);
pub const PropertyTagGpsTrackRef = @as(u32, 14);
pub const PropertyTagGpsTrack = @as(u32, 15);
pub const PropertyTagGpsImgDirRef = @as(u32, 16);
pub const PropertyTagGpsImgDir = @as(u32, 17);
pub const PropertyTagGpsMapDatum = @as(u32, 18);
pub const PropertyTagGpsDestLatRef = @as(u32, 19);
pub const PropertyTagGpsDestLat = @as(u32, 20);
pub const PropertyTagGpsDestLongRef = @as(u32, 21);
pub const PropertyTagGpsDestLong = @as(u32, 22);
pub const PropertyTagGpsDestBearRef = @as(u32, 23);
pub const PropertyTagGpsDestBear = @as(u32, 24);
pub const PropertyTagGpsDestDistRef = @as(u32, 25);
pub const PropertyTagGpsDestDist = @as(u32, 26);
pub const PropertyTagGpsProcessingMethod = @as(u32, 27);
pub const PropertyTagGpsAreaInformation = @as(u32, 28);
pub const PropertyTagGpsDate = @as(u32, 29);
pub const PropertyTagGpsDifferential = @as(u32, 30);
pub const GDIP_EMFPLUSFLAGS_DISPLAY = @as(u32, 1);
pub const ALPHA_SHIFT = @as(u32, 24);
pub const RED_SHIFT = @as(u32, 16);
pub const GREEN_SHIFT = @as(u32, 8);
pub const BLUE_SHIFT = @as(u32, 0);
pub const PixelFormatIndexed = @as(u32, 65536);
pub const PixelFormatGDI = @as(u32, 131072);
pub const PixelFormatAlpha = @as(u32, 262144);
pub const PixelFormatPAlpha = @as(u32, 524288);
pub const PixelFormatExtended = @as(u32, 1048576);
pub const PixelFormatCanonical = @as(u32, 2097152);
pub const PixelFormatUndefined = @as(u32, 0);
pub const PixelFormatDontCare = @as(u32, 0);
pub const PixelFormatMax = @as(u32, 16);
pub const FlatnessDefault = @as(f32, 2.5e-01);
pub const BlurEffectGuid = Guid.initString("633c80a4-1843-482b-9ef2-be2834c5fdd4");
pub const SharpenEffectGuid = Guid.initString("63cbf3ee-c526-402c-8f71-62c540bf5142");
pub const ColorMatrixEffectGuid = Guid.initString("718f2615-7933-40e3-a511-5f68fe14dd74");
pub const ColorLUTEffectGuid = Guid.initString("a7ce72a9-0f7f-40d7-b3cc-d0c02d5c3212");
pub const BrightnessContrastEffectGuid = Guid.initString("d3a1dbe1-8ec4-4c17-9f4c-ea97ad1c343d");
pub const HueSaturationLightnessEffectGuid = Guid.initString("8b2dd6c3-eb07-4d87-a5f0-7108e26a9c5f");
pub const LevelsEffectGuid = Guid.initString("99c354ec-2a31-4f3a-8c34-17a803b33a25");
pub const TintEffectGuid = Guid.initString("1077af00-2848-4441-9489-44ad4c2d7a2c");
pub const ColorBalanceEffectGuid = Guid.initString("537e597d-251e-48da-9664-29ca496b70f8");
pub const RedEyeCorrectionEffectGuid = Guid.initString("74d29d05-69a4-4266-9549-3cc52836b632");
pub const ColorCurveEffectGuid = Guid.initString("dd6a0022-58e4-4a67-9d9b-d48eb881a53d");

//--------------------------------------------------------------------------------
// Section: Types (156)
//--------------------------------------------------------------------------------
pub const PathData = isize;

pub const GpGraphics = isize;

pub const GpBrush = isize;

pub const GpTexture = isize;

pub const GpSolidFill = isize;

pub const GpLineGradient = isize;

pub const GpPathGradient = isize;

pub const GpHatch = isize;

pub const GpPen = isize;

pub const GpCustomLineCap = isize;

pub const GpAdjustableArrowCap = isize;

pub const GpImage = isize;

pub const GpBitmap = isize;

pub const GpMetafile = isize;

pub const GpImageAttributes = isize;

pub const GpPath = isize;

pub const GpRegion = isize;

pub const GpPathIterator = isize;

pub const GpFontFamily = isize;

pub const GpFont = isize;

pub const GpStringFormat = isize;

pub const GpFontCollection = isize;

pub const GpInstalledFontCollection = isize;

pub const GpPrivateFontCollection = isize;

pub const GpCachedBitmap = isize;

pub const CGpEffect = isize;

pub const Matrix = isize;

pub const Font = isize;

pub const FontCollection = isize;

pub const InstalledFontCollection = isize;

pub const PrivateFontCollection = isize;

pub const Image = isize;

pub const Bitmap = isize;

pub const CustomLineCap = isize;

pub const CachedBitmap = isize;

pub const Metafile = isize;

pub const FontFamily = isize;

pub const Region = isize;

pub const FillMode = enum(i32) {
    Alternate = 0,
    Winding = 1,
};
pub const FillModeAlternate = FillMode.Alternate;
pub const FillModeWinding = FillMode.Winding;

pub const QualityMode = enum(i32) {
    Invalid = -1,
    Default = 0,
    Low = 1,
    High = 2,
};
pub const QualityModeInvalid = QualityMode.Invalid;
pub const QualityModeDefault = QualityMode.Default;
pub const QualityModeLow = QualityMode.Low;
pub const QualityModeHigh = QualityMode.High;

pub const CompositingMode = enum(i32) {
    Over = 0,
    Copy = 1,
};
pub const CompositingModeSourceOver = CompositingMode.Over;
pub const CompositingModeSourceCopy = CompositingMode.Copy;

pub const CompositingQuality = enum(i32) {
    Invalid = -1,
    Default = 0,
    HighSpeed = 1,
    HighQuality = 2,
    GammaCorrected = 3,
    AssumeLinear = 4,
};
pub const CompositingQualityInvalid = CompositingQuality.Invalid;
pub const CompositingQualityDefault = CompositingQuality.Default;
pub const CompositingQualityHighSpeed = CompositingQuality.HighSpeed;
pub const CompositingQualityHighQuality = CompositingQuality.HighQuality;
pub const CompositingQualityGammaCorrected = CompositingQuality.GammaCorrected;
pub const CompositingQualityAssumeLinear = CompositingQuality.AssumeLinear;

pub const Unit = enum(i32) {
    World = 0,
    Display = 1,
    Pixel = 2,
    Point = 3,
    Inch = 4,
    Document = 5,
    Millimeter = 6,
};
pub const UnitWorld = Unit.World;
pub const UnitDisplay = Unit.Display;
pub const UnitPixel = Unit.Pixel;
pub const UnitPoint = Unit.Point;
pub const UnitInch = Unit.Inch;
pub const UnitDocument = Unit.Document;
pub const UnitMillimeter = Unit.Millimeter;

pub const MetafileFrameUnit = enum(i32) {
    Pixel = 2,
    Point = 3,
    Inch = 4,
    Document = 5,
    Millimeter = 6,
    Gdi = 7,
};
pub const MetafileFrameUnitPixel = MetafileFrameUnit.Pixel;
pub const MetafileFrameUnitPoint = MetafileFrameUnit.Point;
pub const MetafileFrameUnitInch = MetafileFrameUnit.Inch;
pub const MetafileFrameUnitDocument = MetafileFrameUnit.Document;
pub const MetafileFrameUnitMillimeter = MetafileFrameUnit.Millimeter;
pub const MetafileFrameUnitGdi = MetafileFrameUnit.Gdi;

pub const CoordinateSpace = enum(i32) {
    World = 0,
    Page = 1,
    Device = 2,
};
pub const CoordinateSpaceWorld = CoordinateSpace.World;
pub const CoordinateSpacePage = CoordinateSpace.Page;
pub const CoordinateSpaceDevice = CoordinateSpace.Device;

pub const WrapMode = enum(i32) {
    Tile = 0,
    TileFlipX = 1,
    TileFlipY = 2,
    TileFlipXY = 3,
    Clamp = 4,
};
pub const WrapModeTile = WrapMode.Tile;
pub const WrapModeTileFlipX = WrapMode.TileFlipX;
pub const WrapModeTileFlipY = WrapMode.TileFlipY;
pub const WrapModeTileFlipXY = WrapMode.TileFlipXY;
pub const WrapModeClamp = WrapMode.Clamp;

pub const HatchStyle = enum(i32) {
    Horizontal = 0,
    Vertical = 1,
    ForwardDiagonal = 2,
    BackwardDiagonal = 3,
    Cross = 4,
    DiagonalCross = 5,
    @"05Percent" = 6,
    @"10Percent" = 7,
    @"20Percent" = 8,
    @"25Percent" = 9,
    @"30Percent" = 10,
    @"40Percent" = 11,
    @"50Percent" = 12,
    @"60Percent" = 13,
    @"70Percent" = 14,
    @"75Percent" = 15,
    @"80Percent" = 16,
    @"90Percent" = 17,
    LightDownwardDiagonal = 18,
    LightUpwardDiagonal = 19,
    DarkDownwardDiagonal = 20,
    DarkUpwardDiagonal = 21,
    WideDownwardDiagonal = 22,
    WideUpwardDiagonal = 23,
    LightVertical = 24,
    LightHorizontal = 25,
    NarrowVertical = 26,
    NarrowHorizontal = 27,
    DarkVertical = 28,
    DarkHorizontal = 29,
    DashedDownwardDiagonal = 30,
    DashedUpwardDiagonal = 31,
    DashedHorizontal = 32,
    DashedVertical = 33,
    SmallConfetti = 34,
    LargeConfetti = 35,
    ZigZag = 36,
    Wave = 37,
    DiagonalBrick = 38,
    HorizontalBrick = 39,
    Weave = 40,
    Plaid = 41,
    Divot = 42,
    DottedGrid = 43,
    DottedDiamond = 44,
    Shingle = 45,
    Trellis = 46,
    Sphere = 47,
    SmallGrid = 48,
    SmallCheckerBoard = 49,
    LargeCheckerBoard = 50,
    OutlinedDiamond = 51,
    SolidDiamond = 52,
    Total = 53,
    // LargeGrid = 4, this enum value conflicts with Cross
    // Min = 0, this enum value conflicts with Horizontal
    // Max = 52, this enum value conflicts with SolidDiamond
};
pub const HatchStyleHorizontal = HatchStyle.Horizontal;
pub const HatchStyleVertical = HatchStyle.Vertical;
pub const HatchStyleForwardDiagonal = HatchStyle.ForwardDiagonal;
pub const HatchStyleBackwardDiagonal = HatchStyle.BackwardDiagonal;
pub const HatchStyleCross = HatchStyle.Cross;
pub const HatchStyleDiagonalCross = HatchStyle.DiagonalCross;
pub const HatchStyle05Percent = HatchStyle.@"05Percent";
pub const HatchStyle10Percent = HatchStyle.@"10Percent";
pub const HatchStyle20Percent = HatchStyle.@"20Percent";
pub const HatchStyle25Percent = HatchStyle.@"25Percent";
pub const HatchStyle30Percent = HatchStyle.@"30Percent";
pub const HatchStyle40Percent = HatchStyle.@"40Percent";
pub const HatchStyle50Percent = HatchStyle.@"50Percent";
pub const HatchStyle60Percent = HatchStyle.@"60Percent";
pub const HatchStyle70Percent = HatchStyle.@"70Percent";
pub const HatchStyle75Percent = HatchStyle.@"75Percent";
pub const HatchStyle80Percent = HatchStyle.@"80Percent";
pub const HatchStyle90Percent = HatchStyle.@"90Percent";
pub const HatchStyleLightDownwardDiagonal = HatchStyle.LightDownwardDiagonal;
pub const HatchStyleLightUpwardDiagonal = HatchStyle.LightUpwardDiagonal;
pub const HatchStyleDarkDownwardDiagonal = HatchStyle.DarkDownwardDiagonal;
pub const HatchStyleDarkUpwardDiagonal = HatchStyle.DarkUpwardDiagonal;
pub const HatchStyleWideDownwardDiagonal = HatchStyle.WideDownwardDiagonal;
pub const HatchStyleWideUpwardDiagonal = HatchStyle.WideUpwardDiagonal;
pub const HatchStyleLightVertical = HatchStyle.LightVertical;
pub const HatchStyleLightHorizontal = HatchStyle.LightHorizontal;
pub const HatchStyleNarrowVertical = HatchStyle.NarrowVertical;
pub const HatchStyleNarrowHorizontal = HatchStyle.NarrowHorizontal;
pub const HatchStyleDarkVertical = HatchStyle.DarkVertical;
pub const HatchStyleDarkHorizontal = HatchStyle.DarkHorizontal;
pub const HatchStyleDashedDownwardDiagonal = HatchStyle.DashedDownwardDiagonal;
pub const HatchStyleDashedUpwardDiagonal = HatchStyle.DashedUpwardDiagonal;
pub const HatchStyleDashedHorizontal = HatchStyle.DashedHorizontal;
pub const HatchStyleDashedVertical = HatchStyle.DashedVertical;
pub const HatchStyleSmallConfetti = HatchStyle.SmallConfetti;
pub const HatchStyleLargeConfetti = HatchStyle.LargeConfetti;
pub const HatchStyleZigZag = HatchStyle.ZigZag;
pub const HatchStyleWave = HatchStyle.Wave;
pub const HatchStyleDiagonalBrick = HatchStyle.DiagonalBrick;
pub const HatchStyleHorizontalBrick = HatchStyle.HorizontalBrick;
pub const HatchStyleWeave = HatchStyle.Weave;
pub const HatchStylePlaid = HatchStyle.Plaid;
pub const HatchStyleDivot = HatchStyle.Divot;
pub const HatchStyleDottedGrid = HatchStyle.DottedGrid;
pub const HatchStyleDottedDiamond = HatchStyle.DottedDiamond;
pub const HatchStyleShingle = HatchStyle.Shingle;
pub const HatchStyleTrellis = HatchStyle.Trellis;
pub const HatchStyleSphere = HatchStyle.Sphere;
pub const HatchStyleSmallGrid = HatchStyle.SmallGrid;
pub const HatchStyleSmallCheckerBoard = HatchStyle.SmallCheckerBoard;
pub const HatchStyleLargeCheckerBoard = HatchStyle.LargeCheckerBoard;
pub const HatchStyleOutlinedDiamond = HatchStyle.OutlinedDiamond;
pub const HatchStyleSolidDiamond = HatchStyle.SolidDiamond;
pub const HatchStyleTotal = HatchStyle.Total;
pub const HatchStyleLargeGrid = HatchStyle.Cross;
pub const HatchStyleMin = HatchStyle.Horizontal;
pub const HatchStyleMax = HatchStyle.SolidDiamond;

pub const DashStyle = enum(i32) {
    Solid = 0,
    Dash = 1,
    Dot = 2,
    DashDot = 3,
    DashDotDot = 4,
    Custom = 5,
};
pub const DashStyleSolid = DashStyle.Solid;
pub const DashStyleDash = DashStyle.Dash;
pub const DashStyleDot = DashStyle.Dot;
pub const DashStyleDashDot = DashStyle.DashDot;
pub const DashStyleDashDotDot = DashStyle.DashDotDot;
pub const DashStyleCustom = DashStyle.Custom;

pub const DashCap = enum(i32) {
    Flat = 0,
    Round = 2,
    Triangle = 3,
};
pub const DashCapFlat = DashCap.Flat;
pub const DashCapRound = DashCap.Round;
pub const DashCapTriangle = DashCap.Triangle;

pub const LineCap = enum(i32) {
    Flat = 0,
    Square = 1,
    Round = 2,
    Triangle = 3,
    NoAnchor = 16,
    SquareAnchor = 17,
    RoundAnchor = 18,
    DiamondAnchor = 19,
    ArrowAnchor = 20,
    Custom = 255,
    AnchorMask = 240,
};
pub const LineCapFlat = LineCap.Flat;
pub const LineCapSquare = LineCap.Square;
pub const LineCapRound = LineCap.Round;
pub const LineCapTriangle = LineCap.Triangle;
pub const LineCapNoAnchor = LineCap.NoAnchor;
pub const LineCapSquareAnchor = LineCap.SquareAnchor;
pub const LineCapRoundAnchor = LineCap.RoundAnchor;
pub const LineCapDiamondAnchor = LineCap.DiamondAnchor;
pub const LineCapArrowAnchor = LineCap.ArrowAnchor;
pub const LineCapCustom = LineCap.Custom;
pub const LineCapAnchorMask = LineCap.AnchorMask;

pub const CustomLineCapType = enum(i32) {
    Default = 0,
    AdjustableArrow = 1,
};
pub const CustomLineCapTypeDefault = CustomLineCapType.Default;
pub const CustomLineCapTypeAdjustableArrow = CustomLineCapType.AdjustableArrow;

pub const LineJoin = enum(i32) {
    Miter = 0,
    Bevel = 1,
    Round = 2,
    MiterClipped = 3,
};
pub const LineJoinMiter = LineJoin.Miter;
pub const LineJoinBevel = LineJoin.Bevel;
pub const LineJoinRound = LineJoin.Round;
pub const LineJoinMiterClipped = LineJoin.MiterClipped;

pub const PathPointType = enum(i32) {
    Start = 0,
    Line = 1,
    Bezier = 3,
    PathTypeMask = 7,
    DashMode = 16,
    PathMarker = 32,
    CloseSubpath = 128,
    // Bezier3 = 3, this enum value conflicts with Bezier
};
pub const PathPointTypeStart = PathPointType.Start;
pub const PathPointTypeLine = PathPointType.Line;
pub const PathPointTypeBezier = PathPointType.Bezier;
pub const PathPointTypePathTypeMask = PathPointType.PathTypeMask;
pub const PathPointTypeDashMode = PathPointType.DashMode;
pub const PathPointTypePathMarker = PathPointType.PathMarker;
pub const PathPointTypeCloseSubpath = PathPointType.CloseSubpath;
pub const PathPointTypeBezier3 = PathPointType.Bezier;

pub const WarpMode = enum(i32) {
    Perspective = 0,
    Bilinear = 1,
};
pub const WarpModePerspective = WarpMode.Perspective;
pub const WarpModeBilinear = WarpMode.Bilinear;

pub const LinearGradientMode = enum(i32) {
    Horizontal = 0,
    Vertical = 1,
    ForwardDiagonal = 2,
    BackwardDiagonal = 3,
};
pub const LinearGradientModeHorizontal = LinearGradientMode.Horizontal;
pub const LinearGradientModeVertical = LinearGradientMode.Vertical;
pub const LinearGradientModeForwardDiagonal = LinearGradientMode.ForwardDiagonal;
pub const LinearGradientModeBackwardDiagonal = LinearGradientMode.BackwardDiagonal;

pub const CombineMode = enum(i32) {
    Replace = 0,
    Intersect = 1,
    Union = 2,
    Xor = 3,
    Exclude = 4,
    Complement = 5,
};
pub const CombineModeReplace = CombineMode.Replace;
pub const CombineModeIntersect = CombineMode.Intersect;
pub const CombineModeUnion = CombineMode.Union;
pub const CombineModeXor = CombineMode.Xor;
pub const CombineModeExclude = CombineMode.Exclude;
pub const CombineModeComplement = CombineMode.Complement;

pub const ImageType = enum(i32) {
    Unknown = 0,
    Bitmap = 1,
    Metafile = 2,
};
pub const ImageTypeUnknown = ImageType.Unknown;
pub const ImageTypeBitmap = ImageType.Bitmap;
pub const ImageTypeMetafile = ImageType.Metafile;

pub const InterpolationMode = enum(i32) {
    Invalid = -1,
    Default = 0,
    LowQuality = 1,
    HighQuality = 2,
    Bilinear = 3,
    Bicubic = 4,
    NearestNeighbor = 5,
    HighQualityBilinear = 6,
    HighQualityBicubic = 7,
};
pub const InterpolationModeInvalid = InterpolationMode.Invalid;
pub const InterpolationModeDefault = InterpolationMode.Default;
pub const InterpolationModeLowQuality = InterpolationMode.LowQuality;
pub const InterpolationModeHighQuality = InterpolationMode.HighQuality;
pub const InterpolationModeBilinear = InterpolationMode.Bilinear;
pub const InterpolationModeBicubic = InterpolationMode.Bicubic;
pub const InterpolationModeNearestNeighbor = InterpolationMode.NearestNeighbor;
pub const InterpolationModeHighQualityBilinear = InterpolationMode.HighQualityBilinear;
pub const InterpolationModeHighQualityBicubic = InterpolationMode.HighQualityBicubic;

pub const PenAlignment = enum(i32) {
    Center = 0,
    Inset = 1,
};
pub const PenAlignmentCenter = PenAlignment.Center;
pub const PenAlignmentInset = PenAlignment.Inset;

pub const BrushType = enum(i32) {
    SolidColor = 0,
    HatchFill = 1,
    TextureFill = 2,
    PathGradient = 3,
    LinearGradient = 4,
};
pub const BrushTypeSolidColor = BrushType.SolidColor;
pub const BrushTypeHatchFill = BrushType.HatchFill;
pub const BrushTypeTextureFill = BrushType.TextureFill;
pub const BrushTypePathGradient = BrushType.PathGradient;
pub const BrushTypeLinearGradient = BrushType.LinearGradient;

pub const PenType = enum(i32) {
    SolidColor = 0,
    HatchFill = 1,
    TextureFill = 2,
    PathGradient = 3,
    LinearGradient = 4,
    Unknown = -1,
};
pub const PenTypeSolidColor = PenType.SolidColor;
pub const PenTypeHatchFill = PenType.HatchFill;
pub const PenTypeTextureFill = PenType.TextureFill;
pub const PenTypePathGradient = PenType.PathGradient;
pub const PenTypeLinearGradient = PenType.LinearGradient;
pub const PenTypeUnknown = PenType.Unknown;

pub const MatrixOrder = enum(i32) {
    Prepend = 0,
    Append = 1,
};
pub const MatrixOrderPrepend = MatrixOrder.Prepend;
pub const MatrixOrderAppend = MatrixOrder.Append;

pub const GenericFontFamily = enum(i32) {
    Serif = 0,
    SansSerif = 1,
    Monospace = 2,
};
pub const GenericFontFamilySerif = GenericFontFamily.Serif;
pub const GenericFontFamilySansSerif = GenericFontFamily.SansSerif;
pub const GenericFontFamilyMonospace = GenericFontFamily.Monospace;

pub const FontStyle = enum(i32) {
    Regular = 0,
    Bold = 1,
    Italic = 2,
    BoldItalic = 3,
    Underline = 4,
    Strikeout = 8,
};
pub const FontStyleRegular = FontStyle.Regular;
pub const FontStyleBold = FontStyle.Bold;
pub const FontStyleItalic = FontStyle.Italic;
pub const FontStyleBoldItalic = FontStyle.BoldItalic;
pub const FontStyleUnderline = FontStyle.Underline;
pub const FontStyleStrikeout = FontStyle.Strikeout;

pub const SmoothingMode = enum(i32) {
    Invalid = -1,
    Default = 0,
    HighSpeed = 1,
    HighQuality = 2,
    None = 3,
    AntiAlias = 4,
    // AntiAlias8x4 = 4, this enum value conflicts with AntiAlias
    AntiAlias8x8 = 5,
};
pub const SmoothingModeInvalid = SmoothingMode.Invalid;
pub const SmoothingModeDefault = SmoothingMode.Default;
pub const SmoothingModeHighSpeed = SmoothingMode.HighSpeed;
pub const SmoothingModeHighQuality = SmoothingMode.HighQuality;
pub const SmoothingModeNone = SmoothingMode.None;
pub const SmoothingModeAntiAlias = SmoothingMode.AntiAlias;
pub const SmoothingModeAntiAlias8x4 = SmoothingMode.AntiAlias;
pub const SmoothingModeAntiAlias8x8 = SmoothingMode.AntiAlias8x8;

pub const PixelOffsetMode = enum(i32) {
    Invalid = -1,
    Default = 0,
    HighSpeed = 1,
    HighQuality = 2,
    None = 3,
    Half = 4,
};
pub const PixelOffsetModeInvalid = PixelOffsetMode.Invalid;
pub const PixelOffsetModeDefault = PixelOffsetMode.Default;
pub const PixelOffsetModeHighSpeed = PixelOffsetMode.HighSpeed;
pub const PixelOffsetModeHighQuality = PixelOffsetMode.HighQuality;
pub const PixelOffsetModeNone = PixelOffsetMode.None;
pub const PixelOffsetModeHalf = PixelOffsetMode.Half;

pub const TextRenderingHint = enum(i32) {
    SystemDefault = 0,
    SingleBitPerPixelGridFit = 1,
    SingleBitPerPixel = 2,
    AntiAliasGridFit = 3,
    AntiAlias = 4,
    ClearTypeGridFit = 5,
};
pub const TextRenderingHintSystemDefault = TextRenderingHint.SystemDefault;
pub const TextRenderingHintSingleBitPerPixelGridFit = TextRenderingHint.SingleBitPerPixelGridFit;
pub const TextRenderingHintSingleBitPerPixel = TextRenderingHint.SingleBitPerPixel;
pub const TextRenderingHintAntiAliasGridFit = TextRenderingHint.AntiAliasGridFit;
pub const TextRenderingHintAntiAlias = TextRenderingHint.AntiAlias;
pub const TextRenderingHintClearTypeGridFit = TextRenderingHint.ClearTypeGridFit;

pub const MetafileType = enum(i32) {
    Invalid = 0,
    Wmf = 1,
    WmfPlaceable = 2,
    Emf = 3,
    EmfPlusOnly = 4,
    EmfPlusDual = 5,
};
pub const MetafileTypeInvalid = MetafileType.Invalid;
pub const MetafileTypeWmf = MetafileType.Wmf;
pub const MetafileTypeWmfPlaceable = MetafileType.WmfPlaceable;
pub const MetafileTypeEmf = MetafileType.Emf;
pub const MetafileTypeEmfPlusOnly = MetafileType.EmfPlusOnly;
pub const MetafileTypeEmfPlusDual = MetafileType.EmfPlusDual;

pub const EmfType = enum(i32) {
    Only = 3,
    PlusOnly = 4,
    PlusDual = 5,
};
pub const EmfTypeEmfOnly = EmfType.Only;
pub const EmfTypeEmfPlusOnly = EmfType.PlusOnly;
pub const EmfTypeEmfPlusDual = EmfType.PlusDual;

pub const ObjectType = enum(i32) {
    Invalid = 0,
    Brush = 1,
    Pen = 2,
    Path = 3,
    Region = 4,
    Image = 5,
    Font = 6,
    StringFormat = 7,
    ImageAttributes = 8,
    CustomLineCap = 9,
    Graphics = 10,
    // Max = 10, this enum value conflicts with Graphics
    // Min = 1, this enum value conflicts with Brush
};
pub const ObjectTypeInvalid = ObjectType.Invalid;
pub const ObjectTypeBrush = ObjectType.Brush;
pub const ObjectTypePen = ObjectType.Pen;
pub const ObjectTypePath = ObjectType.Path;
pub const ObjectTypeRegion = ObjectType.Region;
pub const ObjectTypeImage = ObjectType.Image;
pub const ObjectTypeFont = ObjectType.Font;
pub const ObjectTypeStringFormat = ObjectType.StringFormat;
pub const ObjectTypeImageAttributes = ObjectType.ImageAttributes;
pub const ObjectTypeCustomLineCap = ObjectType.CustomLineCap;
pub const ObjectTypeGraphics = ObjectType.Graphics;
pub const ObjectTypeMax = ObjectType.Graphics;
pub const ObjectTypeMin = ObjectType.Brush;

pub const EmfPlusRecordType = enum(i32) {
    WmfRecordTypeSetBkColor = 66049,
    WmfRecordTypeSetBkMode = 65794,
    WmfRecordTypeSetMapMode = 65795,
    WmfRecordTypeSetROP2 = 65796,
    WmfRecordTypeSetRelAbs = 65797,
    WmfRecordTypeSetPolyFillMode = 65798,
    WmfRecordTypeSetStretchBltMode = 65799,
    WmfRecordTypeSetTextCharExtra = 65800,
    WmfRecordTypeSetTextColor = 66057,
    WmfRecordTypeSetTextJustification = 66058,
    WmfRecordTypeSetWindowOrg = 66059,
    WmfRecordTypeSetWindowExt = 66060,
    WmfRecordTypeSetViewportOrg = 66061,
    WmfRecordTypeSetViewportExt = 66062,
    WmfRecordTypeOffsetWindowOrg = 66063,
    WmfRecordTypeScaleWindowExt = 66576,
    WmfRecordTypeOffsetViewportOrg = 66065,
    WmfRecordTypeScaleViewportExt = 66578,
    WmfRecordTypeLineTo = 66067,
    WmfRecordTypeMoveTo = 66068,
    WmfRecordTypeExcludeClipRect = 66581,
    WmfRecordTypeIntersectClipRect = 66582,
    WmfRecordTypeArc = 67607,
    WmfRecordTypeEllipse = 66584,
    WmfRecordTypeFloodFill = 66585,
    WmfRecordTypePie = 67610,
    WmfRecordTypeRectangle = 66587,
    WmfRecordTypeRoundRect = 67100,
    WmfRecordTypePatBlt = 67101,
    WmfRecordTypeSaveDC = 65566,
    WmfRecordTypeSetPixel = 66591,
    WmfRecordTypeOffsetClipRgn = 66080,
    WmfRecordTypeTextOut = 66849,
    WmfRecordTypeBitBlt = 67874,
    WmfRecordTypeStretchBlt = 68387,
    WmfRecordTypePolygon = 66340,
    WmfRecordTypePolyline = 66341,
    WmfRecordTypeEscape = 67110,
    WmfRecordTypeRestoreDC = 65831,
    WmfRecordTypeFillRegion = 66088,
    WmfRecordTypeFrameRegion = 66601,
    WmfRecordTypeInvertRegion = 65834,
    WmfRecordTypePaintRegion = 65835,
    WmfRecordTypeSelectClipRegion = 65836,
    WmfRecordTypeSelectObject = 65837,
    WmfRecordTypeSetTextAlign = 65838,
    WmfRecordTypeDrawText = 67119,
    WmfRecordTypeChord = 67632,
    WmfRecordTypeSetMapperFlags = 66097,
    WmfRecordTypeExtTextOut = 68146,
    WmfRecordTypeSetDIBToDev = 68915,
    WmfRecordTypeSelectPalette = 66100,
    WmfRecordTypeRealizePalette = 65589,
    WmfRecordTypeAnimatePalette = 66614,
    WmfRecordTypeSetPalEntries = 65591,
    WmfRecordTypePolyPolygon = 66872,
    WmfRecordTypeResizePalette = 65849,
    WmfRecordTypeDIBBitBlt = 67904,
    WmfRecordTypeDIBStretchBlt = 68417,
    WmfRecordTypeDIBCreatePatternBrush = 65858,
    WmfRecordTypeStretchDIB = 69443,
    WmfRecordTypeExtFloodFill = 66888,
    WmfRecordTypeSetLayout = 65865,
    WmfRecordTypeResetDC = 65868,
    WmfRecordTypeStartDoc = 65869,
    WmfRecordTypeStartPage = 65615,
    WmfRecordTypeEndPage = 65616,
    WmfRecordTypeAbortDoc = 65618,
    WmfRecordTypeEndDoc = 65630,
    WmfRecordTypeDeleteObject = 66032,
    WmfRecordTypeCreatePalette = 65783,
    WmfRecordTypeCreateBrush = 65784,
    WmfRecordTypeCreatePatternBrush = 66041,
    WmfRecordTypeCreatePenIndirect = 66298,
    WmfRecordTypeCreateFontIndirect = 66299,
    WmfRecordTypeCreateBrushIndirect = 66300,
    WmfRecordTypeCreateBitmapIndirect = 66301,
    WmfRecordTypeCreateBitmap = 67326,
    WmfRecordTypeCreateRegion = 67327,
    EmfRecordTypeHeader = 1,
    EmfRecordTypePolyBezier = 2,
    EmfRecordTypePolygon = 3,
    EmfRecordTypePolyline = 4,
    EmfRecordTypePolyBezierTo = 5,
    EmfRecordTypePolyLineTo = 6,
    EmfRecordTypePolyPolyline = 7,
    EmfRecordTypePolyPolygon = 8,
    EmfRecordTypeSetWindowExtEx = 9,
    EmfRecordTypeSetWindowOrgEx = 10,
    EmfRecordTypeSetViewportExtEx = 11,
    EmfRecordTypeSetViewportOrgEx = 12,
    EmfRecordTypeSetBrushOrgEx = 13,
    EmfRecordTypeEOF = 14,
    EmfRecordTypeSetPixelV = 15,
    EmfRecordTypeSetMapperFlags = 16,
    EmfRecordTypeSetMapMode = 17,
    EmfRecordTypeSetBkMode = 18,
    EmfRecordTypeSetPolyFillMode = 19,
    EmfRecordTypeSetROP2 = 20,
    EmfRecordTypeSetStretchBltMode = 21,
    EmfRecordTypeSetTextAlign = 22,
    EmfRecordTypeSetColorAdjustment = 23,
    EmfRecordTypeSetTextColor = 24,
    EmfRecordTypeSetBkColor = 25,
    EmfRecordTypeOffsetClipRgn = 26,
    EmfRecordTypeMoveToEx = 27,
    EmfRecordTypeSetMetaRgn = 28,
    EmfRecordTypeExcludeClipRect = 29,
    EmfRecordTypeIntersectClipRect = 30,
    EmfRecordTypeScaleViewportExtEx = 31,
    EmfRecordTypeScaleWindowExtEx = 32,
    EmfRecordTypeSaveDC = 33,
    EmfRecordTypeRestoreDC = 34,
    EmfRecordTypeSetWorldTransform = 35,
    EmfRecordTypeModifyWorldTransform = 36,
    EmfRecordTypeSelectObject = 37,
    EmfRecordTypeCreatePen = 38,
    EmfRecordTypeCreateBrushIndirect = 39,
    EmfRecordTypeDeleteObject = 40,
    EmfRecordTypeAngleArc = 41,
    EmfRecordTypeEllipse = 42,
    EmfRecordTypeRectangle = 43,
    EmfRecordTypeRoundRect = 44,
    EmfRecordTypeArc = 45,
    EmfRecordTypeChord = 46,
    EmfRecordTypePie = 47,
    EmfRecordTypeSelectPalette = 48,
    EmfRecordTypeCreatePalette = 49,
    EmfRecordTypeSetPaletteEntries = 50,
    EmfRecordTypeResizePalette = 51,
    EmfRecordTypeRealizePalette = 52,
    EmfRecordTypeExtFloodFill = 53,
    EmfRecordTypeLineTo = 54,
    EmfRecordTypeArcTo = 55,
    EmfRecordTypePolyDraw = 56,
    EmfRecordTypeSetArcDirection = 57,
    EmfRecordTypeSetMiterLimit = 58,
    EmfRecordTypeBeginPath = 59,
    EmfRecordTypeEndPath = 60,
    EmfRecordTypeCloseFigure = 61,
    EmfRecordTypeFillPath = 62,
    EmfRecordTypeStrokeAndFillPath = 63,
    EmfRecordTypeStrokePath = 64,
    EmfRecordTypeFlattenPath = 65,
    EmfRecordTypeWidenPath = 66,
    EmfRecordTypeSelectClipPath = 67,
    EmfRecordTypeAbortPath = 68,
    EmfRecordTypeReserved_069 = 69,
    EmfRecordTypeGdiComment = 70,
    EmfRecordTypeFillRgn = 71,
    EmfRecordTypeFrameRgn = 72,
    EmfRecordTypeInvertRgn = 73,
    EmfRecordTypePaintRgn = 74,
    EmfRecordTypeExtSelectClipRgn = 75,
    EmfRecordTypeBitBlt = 76,
    EmfRecordTypeStretchBlt = 77,
    EmfRecordTypeMaskBlt = 78,
    EmfRecordTypePlgBlt = 79,
    EmfRecordTypeSetDIBitsToDevice = 80,
    EmfRecordTypeStretchDIBits = 81,
    EmfRecordTypeExtCreateFontIndirect = 82,
    EmfRecordTypeExtTextOutA = 83,
    EmfRecordTypeExtTextOutW = 84,
    EmfRecordTypePolyBezier16 = 85,
    EmfRecordTypePolygon16 = 86,
    EmfRecordTypePolyline16 = 87,
    EmfRecordTypePolyBezierTo16 = 88,
    EmfRecordTypePolylineTo16 = 89,
    EmfRecordTypePolyPolyline16 = 90,
    EmfRecordTypePolyPolygon16 = 91,
    EmfRecordTypePolyDraw16 = 92,
    EmfRecordTypeCreateMonoBrush = 93,
    EmfRecordTypeCreateDIBPatternBrushPt = 94,
    EmfRecordTypeExtCreatePen = 95,
    EmfRecordTypePolyTextOutA = 96,
    EmfRecordTypePolyTextOutW = 97,
    EmfRecordTypeSetICMMode = 98,
    EmfRecordTypeCreateColorSpace = 99,
    EmfRecordTypeSetColorSpace = 100,
    EmfRecordTypeDeleteColorSpace = 101,
    EmfRecordTypeGLSRecord = 102,
    EmfRecordTypeGLSBoundedRecord = 103,
    EmfRecordTypePixelFormat = 104,
    EmfRecordTypeDrawEscape = 105,
    EmfRecordTypeExtEscape = 106,
    EmfRecordTypeStartDoc = 107,
    EmfRecordTypeSmallTextOut = 108,
    EmfRecordTypeForceUFIMapping = 109,
    EmfRecordTypeNamedEscape = 110,
    EmfRecordTypeColorCorrectPalette = 111,
    EmfRecordTypeSetICMProfileA = 112,
    EmfRecordTypeSetICMProfileW = 113,
    EmfRecordTypeAlphaBlend = 114,
    EmfRecordTypeSetLayout = 115,
    EmfRecordTypeTransparentBlt = 116,
    EmfRecordTypeReserved_117 = 117,
    EmfRecordTypeGradientFill = 118,
    EmfRecordTypeSetLinkedUFIs = 119,
    EmfRecordTypeSetTextJustification = 120,
    EmfRecordTypeColorMatchToTargetW = 121,
    EmfRecordTypeCreateColorSpaceW = 122,
    // EmfRecordTypeMax = 122, this enum value conflicts with EmfRecordTypeCreateColorSpaceW
    // EmfRecordTypeMin = 1, this enum value conflicts with EmfRecordTypeHeader
    EmfPlusRecordTypeInvalid = 16384,
    EmfPlusRecordTypeHeader = 16385,
    EmfPlusRecordTypeEndOfFile = 16386,
    EmfPlusRecordTypeComment = 16387,
    EmfPlusRecordTypeGetDC = 16388,
    EmfPlusRecordTypeMultiFormatStart = 16389,
    EmfPlusRecordTypeMultiFormatSection = 16390,
    EmfPlusRecordTypeMultiFormatEnd = 16391,
    EmfPlusRecordTypeObject = 16392,
    EmfPlusRecordTypeClear = 16393,
    EmfPlusRecordTypeFillRects = 16394,
    EmfPlusRecordTypeDrawRects = 16395,
    EmfPlusRecordTypeFillPolygon = 16396,
    EmfPlusRecordTypeDrawLines = 16397,
    EmfPlusRecordTypeFillEllipse = 16398,
    EmfPlusRecordTypeDrawEllipse = 16399,
    EmfPlusRecordTypeFillPie = 16400,
    EmfPlusRecordTypeDrawPie = 16401,
    EmfPlusRecordTypeDrawArc = 16402,
    EmfPlusRecordTypeFillRegion = 16403,
    EmfPlusRecordTypeFillPath = 16404,
    EmfPlusRecordTypeDrawPath = 16405,
    EmfPlusRecordTypeFillClosedCurve = 16406,
    EmfPlusRecordTypeDrawClosedCurve = 16407,
    EmfPlusRecordTypeDrawCurve = 16408,
    EmfPlusRecordTypeDrawBeziers = 16409,
    EmfPlusRecordTypeDrawImage = 16410,
    EmfPlusRecordTypeDrawImagePoints = 16411,
    EmfPlusRecordTypeDrawString = 16412,
    EmfPlusRecordTypeSetRenderingOrigin = 16413,
    EmfPlusRecordTypeSetAntiAliasMode = 16414,
    EmfPlusRecordTypeSetTextRenderingHint = 16415,
    EmfPlusRecordTypeSetTextContrast = 16416,
    EmfPlusRecordTypeSetInterpolationMode = 16417,
    EmfPlusRecordTypeSetPixelOffsetMode = 16418,
    EmfPlusRecordTypeSetCompositingMode = 16419,
    EmfPlusRecordTypeSetCompositingQuality = 16420,
    EmfPlusRecordTypeSave = 16421,
    EmfPlusRecordTypeRestore = 16422,
    EmfPlusRecordTypeBeginContainer = 16423,
    EmfPlusRecordTypeBeginContainerNoParams = 16424,
    EmfPlusRecordTypeEndContainer = 16425,
    EmfPlusRecordTypeSetWorldTransform = 16426,
    EmfPlusRecordTypeResetWorldTransform = 16427,
    EmfPlusRecordTypeMultiplyWorldTransform = 16428,
    EmfPlusRecordTypeTranslateWorldTransform = 16429,
    EmfPlusRecordTypeScaleWorldTransform = 16430,
    EmfPlusRecordTypeRotateWorldTransform = 16431,
    EmfPlusRecordTypeSetPageTransform = 16432,
    EmfPlusRecordTypeResetClip = 16433,
    EmfPlusRecordTypeSetClipRect = 16434,
    EmfPlusRecordTypeSetClipPath = 16435,
    EmfPlusRecordTypeSetClipRegion = 16436,
    EmfPlusRecordTypeOffsetClip = 16437,
    EmfPlusRecordTypeDrawDriverString = 16438,
    EmfPlusRecordTypeStrokeFillPath = 16439,
    EmfPlusRecordTypeSerializableObject = 16440,
    EmfPlusRecordTypeSetTSGraphics = 16441,
    EmfPlusRecordTypeSetTSClip = 16442,
    EmfPlusRecordTotal = 16443,
    // EmfPlusRecordTypeMax = 16442, this enum value conflicts with EmfPlusRecordTypeSetTSClip
    // EmfPlusRecordTypeMin = 16385, this enum value conflicts with EmfPlusRecordTypeHeader
};
pub const WmfRecordTypeSetBkColor = EmfPlusRecordType.WmfRecordTypeSetBkColor;
pub const WmfRecordTypeSetBkMode = EmfPlusRecordType.WmfRecordTypeSetBkMode;
pub const WmfRecordTypeSetMapMode = EmfPlusRecordType.WmfRecordTypeSetMapMode;
pub const WmfRecordTypeSetROP2 = EmfPlusRecordType.WmfRecordTypeSetROP2;
pub const WmfRecordTypeSetRelAbs = EmfPlusRecordType.WmfRecordTypeSetRelAbs;
pub const WmfRecordTypeSetPolyFillMode = EmfPlusRecordType.WmfRecordTypeSetPolyFillMode;
pub const WmfRecordTypeSetStretchBltMode = EmfPlusRecordType.WmfRecordTypeSetStretchBltMode;
pub const WmfRecordTypeSetTextCharExtra = EmfPlusRecordType.WmfRecordTypeSetTextCharExtra;
pub const WmfRecordTypeSetTextColor = EmfPlusRecordType.WmfRecordTypeSetTextColor;
pub const WmfRecordTypeSetTextJustification = EmfPlusRecordType.WmfRecordTypeSetTextJustification;
pub const WmfRecordTypeSetWindowOrg = EmfPlusRecordType.WmfRecordTypeSetWindowOrg;
pub const WmfRecordTypeSetWindowExt = EmfPlusRecordType.WmfRecordTypeSetWindowExt;
pub const WmfRecordTypeSetViewportOrg = EmfPlusRecordType.WmfRecordTypeSetViewportOrg;
pub const WmfRecordTypeSetViewportExt = EmfPlusRecordType.WmfRecordTypeSetViewportExt;
pub const WmfRecordTypeOffsetWindowOrg = EmfPlusRecordType.WmfRecordTypeOffsetWindowOrg;
pub const WmfRecordTypeScaleWindowExt = EmfPlusRecordType.WmfRecordTypeScaleWindowExt;
pub const WmfRecordTypeOffsetViewportOrg = EmfPlusRecordType.WmfRecordTypeOffsetViewportOrg;
pub const WmfRecordTypeScaleViewportExt = EmfPlusRecordType.WmfRecordTypeScaleViewportExt;
pub const WmfRecordTypeLineTo = EmfPlusRecordType.WmfRecordTypeLineTo;
pub const WmfRecordTypeMoveTo = EmfPlusRecordType.WmfRecordTypeMoveTo;
pub const WmfRecordTypeExcludeClipRect = EmfPlusRecordType.WmfRecordTypeExcludeClipRect;
pub const WmfRecordTypeIntersectClipRect = EmfPlusRecordType.WmfRecordTypeIntersectClipRect;
pub const WmfRecordTypeArc = EmfPlusRecordType.WmfRecordTypeArc;
pub const WmfRecordTypeEllipse = EmfPlusRecordType.WmfRecordTypeEllipse;
pub const WmfRecordTypeFloodFill = EmfPlusRecordType.WmfRecordTypeFloodFill;
pub const WmfRecordTypePie = EmfPlusRecordType.WmfRecordTypePie;
pub const WmfRecordTypeRectangle = EmfPlusRecordType.WmfRecordTypeRectangle;
pub const WmfRecordTypeRoundRect = EmfPlusRecordType.WmfRecordTypeRoundRect;
pub const WmfRecordTypePatBlt = EmfPlusRecordType.WmfRecordTypePatBlt;
pub const WmfRecordTypeSaveDC = EmfPlusRecordType.WmfRecordTypeSaveDC;
pub const WmfRecordTypeSetPixel = EmfPlusRecordType.WmfRecordTypeSetPixel;
pub const WmfRecordTypeOffsetClipRgn = EmfPlusRecordType.WmfRecordTypeOffsetClipRgn;
pub const WmfRecordTypeTextOut = EmfPlusRecordType.WmfRecordTypeTextOut;
pub const WmfRecordTypeBitBlt = EmfPlusRecordType.WmfRecordTypeBitBlt;
pub const WmfRecordTypeStretchBlt = EmfPlusRecordType.WmfRecordTypeStretchBlt;
pub const WmfRecordTypePolygon = EmfPlusRecordType.WmfRecordTypePolygon;
pub const WmfRecordTypePolyline = EmfPlusRecordType.WmfRecordTypePolyline;
pub const WmfRecordTypeEscape = EmfPlusRecordType.WmfRecordTypeEscape;
pub const WmfRecordTypeRestoreDC = EmfPlusRecordType.WmfRecordTypeRestoreDC;
pub const WmfRecordTypeFillRegion = EmfPlusRecordType.WmfRecordTypeFillRegion;
pub const WmfRecordTypeFrameRegion = EmfPlusRecordType.WmfRecordTypeFrameRegion;
pub const WmfRecordTypeInvertRegion = EmfPlusRecordType.WmfRecordTypeInvertRegion;
pub const WmfRecordTypePaintRegion = EmfPlusRecordType.WmfRecordTypePaintRegion;
pub const WmfRecordTypeSelectClipRegion = EmfPlusRecordType.WmfRecordTypeSelectClipRegion;
pub const WmfRecordTypeSelectObject = EmfPlusRecordType.WmfRecordTypeSelectObject;
pub const WmfRecordTypeSetTextAlign = EmfPlusRecordType.WmfRecordTypeSetTextAlign;
pub const WmfRecordTypeDrawText = EmfPlusRecordType.WmfRecordTypeDrawText;
pub const WmfRecordTypeChord = EmfPlusRecordType.WmfRecordTypeChord;
pub const WmfRecordTypeSetMapperFlags = EmfPlusRecordType.WmfRecordTypeSetMapperFlags;
pub const WmfRecordTypeExtTextOut = EmfPlusRecordType.WmfRecordTypeExtTextOut;
pub const WmfRecordTypeSetDIBToDev = EmfPlusRecordType.WmfRecordTypeSetDIBToDev;
pub const WmfRecordTypeSelectPalette = EmfPlusRecordType.WmfRecordTypeSelectPalette;
pub const WmfRecordTypeRealizePalette = EmfPlusRecordType.WmfRecordTypeRealizePalette;
pub const WmfRecordTypeAnimatePalette = EmfPlusRecordType.WmfRecordTypeAnimatePalette;
pub const WmfRecordTypeSetPalEntries = EmfPlusRecordType.WmfRecordTypeSetPalEntries;
pub const WmfRecordTypePolyPolygon = EmfPlusRecordType.WmfRecordTypePolyPolygon;
pub const WmfRecordTypeResizePalette = EmfPlusRecordType.WmfRecordTypeResizePalette;
pub const WmfRecordTypeDIBBitBlt = EmfPlusRecordType.WmfRecordTypeDIBBitBlt;
pub const WmfRecordTypeDIBStretchBlt = EmfPlusRecordType.WmfRecordTypeDIBStretchBlt;
pub const WmfRecordTypeDIBCreatePatternBrush = EmfPlusRecordType.WmfRecordTypeDIBCreatePatternBrush;
pub const WmfRecordTypeStretchDIB = EmfPlusRecordType.WmfRecordTypeStretchDIB;
pub const WmfRecordTypeExtFloodFill = EmfPlusRecordType.WmfRecordTypeExtFloodFill;
pub const WmfRecordTypeSetLayout = EmfPlusRecordType.WmfRecordTypeSetLayout;
pub const WmfRecordTypeResetDC = EmfPlusRecordType.WmfRecordTypeResetDC;
pub const WmfRecordTypeStartDoc = EmfPlusRecordType.WmfRecordTypeStartDoc;
pub const WmfRecordTypeStartPage = EmfPlusRecordType.WmfRecordTypeStartPage;
pub const WmfRecordTypeEndPage = EmfPlusRecordType.WmfRecordTypeEndPage;
pub const WmfRecordTypeAbortDoc = EmfPlusRecordType.WmfRecordTypeAbortDoc;
pub const WmfRecordTypeEndDoc = EmfPlusRecordType.WmfRecordTypeEndDoc;
pub const WmfRecordTypeDeleteObject = EmfPlusRecordType.WmfRecordTypeDeleteObject;
pub const WmfRecordTypeCreatePalette = EmfPlusRecordType.WmfRecordTypeCreatePalette;
pub const WmfRecordTypeCreateBrush = EmfPlusRecordType.WmfRecordTypeCreateBrush;
pub const WmfRecordTypeCreatePatternBrush = EmfPlusRecordType.WmfRecordTypeCreatePatternBrush;
pub const WmfRecordTypeCreatePenIndirect = EmfPlusRecordType.WmfRecordTypeCreatePenIndirect;
pub const WmfRecordTypeCreateFontIndirect = EmfPlusRecordType.WmfRecordTypeCreateFontIndirect;
pub const WmfRecordTypeCreateBrushIndirect = EmfPlusRecordType.WmfRecordTypeCreateBrushIndirect;
pub const WmfRecordTypeCreateBitmapIndirect = EmfPlusRecordType.WmfRecordTypeCreateBitmapIndirect;
pub const WmfRecordTypeCreateBitmap = EmfPlusRecordType.WmfRecordTypeCreateBitmap;
pub const WmfRecordTypeCreateRegion = EmfPlusRecordType.WmfRecordTypeCreateRegion;
pub const EmfRecordTypeHeader = EmfPlusRecordType.EmfRecordTypeHeader;
pub const EmfRecordTypePolyBezier = EmfPlusRecordType.EmfRecordTypePolyBezier;
pub const EmfRecordTypePolygon = EmfPlusRecordType.EmfRecordTypePolygon;
pub const EmfRecordTypePolyline = EmfPlusRecordType.EmfRecordTypePolyline;
pub const EmfRecordTypePolyBezierTo = EmfPlusRecordType.EmfRecordTypePolyBezierTo;
pub const EmfRecordTypePolyLineTo = EmfPlusRecordType.EmfRecordTypePolyLineTo;
pub const EmfRecordTypePolyPolyline = EmfPlusRecordType.EmfRecordTypePolyPolyline;
pub const EmfRecordTypePolyPolygon = EmfPlusRecordType.EmfRecordTypePolyPolygon;
pub const EmfRecordTypeSetWindowExtEx = EmfPlusRecordType.EmfRecordTypeSetWindowExtEx;
pub const EmfRecordTypeSetWindowOrgEx = EmfPlusRecordType.EmfRecordTypeSetWindowOrgEx;
pub const EmfRecordTypeSetViewportExtEx = EmfPlusRecordType.EmfRecordTypeSetViewportExtEx;
pub const EmfRecordTypeSetViewportOrgEx = EmfPlusRecordType.EmfRecordTypeSetViewportOrgEx;
pub const EmfRecordTypeSetBrushOrgEx = EmfPlusRecordType.EmfRecordTypeSetBrushOrgEx;
pub const EmfRecordTypeEOF = EmfPlusRecordType.EmfRecordTypeEOF;
pub const EmfRecordTypeSetPixelV = EmfPlusRecordType.EmfRecordTypeSetPixelV;
pub const EmfRecordTypeSetMapperFlags = EmfPlusRecordType.EmfRecordTypeSetMapperFlags;
pub const EmfRecordTypeSetMapMode = EmfPlusRecordType.EmfRecordTypeSetMapMode;
pub const EmfRecordTypeSetBkMode = EmfPlusRecordType.EmfRecordTypeSetBkMode;
pub const EmfRecordTypeSetPolyFillMode = EmfPlusRecordType.EmfRecordTypeSetPolyFillMode;
pub const EmfRecordTypeSetROP2 = EmfPlusRecordType.EmfRecordTypeSetROP2;
pub const EmfRecordTypeSetStretchBltMode = EmfPlusRecordType.EmfRecordTypeSetStretchBltMode;
pub const EmfRecordTypeSetTextAlign = EmfPlusRecordType.EmfRecordTypeSetTextAlign;
pub const EmfRecordTypeSetColorAdjustment = EmfPlusRecordType.EmfRecordTypeSetColorAdjustment;
pub const EmfRecordTypeSetTextColor = EmfPlusRecordType.EmfRecordTypeSetTextColor;
pub const EmfRecordTypeSetBkColor = EmfPlusRecordType.EmfRecordTypeSetBkColor;
pub const EmfRecordTypeOffsetClipRgn = EmfPlusRecordType.EmfRecordTypeOffsetClipRgn;
pub const EmfRecordTypeMoveToEx = EmfPlusRecordType.EmfRecordTypeMoveToEx;
pub const EmfRecordTypeSetMetaRgn = EmfPlusRecordType.EmfRecordTypeSetMetaRgn;
pub const EmfRecordTypeExcludeClipRect = EmfPlusRecordType.EmfRecordTypeExcludeClipRect;
pub const EmfRecordTypeIntersectClipRect = EmfPlusRecordType.EmfRecordTypeIntersectClipRect;
pub const EmfRecordTypeScaleViewportExtEx = EmfPlusRecordType.EmfRecordTypeScaleViewportExtEx;
pub const EmfRecordTypeScaleWindowExtEx = EmfPlusRecordType.EmfRecordTypeScaleWindowExtEx;
pub const EmfRecordTypeSaveDC = EmfPlusRecordType.EmfRecordTypeSaveDC;
pub const EmfRecordTypeRestoreDC = EmfPlusRecordType.EmfRecordTypeRestoreDC;
pub const EmfRecordTypeSetWorldTransform = EmfPlusRecordType.EmfRecordTypeSetWorldTransform;
pub const EmfRecordTypeModifyWorldTransform = EmfPlusRecordType.EmfRecordTypeModifyWorldTransform;
pub const EmfRecordTypeSelectObject = EmfPlusRecordType.EmfRecordTypeSelectObject;
pub const EmfRecordTypeCreatePen = EmfPlusRecordType.EmfRecordTypeCreatePen;
pub const EmfRecordTypeCreateBrushIndirect = EmfPlusRecordType.EmfRecordTypeCreateBrushIndirect;
pub const EmfRecordTypeDeleteObject = EmfPlusRecordType.EmfRecordTypeDeleteObject;
pub const EmfRecordTypeAngleArc = EmfPlusRecordType.EmfRecordTypeAngleArc;
pub const EmfRecordTypeEllipse = EmfPlusRecordType.EmfRecordTypeEllipse;
pub const EmfRecordTypeRectangle = EmfPlusRecordType.EmfRecordTypeRectangle;
pub const EmfRecordTypeRoundRect = EmfPlusRecordType.EmfRecordTypeRoundRect;
pub const EmfRecordTypeArc = EmfPlusRecordType.EmfRecordTypeArc;
pub const EmfRecordTypeChord = EmfPlusRecordType.EmfRecordTypeChord;
pub const EmfRecordTypePie = EmfPlusRecordType.EmfRecordTypePie;
pub const EmfRecordTypeSelectPalette = EmfPlusRecordType.EmfRecordTypeSelectPalette;
pub const EmfRecordTypeCreatePalette = EmfPlusRecordType.EmfRecordTypeCreatePalette;
pub const EmfRecordTypeSetPaletteEntries = EmfPlusRecordType.EmfRecordTypeSetPaletteEntries;
pub const EmfRecordTypeResizePalette = EmfPlusRecordType.EmfRecordTypeResizePalette;
pub const EmfRecordTypeRealizePalette = EmfPlusRecordType.EmfRecordTypeRealizePalette;
pub const EmfRecordTypeExtFloodFill = EmfPlusRecordType.EmfRecordTypeExtFloodFill;
pub const EmfRecordTypeLineTo = EmfPlusRecordType.EmfRecordTypeLineTo;
pub const EmfRecordTypeArcTo = EmfPlusRecordType.EmfRecordTypeArcTo;
pub const EmfRecordTypePolyDraw = EmfPlusRecordType.EmfRecordTypePolyDraw;
pub const EmfRecordTypeSetArcDirection = EmfPlusRecordType.EmfRecordTypeSetArcDirection;
pub const EmfRecordTypeSetMiterLimit = EmfPlusRecordType.EmfRecordTypeSetMiterLimit;
pub const EmfRecordTypeBeginPath = EmfPlusRecordType.EmfRecordTypeBeginPath;
pub const EmfRecordTypeEndPath = EmfPlusRecordType.EmfRecordTypeEndPath;
pub const EmfRecordTypeCloseFigure = EmfPlusRecordType.EmfRecordTypeCloseFigure;
pub const EmfRecordTypeFillPath = EmfPlusRecordType.EmfRecordTypeFillPath;
pub const EmfRecordTypeStrokeAndFillPath = EmfPlusRecordType.EmfRecordTypeStrokeAndFillPath;
pub const EmfRecordTypeStrokePath = EmfPlusRecordType.EmfRecordTypeStrokePath;
pub const EmfRecordTypeFlattenPath = EmfPlusRecordType.EmfRecordTypeFlattenPath;
pub const EmfRecordTypeWidenPath = EmfPlusRecordType.EmfRecordTypeWidenPath;
pub const EmfRecordTypeSelectClipPath = EmfPlusRecordType.EmfRecordTypeSelectClipPath;
pub const EmfRecordTypeAbortPath = EmfPlusRecordType.EmfRecordTypeAbortPath;
pub const EmfRecordTypeReserved_069 = EmfPlusRecordType.EmfRecordTypeReserved_069;
pub const EmfRecordTypeGdiComment = EmfPlusRecordType.EmfRecordTypeGdiComment;
pub const EmfRecordTypeFillRgn = EmfPlusRecordType.EmfRecordTypeFillRgn;
pub const EmfRecordTypeFrameRgn = EmfPlusRecordType.EmfRecordTypeFrameRgn;
pub const EmfRecordTypeInvertRgn = EmfPlusRecordType.EmfRecordTypeInvertRgn;
pub const EmfRecordTypePaintRgn = EmfPlusRecordType.EmfRecordTypePaintRgn;
pub const EmfRecordTypeExtSelectClipRgn = EmfPlusRecordType.EmfRecordTypeExtSelectClipRgn;
pub const EmfRecordTypeBitBlt = EmfPlusRecordType.EmfRecordTypeBitBlt;
pub const EmfRecordTypeStretchBlt = EmfPlusRecordType.EmfRecordTypeStretchBlt;
pub const EmfRecordTypeMaskBlt = EmfPlusRecordType.EmfRecordTypeMaskBlt;
pub const EmfRecordTypePlgBlt = EmfPlusRecordType.EmfRecordTypePlgBlt;
pub const EmfRecordTypeSetDIBitsToDevice = EmfPlusRecordType.EmfRecordTypeSetDIBitsToDevice;
pub const EmfRecordTypeStretchDIBits = EmfPlusRecordType.EmfRecordTypeStretchDIBits;
pub const EmfRecordTypeExtCreateFontIndirect = EmfPlusRecordType.EmfRecordTypeExtCreateFontIndirect;
pub const EmfRecordTypeExtTextOutA = EmfPlusRecordType.EmfRecordTypeExtTextOutA;
pub const EmfRecordTypeExtTextOutW = EmfPlusRecordType.EmfRecordTypeExtTextOutW;
pub const EmfRecordTypePolyBezier16 = EmfPlusRecordType.EmfRecordTypePolyBezier16;
pub const EmfRecordTypePolygon16 = EmfPlusRecordType.EmfRecordTypePolygon16;
pub const EmfRecordTypePolyline16 = EmfPlusRecordType.EmfRecordTypePolyline16;
pub const EmfRecordTypePolyBezierTo16 = EmfPlusRecordType.EmfRecordTypePolyBezierTo16;
pub const EmfRecordTypePolylineTo16 = EmfPlusRecordType.EmfRecordTypePolylineTo16;
pub const EmfRecordTypePolyPolyline16 = EmfPlusRecordType.EmfRecordTypePolyPolyline16;
pub const EmfRecordTypePolyPolygon16 = EmfPlusRecordType.EmfRecordTypePolyPolygon16;
pub const EmfRecordTypePolyDraw16 = EmfPlusRecordType.EmfRecordTypePolyDraw16;
pub const EmfRecordTypeCreateMonoBrush = EmfPlusRecordType.EmfRecordTypeCreateMonoBrush;
pub const EmfRecordTypeCreateDIBPatternBrushPt = EmfPlusRecordType.EmfRecordTypeCreateDIBPatternBrushPt;
pub const EmfRecordTypeExtCreatePen = EmfPlusRecordType.EmfRecordTypeExtCreatePen;
pub const EmfRecordTypePolyTextOutA = EmfPlusRecordType.EmfRecordTypePolyTextOutA;
pub const EmfRecordTypePolyTextOutW = EmfPlusRecordType.EmfRecordTypePolyTextOutW;
pub const EmfRecordTypeSetICMMode = EmfPlusRecordType.EmfRecordTypeSetICMMode;
pub const EmfRecordTypeCreateColorSpace = EmfPlusRecordType.EmfRecordTypeCreateColorSpace;
pub const EmfRecordTypeSetColorSpace = EmfPlusRecordType.EmfRecordTypeSetColorSpace;
pub const EmfRecordTypeDeleteColorSpace = EmfPlusRecordType.EmfRecordTypeDeleteColorSpace;
pub const EmfRecordTypeGLSRecord = EmfPlusRecordType.EmfRecordTypeGLSRecord;
pub const EmfRecordTypeGLSBoundedRecord = EmfPlusRecordType.EmfRecordTypeGLSBoundedRecord;
pub const EmfRecordTypePixelFormat = EmfPlusRecordType.EmfRecordTypePixelFormat;
pub const EmfRecordTypeDrawEscape = EmfPlusRecordType.EmfRecordTypeDrawEscape;
pub const EmfRecordTypeExtEscape = EmfPlusRecordType.EmfRecordTypeExtEscape;
pub const EmfRecordTypeStartDoc = EmfPlusRecordType.EmfRecordTypeStartDoc;
pub const EmfRecordTypeSmallTextOut = EmfPlusRecordType.EmfRecordTypeSmallTextOut;
pub const EmfRecordTypeForceUFIMapping = EmfPlusRecordType.EmfRecordTypeForceUFIMapping;
pub const EmfRecordTypeNamedEscape = EmfPlusRecordType.EmfRecordTypeNamedEscape;
pub const EmfRecordTypeColorCorrectPalette = EmfPlusRecordType.EmfRecordTypeColorCorrectPalette;
pub const EmfRecordTypeSetICMProfileA = EmfPlusRecordType.EmfRecordTypeSetICMProfileA;
pub const EmfRecordTypeSetICMProfileW = EmfPlusRecordType.EmfRecordTypeSetICMProfileW;
pub const EmfRecordTypeAlphaBlend = EmfPlusRecordType.EmfRecordTypeAlphaBlend;
pub const EmfRecordTypeSetLayout = EmfPlusRecordType.EmfRecordTypeSetLayout;
pub const EmfRecordTypeTransparentBlt = EmfPlusRecordType.EmfRecordTypeTransparentBlt;
pub const EmfRecordTypeReserved_117 = EmfPlusRecordType.EmfRecordTypeReserved_117;
pub const EmfRecordTypeGradientFill = EmfPlusRecordType.EmfRecordTypeGradientFill;
pub const EmfRecordTypeSetLinkedUFIs = EmfPlusRecordType.EmfRecordTypeSetLinkedUFIs;
pub const EmfRecordTypeSetTextJustification = EmfPlusRecordType.EmfRecordTypeSetTextJustification;
pub const EmfRecordTypeColorMatchToTargetW = EmfPlusRecordType.EmfRecordTypeColorMatchToTargetW;
pub const EmfRecordTypeCreateColorSpaceW = EmfPlusRecordType.EmfRecordTypeCreateColorSpaceW;
pub const EmfRecordTypeMax = EmfPlusRecordType.EmfRecordTypeCreateColorSpaceW;
pub const EmfRecordTypeMin = EmfPlusRecordType.EmfRecordTypeHeader;
pub const EmfPlusRecordTypeInvalid = EmfPlusRecordType.EmfPlusRecordTypeInvalid;
pub const EmfPlusRecordTypeHeader = EmfPlusRecordType.EmfPlusRecordTypeHeader;
pub const EmfPlusRecordTypeEndOfFile = EmfPlusRecordType.EmfPlusRecordTypeEndOfFile;
pub const EmfPlusRecordTypeComment = EmfPlusRecordType.EmfPlusRecordTypeComment;
pub const EmfPlusRecordTypeGetDC = EmfPlusRecordType.EmfPlusRecordTypeGetDC;
pub const EmfPlusRecordTypeMultiFormatStart = EmfPlusRecordType.EmfPlusRecordTypeMultiFormatStart;
pub const EmfPlusRecordTypeMultiFormatSection = EmfPlusRecordType.EmfPlusRecordTypeMultiFormatSection;
pub const EmfPlusRecordTypeMultiFormatEnd = EmfPlusRecordType.EmfPlusRecordTypeMultiFormatEnd;
pub const EmfPlusRecordTypeObject = EmfPlusRecordType.EmfPlusRecordTypeObject;
pub const EmfPlusRecordTypeClear = EmfPlusRecordType.EmfPlusRecordTypeClear;
pub const EmfPlusRecordTypeFillRects = EmfPlusRecordType.EmfPlusRecordTypeFillRects;
pub const EmfPlusRecordTypeDrawRects = EmfPlusRecordType.EmfPlusRecordTypeDrawRects;
pub const EmfPlusRecordTypeFillPolygon = EmfPlusRecordType.EmfPlusRecordTypeFillPolygon;
pub const EmfPlusRecordTypeDrawLines = EmfPlusRecordType.EmfPlusRecordTypeDrawLines;
pub const EmfPlusRecordTypeFillEllipse = EmfPlusRecordType.EmfPlusRecordTypeFillEllipse;
pub const EmfPlusRecordTypeDrawEllipse = EmfPlusRecordType.EmfPlusRecordTypeDrawEllipse;
pub const EmfPlusRecordTypeFillPie = EmfPlusRecordType.EmfPlusRecordTypeFillPie;
pub const EmfPlusRecordTypeDrawPie = EmfPlusRecordType.EmfPlusRecordTypeDrawPie;
pub const EmfPlusRecordTypeDrawArc = EmfPlusRecordType.EmfPlusRecordTypeDrawArc;
pub const EmfPlusRecordTypeFillRegion = EmfPlusRecordType.EmfPlusRecordTypeFillRegion;
pub const EmfPlusRecordTypeFillPath = EmfPlusRecordType.EmfPlusRecordTypeFillPath;
pub const EmfPlusRecordTypeDrawPath = EmfPlusRecordType.EmfPlusRecordTypeDrawPath;
pub const EmfPlusRecordTypeFillClosedCurve = EmfPlusRecordType.EmfPlusRecordTypeFillClosedCurve;
pub const EmfPlusRecordTypeDrawClosedCurve = EmfPlusRecordType.EmfPlusRecordTypeDrawClosedCurve;
pub const EmfPlusRecordTypeDrawCurve = EmfPlusRecordType.EmfPlusRecordTypeDrawCurve;
pub const EmfPlusRecordTypeDrawBeziers = EmfPlusRecordType.EmfPlusRecordTypeDrawBeziers;
pub const EmfPlusRecordTypeDrawImage = EmfPlusRecordType.EmfPlusRecordTypeDrawImage;
pub const EmfPlusRecordTypeDrawImagePoints = EmfPlusRecordType.EmfPlusRecordTypeDrawImagePoints;
pub const EmfPlusRecordTypeDrawString = EmfPlusRecordType.EmfPlusRecordTypeDrawString;
pub const EmfPlusRecordTypeSetRenderingOrigin = EmfPlusRecordType.EmfPlusRecordTypeSetRenderingOrigin;
pub const EmfPlusRecordTypeSetAntiAliasMode = EmfPlusRecordType.EmfPlusRecordTypeSetAntiAliasMode;
pub const EmfPlusRecordTypeSetTextRenderingHint = EmfPlusRecordType.EmfPlusRecordTypeSetTextRenderingHint;
pub const EmfPlusRecordTypeSetTextContrast = EmfPlusRecordType.EmfPlusRecordTypeSetTextContrast;
pub const EmfPlusRecordTypeSetInterpolationMode = EmfPlusRecordType.EmfPlusRecordTypeSetInterpolationMode;
pub const EmfPlusRecordTypeSetPixelOffsetMode = EmfPlusRecordType.EmfPlusRecordTypeSetPixelOffsetMode;
pub const EmfPlusRecordTypeSetCompositingMode = EmfPlusRecordType.EmfPlusRecordTypeSetCompositingMode;
pub const EmfPlusRecordTypeSetCompositingQuality = EmfPlusRecordType.EmfPlusRecordTypeSetCompositingQuality;
pub const EmfPlusRecordTypeSave = EmfPlusRecordType.EmfPlusRecordTypeSave;
pub const EmfPlusRecordTypeRestore = EmfPlusRecordType.EmfPlusRecordTypeRestore;
pub const EmfPlusRecordTypeBeginContainer = EmfPlusRecordType.EmfPlusRecordTypeBeginContainer;
pub const EmfPlusRecordTypeBeginContainerNoParams = EmfPlusRecordType.EmfPlusRecordTypeBeginContainerNoParams;
pub const EmfPlusRecordTypeEndContainer = EmfPlusRecordType.EmfPlusRecordTypeEndContainer;
pub const EmfPlusRecordTypeSetWorldTransform = EmfPlusRecordType.EmfPlusRecordTypeSetWorldTransform;
pub const EmfPlusRecordTypeResetWorldTransform = EmfPlusRecordType.EmfPlusRecordTypeResetWorldTransform;
pub const EmfPlusRecordTypeMultiplyWorldTransform = EmfPlusRecordType.EmfPlusRecordTypeMultiplyWorldTransform;
pub const EmfPlusRecordTypeTranslateWorldTransform = EmfPlusRecordType.EmfPlusRecordTypeTranslateWorldTransform;
pub const EmfPlusRecordTypeScaleWorldTransform = EmfPlusRecordType.EmfPlusRecordTypeScaleWorldTransform;
pub const EmfPlusRecordTypeRotateWorldTransform = EmfPlusRecordType.EmfPlusRecordTypeRotateWorldTransform;
pub const EmfPlusRecordTypeSetPageTransform = EmfPlusRecordType.EmfPlusRecordTypeSetPageTransform;
pub const EmfPlusRecordTypeResetClip = EmfPlusRecordType.EmfPlusRecordTypeResetClip;
pub const EmfPlusRecordTypeSetClipRect = EmfPlusRecordType.EmfPlusRecordTypeSetClipRect;
pub const EmfPlusRecordTypeSetClipPath = EmfPlusRecordType.EmfPlusRecordTypeSetClipPath;
pub const EmfPlusRecordTypeSetClipRegion = EmfPlusRecordType.EmfPlusRecordTypeSetClipRegion;
pub const EmfPlusRecordTypeOffsetClip = EmfPlusRecordType.EmfPlusRecordTypeOffsetClip;
pub const EmfPlusRecordTypeDrawDriverString = EmfPlusRecordType.EmfPlusRecordTypeDrawDriverString;
pub const EmfPlusRecordTypeStrokeFillPath = EmfPlusRecordType.EmfPlusRecordTypeStrokeFillPath;
pub const EmfPlusRecordTypeSerializableObject = EmfPlusRecordType.EmfPlusRecordTypeSerializableObject;
pub const EmfPlusRecordTypeSetTSGraphics = EmfPlusRecordType.EmfPlusRecordTypeSetTSGraphics;
pub const EmfPlusRecordTypeSetTSClip = EmfPlusRecordType.EmfPlusRecordTypeSetTSClip;
pub const EmfPlusRecordTotal = EmfPlusRecordType.EmfPlusRecordTotal;
pub const EmfPlusRecordTypeMax = EmfPlusRecordType.EmfPlusRecordTypeSetTSClip;
pub const EmfPlusRecordTypeMin = EmfPlusRecordType.EmfPlusRecordTypeHeader;

pub const StringFormatFlags = enum(i32) {
    DirectionRightToLeft = 1,
    DirectionVertical = 2,
    NoFitBlackBox = 4,
    DisplayFormatControl = 32,
    NoFontFallback = 1024,
    MeasureTrailingSpaces = 2048,
    NoWrap = 4096,
    LineLimit = 8192,
    NoClip = 16384,
    BypassGDI = -2147483648,
};
pub const StringFormatFlagsDirectionRightToLeft = StringFormatFlags.DirectionRightToLeft;
pub const StringFormatFlagsDirectionVertical = StringFormatFlags.DirectionVertical;
pub const StringFormatFlagsNoFitBlackBox = StringFormatFlags.NoFitBlackBox;
pub const StringFormatFlagsDisplayFormatControl = StringFormatFlags.DisplayFormatControl;
pub const StringFormatFlagsNoFontFallback = StringFormatFlags.NoFontFallback;
pub const StringFormatFlagsMeasureTrailingSpaces = StringFormatFlags.MeasureTrailingSpaces;
pub const StringFormatFlagsNoWrap = StringFormatFlags.NoWrap;
pub const StringFormatFlagsLineLimit = StringFormatFlags.LineLimit;
pub const StringFormatFlagsNoClip = StringFormatFlags.NoClip;
pub const StringFormatFlagsBypassGDI = StringFormatFlags.BypassGDI;

pub const StringTrimming = enum(i32) {
    None = 0,
    Character = 1,
    Word = 2,
    EllipsisCharacter = 3,
    EllipsisWord = 4,
    EllipsisPath = 5,
};
pub const StringTrimmingNone = StringTrimming.None;
pub const StringTrimmingCharacter = StringTrimming.Character;
pub const StringTrimmingWord = StringTrimming.Word;
pub const StringTrimmingEllipsisCharacter = StringTrimming.EllipsisCharacter;
pub const StringTrimmingEllipsisWord = StringTrimming.EllipsisWord;
pub const StringTrimmingEllipsisPath = StringTrimming.EllipsisPath;

pub const StringDigitSubstitute = enum(i32) {
    User = 0,
    None = 1,
    National = 2,
    Traditional = 3,
};
pub const StringDigitSubstituteUser = StringDigitSubstitute.User;
pub const StringDigitSubstituteNone = StringDigitSubstitute.None;
pub const StringDigitSubstituteNational = StringDigitSubstitute.National;
pub const StringDigitSubstituteTraditional = StringDigitSubstitute.Traditional;

pub const HotkeyPrefix = enum(i32) {
    None = 0,
    Show = 1,
    Hide = 2,
};
pub const HotkeyPrefixNone = HotkeyPrefix.None;
pub const HotkeyPrefixShow = HotkeyPrefix.Show;
pub const HotkeyPrefixHide = HotkeyPrefix.Hide;

pub const StringAlignment = enum(i32) {
    Near = 0,
    Center = 1,
    Far = 2,
};
pub const StringAlignmentNear = StringAlignment.Near;
pub const StringAlignmentCenter = StringAlignment.Center;
pub const StringAlignmentFar = StringAlignment.Far;

pub const DriverStringOptions = enum(i32) {
    CmapLookup = 1,
    Vertical = 2,
    RealizedAdvance = 4,
    LimitSubpixel = 8,
};
pub const DriverStringOptionsCmapLookup = DriverStringOptions.CmapLookup;
pub const DriverStringOptionsVertical = DriverStringOptions.Vertical;
pub const DriverStringOptionsRealizedAdvance = DriverStringOptions.RealizedAdvance;
pub const DriverStringOptionsLimitSubpixel = DriverStringOptions.LimitSubpixel;

pub const FlushIntention = enum(i32) {
    Flush = 0,
    Sync = 1,
};
pub const FlushIntentionFlush = FlushIntention.Flush;
pub const FlushIntentionSync = FlushIntention.Sync;

pub const EncoderParameterValueType = enum(i32) {
    Byte = 1,
    ASCII = 2,
    Short = 3,
    Long = 4,
    Rational = 5,
    LongRange = 6,
    Undefined = 7,
    RationalRange = 8,
    Pointer = 9,
};
pub const EncoderParameterValueTypeByte = EncoderParameterValueType.Byte;
pub const EncoderParameterValueTypeASCII = EncoderParameterValueType.ASCII;
pub const EncoderParameterValueTypeShort = EncoderParameterValueType.Short;
pub const EncoderParameterValueTypeLong = EncoderParameterValueType.Long;
pub const EncoderParameterValueTypeRational = EncoderParameterValueType.Rational;
pub const EncoderParameterValueTypeLongRange = EncoderParameterValueType.LongRange;
pub const EncoderParameterValueTypeUndefined = EncoderParameterValueType.Undefined;
pub const EncoderParameterValueTypeRationalRange = EncoderParameterValueType.RationalRange;
pub const EncoderParameterValueTypePointer = EncoderParameterValueType.Pointer;

pub const EncoderValue = enum(i32) {
    ColorTypeCMYK = 0,
    ColorTypeYCCK = 1,
    CompressionLZW = 2,
    CompressionCCITT3 = 3,
    CompressionCCITT4 = 4,
    CompressionRle = 5,
    CompressionNone = 6,
    ScanMethodInterlaced = 7,
    ScanMethodNonInterlaced = 8,
    VersionGif87 = 9,
    VersionGif89 = 10,
    RenderProgressive = 11,
    RenderNonProgressive = 12,
    TransformRotate90 = 13,
    TransformRotate180 = 14,
    TransformRotate270 = 15,
    TransformFlipHorizontal = 16,
    TransformFlipVertical = 17,
    MultiFrame = 18,
    LastFrame = 19,
    Flush = 20,
    FrameDimensionTime = 21,
    FrameDimensionResolution = 22,
    FrameDimensionPage = 23,
    ColorTypeGray = 24,
    ColorTypeRGB = 25,
};
pub const EncoderValueColorTypeCMYK = EncoderValue.ColorTypeCMYK;
pub const EncoderValueColorTypeYCCK = EncoderValue.ColorTypeYCCK;
pub const EncoderValueCompressionLZW = EncoderValue.CompressionLZW;
pub const EncoderValueCompressionCCITT3 = EncoderValue.CompressionCCITT3;
pub const EncoderValueCompressionCCITT4 = EncoderValue.CompressionCCITT4;
pub const EncoderValueCompressionRle = EncoderValue.CompressionRle;
pub const EncoderValueCompressionNone = EncoderValue.CompressionNone;
pub const EncoderValueScanMethodInterlaced = EncoderValue.ScanMethodInterlaced;
pub const EncoderValueScanMethodNonInterlaced = EncoderValue.ScanMethodNonInterlaced;
pub const EncoderValueVersionGif87 = EncoderValue.VersionGif87;
pub const EncoderValueVersionGif89 = EncoderValue.VersionGif89;
pub const EncoderValueRenderProgressive = EncoderValue.RenderProgressive;
pub const EncoderValueRenderNonProgressive = EncoderValue.RenderNonProgressive;
pub const EncoderValueTransformRotate90 = EncoderValue.TransformRotate90;
pub const EncoderValueTransformRotate180 = EncoderValue.TransformRotate180;
pub const EncoderValueTransformRotate270 = EncoderValue.TransformRotate270;
pub const EncoderValueTransformFlipHorizontal = EncoderValue.TransformFlipHorizontal;
pub const EncoderValueTransformFlipVertical = EncoderValue.TransformFlipVertical;
pub const EncoderValueMultiFrame = EncoderValue.MultiFrame;
pub const EncoderValueLastFrame = EncoderValue.LastFrame;
pub const EncoderValueFlush = EncoderValue.Flush;
pub const EncoderValueFrameDimensionTime = EncoderValue.FrameDimensionTime;
pub const EncoderValueFrameDimensionResolution = EncoderValue.FrameDimensionResolution;
pub const EncoderValueFrameDimensionPage = EncoderValue.FrameDimensionPage;
pub const EncoderValueColorTypeGray = EncoderValue.ColorTypeGray;
pub const EncoderValueColorTypeRGB = EncoderValue.ColorTypeRGB;

pub const EmfToWmfBitsFlags = enum(i32) {
    Default = 0,
    EmbedEmf = 1,
    IncludePlaceable = 2,
    NoXORClip = 4,
};
pub const EmfToWmfBitsFlagsDefault = EmfToWmfBitsFlags.Default;
pub const EmfToWmfBitsFlagsEmbedEmf = EmfToWmfBitsFlags.EmbedEmf;
pub const EmfToWmfBitsFlagsIncludePlaceable = EmfToWmfBitsFlags.IncludePlaceable;
pub const EmfToWmfBitsFlagsNoXORClip = EmfToWmfBitsFlags.NoXORClip;

pub const ConvertToEmfPlusFlags = enum(i32) {
    Default = 0,
    RopUsed = 1,
    Text = 2,
    InvalidRecord = 4,
};
pub const ConvertToEmfPlusFlagsDefault = ConvertToEmfPlusFlags.Default;
pub const ConvertToEmfPlusFlagsRopUsed = ConvertToEmfPlusFlags.RopUsed;
pub const ConvertToEmfPlusFlagsText = ConvertToEmfPlusFlags.Text;
pub const ConvertToEmfPlusFlagsInvalidRecord = ConvertToEmfPlusFlags.InvalidRecord;

pub const GpTestControlEnum = enum(i32) {
    ForceBilinear = 0,
    NoICM = 1,
    GetBuildNumber = 2,
};
pub const TestControlForceBilinear = GpTestControlEnum.ForceBilinear;
pub const TestControlNoICM = GpTestControlEnum.NoICM;
pub const TestControlGetBuildNumber = GpTestControlEnum.GetBuildNumber;

pub const ImageAbort = switch (@import("builtin").zig_backend) {
    .stage1 => fn(
        param0: ?*anyopaque,
    ) callconv(@import("std").os.windows.WINAPI) BOOL,
    else => *const fn(
        param0: ?*anyopaque,
    ) callconv(@import("std").os.windows.WINAPI) BOOL,
} ;

pub const DrawImageAbort = switch (@import("builtin").zig_backend) {
    .stage1 => fn(
    ) callconv(@import("std").os.windows.WINAPI) BOOL,
    else => *const fn(
    ) callconv(@import("std").os.windows.WINAPI) BOOL,
} ;

pub const GetThumbnailImageAbort = switch (@import("builtin").zig_backend) {
    .stage1 => fn(
    ) callconv(@import("std").os.windows.WINAPI) BOOL,
    else => *const fn(
    ) callconv(@import("std").os.windows.WINAPI) BOOL,
} ;

pub const EnumerateMetafileProc = switch (@import("builtin").zig_backend) {
    .stage1 => fn(
        param0: EmfPlusRecordType,
        param1: u32,
        param2: u32,
        param3: ?*const u8,
        param4: ?*anyopaque,
    ) callconv(@import("std").os.windows.WINAPI) BOOL,
    else => *const fn(
        param0: EmfPlusRecordType,
        param1: u32,
        param2: u32,
        param3: ?*const u8,
        param4: ?*anyopaque,
    ) callconv(@import("std").os.windows.WINAPI) BOOL,
} ;

pub const GdiplusAbort = extern struct {
    pub const VTable = extern struct {
        Abort: switch (@import("builtin").zig_backend) {
            .stage1 => fn(
                self: *const GdiplusAbort,
            ) callconv(@import("std").os.windows.WINAPI) HRESULT,
            else => *const fn(
                self: *const GdiplusAbort,
            ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        },
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn GdiplusAbort_Abort(self: *const T) callconv(.Inline) HRESULT {
            return @as(*const GdiplusAbort.VTable, @ptrCast(self.vtable)).Abort(@as(*const GdiplusAbort, @ptrCast(self)));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const Status = enum(i32) {
    Ok = 0,
    GenericError = 1,
    InvalidParameter = 2,
    OutOfMemory = 3,
    ObjectBusy = 4,
    InsufficientBuffer = 5,
    NotImplemented = 6,
    Win32Error = 7,
    WrongState = 8,
    Aborted = 9,
    FileNotFound = 10,
    ValueOverflow = 11,
    AccessDenied = 12,
    UnknownImageFormat = 13,
    FontFamilyNotFound = 14,
    FontStyleNotFound = 15,
    NotTrueTypeFont = 16,
    UnsupportedGdiplusVersion = 17,
    GdiplusNotInitialized = 18,
    PropertyNotFound = 19,
    PropertyNotSupported = 20,
    ProfileNotFound = 21,
};
pub const Ok = Status.Ok;
pub const GenericError = Status.GenericError;
pub const InvalidParameter = Status.InvalidParameter;
pub const OutOfMemory = Status.OutOfMemory;
pub const ObjectBusy = Status.ObjectBusy;
pub const InsufficientBuffer = Status.InsufficientBuffer;
pub const NotImplemented = Status.NotImplemented;
pub const Win32Error = Status.Win32Error;
pub const WrongState = Status.WrongState;
pub const Aborted = Status.Aborted;
pub const FileNotFound = Status.FileNotFound;
pub const ValueOverflow = Status.ValueOverflow;
pub const AccessDenied = Status.AccessDenied;
pub const UnknownImageFormat = Status.UnknownImageFormat;
pub const FontFamilyNotFound = Status.FontFamilyNotFound;
pub const FontStyleNotFound = Status.FontStyleNotFound;
pub const NotTrueTypeFont = Status.NotTrueTypeFont;
pub const UnsupportedGdiplusVersion = Status.UnsupportedGdiplusVersion;
pub const GdiplusNotInitialized = Status.GdiplusNotInitialized;
pub const PropertyNotFound = Status.PropertyNotFound;
pub const PropertyNotSupported = Status.PropertyNotSupported;
pub const ProfileNotFound = Status.ProfileNotFound;

pub const SizeF = extern struct {
    Width: f32,
    Height: f32,
};

pub const Size = extern struct {
    Width: i32,
    Height: i32,
};

pub const PointF = extern struct {
    X: f32,
    Y: f32,
};

pub const Point = extern struct {
    X: i32,
    Y: i32,
};

pub const RectF = extern struct {
    X: f32,
    Y: f32,
    Width: f32,
    Height: f32,
};

pub const Rect = extern struct {
    X: i32,
    Y: i32,
    Width: i32,
    Height: i32,
};

pub const CharacterRange = extern struct {
    First: i32,
    Length: i32,
};

pub const DebugEventLevel = enum(i32) {
    Fatal = 0,
    Warning = 1,
};
pub const DebugEventLevelFatal = DebugEventLevel.Fatal;
pub const DebugEventLevelWarning = DebugEventLevel.Warning;

pub const DebugEventProc = switch (@import("builtin").zig_backend) {
    .stage1 => fn(
        level: DebugEventLevel,
        message: ?PSTR,
    ) callconv(@import("std").os.windows.WINAPI) void,
    else => *const fn(
        level: DebugEventLevel,
        message: ?PSTR,
    ) callconv(@import("std").os.windows.WINAPI) void,
} ;

pub const NotificationHookProc = switch (@import("builtin").zig_backend) {
    .stage1 => fn(
        token: ?*usize,
    ) callconv(@import("std").os.windows.WINAPI) Status,
    else => *const fn(
        token: ?*usize,
    ) callconv(@import("std").os.windows.WINAPI) Status,
} ;

pub const NotificationUnhookProc = switch (@import("builtin").zig_backend) {
    .stage1 => fn(
        token: usize,
    ) callconv(@import("std").os.windows.WINAPI) void,
    else => *const fn(
        token: usize,
    ) callconv(@import("std").os.windows.WINAPI) void,
} ;

pub const GdiplusStartupInput = extern struct {
    GdiplusVersion: u32,
    DebugEventCallback: isize,
    SuppressBackgroundThread: BOOL,
    SuppressExternalCodecs: BOOL,
};

pub const GdiplusStartupInputEx = extern struct {
    Base: GdiplusStartupInput,
    StartupParameters: i32,
};

pub const GdiplusStartupParams = enum(i32) {
    Default = 0,
    NoSetRound = 1,
    SetPSValue = 2,
    TransparencyMask = -16777216,
};
pub const GdiplusStartupDefault = GdiplusStartupParams.Default;
pub const GdiplusStartupNoSetRound = GdiplusStartupParams.NoSetRound;
pub const GdiplusStartupSetPSValue = GdiplusStartupParams.SetPSValue;
pub const GdiplusStartupTransparencyMask = GdiplusStartupParams.TransparencyMask;

pub const GdiplusStartupOutput = extern struct {
    NotificationHook: isize,
    NotificationUnhook: isize,
};

pub const PaletteType = enum(i32) {
    Custom = 0,
    Optimal = 1,
    FixedBW = 2,
    FixedHalftone8 = 3,
    FixedHalftone27 = 4,
    FixedHalftone64 = 5,
    FixedHalftone125 = 6,
    FixedHalftone216 = 7,
    FixedHalftone252 = 8,
    FixedHalftone256 = 9,
};
pub const PaletteTypeCustom = PaletteType.Custom;
pub const PaletteTypeOptimal = PaletteType.Optimal;
pub const PaletteTypeFixedBW = PaletteType.FixedBW;
pub const PaletteTypeFixedHalftone8 = PaletteType.FixedHalftone8;
pub const PaletteTypeFixedHalftone27 = PaletteType.FixedHalftone27;
pub const PaletteTypeFixedHalftone64 = PaletteType.FixedHalftone64;
pub const PaletteTypeFixedHalftone125 = PaletteType.FixedHalftone125;
pub const PaletteTypeFixedHalftone216 = PaletteType.FixedHalftone216;
pub const PaletteTypeFixedHalftone252 = PaletteType.FixedHalftone252;
pub const PaletteTypeFixedHalftone256 = PaletteType.FixedHalftone256;

pub const DitherType = enum(i32) {
    None = 0,
    Solid = 1,
    Ordered4x4 = 2,
    Ordered8x8 = 3,
    Ordered16x16 = 4,
    Spiral4x4 = 5,
    Spiral8x8 = 6,
    DualSpiral4x4 = 7,
    DualSpiral8x8 = 8,
    ErrorDiffusion = 9,
    Max = 10,
};
pub const DitherTypeNone = DitherType.None;
pub const DitherTypeSolid = DitherType.Solid;
pub const DitherTypeOrdered4x4 = DitherType.Ordered4x4;
pub const DitherTypeOrdered8x8 = DitherType.Ordered8x8;
pub const DitherTypeOrdered16x16 = DitherType.Ordered16x16;
pub const DitherTypeSpiral4x4 = DitherType.Spiral4x4;
pub const DitherTypeSpiral8x8 = DitherType.Spiral8x8;
pub const DitherTypeDualSpiral4x4 = DitherType.DualSpiral4x4;
pub const DitherTypeDualSpiral8x8 = DitherType.DualSpiral8x8;
pub const DitherTypeErrorDiffusion = DitherType.ErrorDiffusion;
pub const DitherTypeMax = DitherType.Max;

pub const PaletteFlags = enum(i32) {
    HasAlpha = 1,
    GrayScale = 2,
    Halftone = 4,
};
pub const PaletteFlagsHasAlpha = PaletteFlags.HasAlpha;
pub const PaletteFlagsGrayScale = PaletteFlags.GrayScale;
pub const PaletteFlagsHalftone = PaletteFlags.Halftone;

pub const ColorPalette = extern struct {
    Flags: u32,
    Count: u32,
    Entries: [1]u32,
};

pub const ColorMode = enum(i32) {
    @"32" = 0,
    @"64" = 1,
};
pub const ColorModeARGB32 = ColorMode.@"32";
pub const ColorModeARGB64 = ColorMode.@"64";

pub const ColorChannelFlags = enum(i32) {
    C = 0,
    M = 1,
    Y = 2,
    K = 3,
    Last = 4,
};
pub const ColorChannelFlagsC = ColorChannelFlags.C;
pub const ColorChannelFlagsM = ColorChannelFlags.M;
pub const ColorChannelFlagsY = ColorChannelFlags.Y;
pub const ColorChannelFlagsK = ColorChannelFlags.K;
pub const ColorChannelFlagsLast = ColorChannelFlags.Last;

pub const Color = extern struct {
    Argb: u32,
};

pub const ENHMETAHEADER3 = extern struct {
    iType: u32,
    nSize: u32,
    rclBounds: RECTL,
    rclFrame: RECTL,
    dSignature: u32,
    nVersion: u32,
    nBytes: u32,
    nRecords: u32,
    nHandles: u16,
    sReserved: u16,
    nDescription: u32,
    offDescription: u32,
    nPalEntries: u32,
    szlDevice: SIZE,
    szlMillimeters: SIZE,
};

pub const PWMFRect16 = extern struct {
    Left: i16,
    Top: i16,
    Right: i16,
    Bottom: i16,
};

pub const WmfPlaceableFileHeader = extern struct {
    Key: u32 align(2),
    Hmf: i16 align(2),
    BoundingBox: PWMFRect16 align(2),
    Inch: i16 align(2),
    Reserved: u32 align(2),
    Checksum: i16 align(2),
};

pub const MetafileHeader = extern struct {
    Type: MetafileType,
    Size: u32,
    Version: u32,
    EmfPlusFlags: u32,
    DpiX: f32,
    DpiY: f32,
    X: i32,
    Y: i32,
    Width: i32,
    Height: i32,
    Anonymous: extern union {
        WmfHeader: METAHEADER,
        EmfHeader: ENHMETAHEADER3,
    },
    EmfPlusHeaderSize: i32,
    LogicalDpiX: i32,
    LogicalDpiY: i32,
};

const IID_IImageBytes_Value = Guid.initString("025d1823-6c7d-447b-bbdb-a3cbc3dfa2fc");
pub const IID_IImageBytes = &IID_IImageBytes_Value;
pub const IImageBytes = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CountBytes: switch (@import("builtin").zig_backend) {
            .stage1 => fn(
                self: *const IImageBytes,
                pcb: ?*u32,
            ) callconv(@import("std").os.windows.WINAPI) HRESULT,
            else => *const fn(
                self: *const IImageBytes,
                pcb: ?*u32,
            ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        },
        LockBytes: switch (@import("builtin").zig_backend) {
            .stage1 => fn(
                self: *const IImageBytes,
                cb: u32,
                ulOffset: u32,
                ppvBytes: ?*const ?*anyopaque,
            ) callconv(@import("std").os.windows.WINAPI) HRESULT,
            else => *const fn(
                self: *const IImageBytes,
                cb: u32,
                ulOffset: u32,
                ppvBytes: ?*const ?*anyopaque,
            ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        },
        UnlockBytes: switch (@import("builtin").zig_backend) {
            .stage1 => fn(
                self: *const IImageBytes,
                pvBytes: ?*const anyopaque,
                cb: u32,
                ulOffset: u32,
            ) callconv(@import("std").os.windows.WINAPI) HRESULT,
            else => *const fn(
                self: *const IImageBytes,
                pvBytes: ?*const anyopaque,
                cb: u32,
                ulOffset: u32,
            ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        },
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IImageBytes_CountBytes(self: *const T, pcb: ?*u32) callconv(.Inline) HRESULT {
            return @as(*const IImageBytes.VTable, @ptrCast(self.vtable)).CountBytes(@as(*const IImageBytes, @ptrCast(self)), pcb);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IImageBytes_LockBytes(self: *const T, cb: u32, ulOffset: u32, ppvBytes: ?*const ?*anyopaque) callconv(.Inline) HRESULT {
            return @as(*const IImageBytes.VTable, @ptrCast(self.vtable)).LockBytes(@as(*const IImageBytes, @ptrCast(self)), cb, ulOffset, ppvBytes);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IImageBytes_UnlockBytes(self: *const T, pvBytes: ?*const anyopaque, cb: u32, ulOffset: u32) callconv(.Inline) HRESULT {
            return @as(*const IImageBytes.VTable, @ptrCast(self.vtable)).UnlockBytes(@as(*const IImageBytes, @ptrCast(self)), pvBytes, cb, ulOffset);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const ImageCodecInfo = extern struct {
    Clsid: Guid,
    FormatID: Guid,
    CodecName: ?[*:0]align(1) const u16,
    DllName: ?[*:0]align(1) const u16,
    FormatDescription: ?[*:0]align(1) const u16,
    FilenameExtension: ?[*:0]align(1) const u16,
    MimeType: ?[*:0]align(1) const u16,
    Flags: u32,
    Version: u32,
    SigCount: u32,
    SigSize: u32,
    SigPattern: ?*const u8,
    SigMask: ?*const u8,
};

pub const ImageCodecFlags = enum(i32) {
    Encoder = 1,
    Decoder = 2,
    SupportBitmap = 4,
    SupportVector = 8,
    SeekableEncode = 16,
    BlockingDecode = 32,
    Builtin = 65536,
    System = 131072,
    User = 262144,
};
pub const ImageCodecFlagsEncoder = ImageCodecFlags.Encoder;
pub const ImageCodecFlagsDecoder = ImageCodecFlags.Decoder;
pub const ImageCodecFlagsSupportBitmap = ImageCodecFlags.SupportBitmap;
pub const ImageCodecFlagsSupportVector = ImageCodecFlags.SupportVector;
pub const ImageCodecFlagsSeekableEncode = ImageCodecFlags.SeekableEncode;
pub const ImageCodecFlagsBlockingDecode = ImageCodecFlags.BlockingDecode;
pub const ImageCodecFlagsBuiltin = ImageCodecFlags.Builtin;
pub const ImageCodecFlagsSystem = ImageCodecFlags.System;
pub const ImageCodecFlagsUser = ImageCodecFlags.User;

pub const ImageLockMode = enum(i32) {
    Read = 1,
    Write = 2,
    UserInputBuf = 4,
};
pub const ImageLockModeRead = ImageLockMode.Read;
pub const ImageLockModeWrite = ImageLockMode.Write;
pub const ImageLockModeUserInputBuf = ImageLockMode.UserInputBuf;

pub const BitmapData = extern struct {
    Width: u32,
    Height: u32,
    Stride: i32,
    PixelFormat: i32,
    Scan0: ?*anyopaque,
    Reserved: usize,
};

pub const ImageFlags = enum(i32) {
    None = 0,
    Scalable = 1,
    HasAlpha = 2,
    HasTranslucent = 4,
    PartiallyScalable = 8,
    ColorSpaceRGB = 16,
    ColorSpaceCMYK = 32,
    ColorSpaceGRAY = 64,
    ColorSpaceYCBCR = 128,
    ColorSpaceYCCK = 256,
    HasRealDPI = 4096,
    HasRealPixelSize = 8192,
    ReadOnly = 65536,
    Caching = 131072,
};
pub const ImageFlagsNone = ImageFlags.None;
pub const ImageFlagsScalable = ImageFlags.Scalable;
pub const ImageFlagsHasAlpha = ImageFlags.HasAlpha;
pub const ImageFlagsHasTranslucent = ImageFlags.HasTranslucent;
pub const ImageFlagsPartiallyScalable = ImageFlags.PartiallyScalable;
pub const ImageFlagsColorSpaceRGB = ImageFlags.ColorSpaceRGB;
pub const ImageFlagsColorSpaceCMYK = ImageFlags.ColorSpaceCMYK;
pub const ImageFlagsColorSpaceGRAY = ImageFlags.ColorSpaceGRAY;
pub const ImageFlagsColorSpaceYCBCR = ImageFlags.ColorSpaceYCBCR;
pub const ImageFlagsColorSpaceYCCK = ImageFlags.ColorSpaceYCCK;
pub const ImageFlagsHasRealDPI = ImageFlags.HasRealDPI;
pub const ImageFlagsHasRealPixelSize = ImageFlags.HasRealPixelSize;
pub const ImageFlagsReadOnly = ImageFlags.ReadOnly;
pub const ImageFlagsCaching = ImageFlags.Caching;

pub const RotateFlipType = enum(i32) {
    NoneFlipNone = 0,
    @"90FlipNone" = 1,
    @"180FlipNone" = 2,
    @"270FlipNone" = 3,
    NoneFlipX = 4,
    @"90FlipX" = 5,
    @"180FlipX" = 6,
    @"270FlipX" = 7,
    // NoneFlipY = 6, this enum value conflicts with @"180FlipX"
    // @"90FlipY" = 7, this enum value conflicts with @"270FlipX"
    // @"180FlipY" = 4, this enum value conflicts with NoneFlipX
    // @"270FlipY" = 5, this enum value conflicts with @"90FlipX"
    // NoneFlipXY = 2, this enum value conflicts with @"180FlipNone"
    // @"90FlipXY" = 3, this enum value conflicts with @"270FlipNone"
    // @"180FlipXY" = 0, this enum value conflicts with NoneFlipNone
    // @"270FlipXY" = 1, this enum value conflicts with @"90FlipNone"
};
pub const RotateNoneFlipNone = RotateFlipType.NoneFlipNone;
pub const Rotate90FlipNone = RotateFlipType.@"90FlipNone";
pub const Rotate180FlipNone = RotateFlipType.@"180FlipNone";
pub const Rotate270FlipNone = RotateFlipType.@"270FlipNone";
pub const RotateNoneFlipX = RotateFlipType.NoneFlipX;
pub const Rotate90FlipX = RotateFlipType.@"90FlipX";
pub const Rotate180FlipX = RotateFlipType.@"180FlipX";
pub const Rotate270FlipX = RotateFlipType.@"270FlipX";
pub const RotateNoneFlipY = RotateFlipType.@"180FlipX";
pub const Rotate90FlipY = RotateFlipType.@"270FlipX";
pub const Rotate180FlipY = RotateFlipType.NoneFlipX;
pub const Rotate270FlipY = RotateFlipType.@"90FlipX";
pub const RotateNoneFlipXY = RotateFlipType.@"180FlipNone";
pub const Rotate90FlipXY = RotateFlipType.@"270FlipNone";
pub const Rotate180FlipXY = RotateFlipType.NoneFlipNone;
pub const Rotate270FlipXY = RotateFlipType.@"90FlipNone";

pub const EncoderParameter = extern struct {
    Guid: Guid,
    NumberOfValues: u32,
    Type: u32,
    Value: ?*anyopaque,
};

pub const EncoderParameters = extern struct {
    Count: u32,
    Parameter: [1]EncoderParameter,
};

pub const ItemDataPosition = enum(i32) {
    Header = 0,
    Palette = 1,
    Bits = 2,
};
pub const ItemDataPositionAfterHeader = ItemDataPosition.Header;
pub const ItemDataPositionAfterPalette = ItemDataPosition.Palette;
pub const ItemDataPositionAfterBits = ItemDataPosition.Bits;

pub const ImageItemData = extern struct {
    Size: u32,
    Position: u32,
    Desc: ?*anyopaque,
    DescSize: u32,
    Data: ?*anyopaque,
    DataSize: u32,
    Cookie: u32,
};

pub const PropertyItem = extern struct {
    id: u32,
    length: u32,
    type: u16,
    value: ?*anyopaque,
};

pub const HistogramFormat = enum(i32) {
    ARGB = 0,
    PARGB = 1,
    RGB = 2,
    Gray = 3,
    B = 4,
    G = 5,
    R = 6,
    A = 7,
};
pub const HistogramFormatARGB = HistogramFormat.ARGB;
pub const HistogramFormatPARGB = HistogramFormat.PARGB;
pub const HistogramFormatRGB = HistogramFormat.RGB;
pub const HistogramFormatGray = HistogramFormat.Gray;
pub const HistogramFormatB = HistogramFormat.B;
pub const HistogramFormatG = HistogramFormat.G;
pub const HistogramFormatR = HistogramFormat.R;
pub const HistogramFormatA = HistogramFormat.A;

pub const ColorMatrix = extern struct {
    m: [25]f32,
};

pub const ColorMatrixFlags = enum(i32) {
    Default = 0,
    SkipGrays = 1,
    AltGray = 2,
};
pub const ColorMatrixFlagsDefault = ColorMatrixFlags.Default;
pub const ColorMatrixFlagsSkipGrays = ColorMatrixFlags.SkipGrays;
pub const ColorMatrixFlagsAltGray = ColorMatrixFlags.AltGray;

pub const ColorAdjustType = enum(i32) {
    Default = 0,
    Bitmap = 1,
    Brush = 2,
    Pen = 3,
    Text = 4,
    Count = 5,
    Any = 6,
};
pub const ColorAdjustTypeDefault = ColorAdjustType.Default;
pub const ColorAdjustTypeBitmap = ColorAdjustType.Bitmap;
pub const ColorAdjustTypeBrush = ColorAdjustType.Brush;
pub const ColorAdjustTypePen = ColorAdjustType.Pen;
pub const ColorAdjustTypeText = ColorAdjustType.Text;
pub const ColorAdjustTypeCount = ColorAdjustType.Count;
pub const ColorAdjustTypeAny = ColorAdjustType.Any;

pub const ColorMap = extern struct {
    oldColor: Color,
    newColor: Color,
};

pub const SharpenParams = extern struct {
    radius: f32,
    amount: f32,
};

pub const BlurParams = extern struct {
    radius: f32,
    expandEdge: BOOL,
};

pub const BrightnessContrastParams = extern struct {
    brightnessLevel: i32,
    contrastLevel: i32,
};

pub const RedEyeCorrectionParams = extern struct {
    numberOfAreas: u32,
    areas: ?*RECT,
};

pub const HueSaturationLightnessParams = extern struct {
    hueLevel: i32,
    saturationLevel: i32,
    lightnessLevel: i32,
};

pub const TintParams = extern struct {
    hue: i32,
    amount: i32,
};

pub const LevelsParams = extern struct {
    highlight: i32,
    midtone: i32,
    shadow: i32,
};

pub const ColorBalanceParams = extern struct {
    cyanRed: i32,
    magentaGreen: i32,
    yellowBlue: i32,
};

pub const ColorLUTParams = extern struct {
    lutB: [256]u8,
    lutG: [256]u8,
    lutR: [256]u8,
    lutA: [256]u8,
};

pub const CurveAdjustments = enum(i32) {
    Exposure = 0,
    Density = 1,
    Contrast = 2,
    Highlight = 3,
    Shadow = 4,
    Midtone = 5,
    WhiteSaturation = 6,
    BlackSaturation = 7,
};
pub const AdjustExposure = CurveAdjustments.Exposure;
pub const AdjustDensity = CurveAdjustments.Density;
pub const AdjustContrast = CurveAdjustments.Contrast;
pub const AdjustHighlight = CurveAdjustments.Highlight;
pub const AdjustShadow = CurveAdjustments.Shadow;
pub const AdjustMidtone = CurveAdjustments.Midtone;
pub const AdjustWhiteSaturation = CurveAdjustments.WhiteSaturation;
pub const AdjustBlackSaturation = CurveAdjustments.BlackSaturation;

pub const CurveChannel = enum(i32) {
    All = 0,
    Red = 1,
    Green = 2,
    Blue = 3,
};
pub const CurveChannelAll = CurveChannel.All;
pub const CurveChannelRed = CurveChannel.Red;
pub const CurveChannelGreen = CurveChannel.Green;
pub const CurveChannelBlue = CurveChannel.Blue;

pub const ColorCurveParams = extern struct {
    adjustment: CurveAdjustments,
    channel: CurveChannel,
    adjustValue: i32,
};

pub const Effect = extern struct {
    lpVtbl: ?*?*anyopaque,
    nativeEffect: ?*CGpEffect,
    auxDataSize: i32,
    auxData: ?*anyopaque,
    useAuxData: BOOL,
};

pub const Blur = extern struct {
    Base: Effect,
};

pub const Sharpen = extern struct {
    Base: Effect,
};

pub const RedEyeCorrection = extern struct {
    Base: Effect,
};

pub const BrightnessContrast = extern struct {
    Base: Effect,
};

pub const HueSaturationLightness = extern struct {
    Base: Effect,
};

pub const Levels = extern struct {
    Base: Effect,
};

pub const Tint = extern struct {
    Base: Effect,
};

pub const ColorBalance = extern struct {
    Base: Effect,
};

pub const ColorMatrixEffect = extern struct {
    Base: Effect,
};

pub const ColorLUT = extern struct {
    Base: Effect,
};

pub const ColorCurve = extern struct {
    Base: Effect,
};


//--------------------------------------------------------------------------------
// Section: Functions (629)
//--------------------------------------------------------------------------------
pub extern "gdiplus" fn GdipAlloc(
    size: usize,
) callconv(@import("std").os.windows.WINAPI) ?*anyopaque;

pub extern "gdiplus" fn GdipFree(
    ptr: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "gdiplus" fn GdiplusStartup(
    token: ?*usize,
    input: ?*const GdiplusStartupInput,
    output: ?*GdiplusStartupOutput,
) callconv(@import("std").os.windows.WINAPI) Status;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "gdiplus" fn GdiplusShutdown(
    token: usize,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "gdiplus" fn GdipCreateEffect(
    guid: Guid,
    effect: ?*?*CGpEffect,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipDeleteEffect(
    effect: ?*CGpEffect,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetEffectParameterSize(
    effect: ?*CGpEffect,
    size: ?*u32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipSetEffectParameters(
    effect: ?*CGpEffect,
    params: ?*const anyopaque,
    size: u32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetEffectParameters(
    effect: ?*CGpEffect,
    size: ?*u32,
    params: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipCreatePath(
    brushMode: FillMode,
    path: ?*?*GpPath,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipCreatePath2(
    param0: ?*const PointF,
    param1: ?*const u8,
    param2: i32,
    param3: FillMode,
    path: ?*?*GpPath,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipCreatePath2I(
    param0: ?*const Point,
    param1: ?*const u8,
    param2: i32,
    param3: FillMode,
    path: ?*?*GpPath,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipClonePath(
    path: ?*GpPath,
    clonePath: ?*?*GpPath,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipDeletePath(
    path: ?*GpPath,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipResetPath(
    path: ?*GpPath,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetPointCount(
    path: ?*GpPath,
    count: ?*i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetPathTypes(
    path: ?*GpPath,
    // TODO: what to do with BytesParamIndex 2?
    types: ?*u8,
    count: i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetPathPoints(
    param0: ?*GpPath,
    points: ?*PointF,
    count: i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetPathPointsI(
    param0: ?*GpPath,
    points: ?*Point,
    count: i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetPathFillMode(
    path: ?*GpPath,
    fillmode: ?*FillMode,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipSetPathFillMode(
    path: ?*GpPath,
    fillmode: FillMode,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetPathData(
    path: ?*GpPath,
    pathData: ?*PathData,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipStartPathFigure(
    path: ?*GpPath,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipClosePathFigure(
    path: ?*GpPath,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipClosePathFigures(
    path: ?*GpPath,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipSetPathMarker(
    path: ?*GpPath,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipClearPathMarkers(
    path: ?*GpPath,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipReversePath(
    path: ?*GpPath,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetPathLastPoint(
    path: ?*GpPath,
    lastPoint: ?*PointF,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipAddPathLine(
    path: ?*GpPath,
    x1: f32,
    y1: f32,
    x2: f32,
    y2: f32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipAddPathLine2(
    path: ?*GpPath,
    points: ?*const PointF,
    count: i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipAddPathArc(
    path: ?*GpPath,
    x: f32,
    y: f32,
    width: f32,
    height: f32,
    startAngle: f32,
    sweepAngle: f32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipAddPathBezier(
    path: ?*GpPath,
    x1: f32,
    y1: f32,
    x2: f32,
    y2: f32,
    x3: f32,
    y3: f32,
    x4: f32,
    y4: f32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipAddPathBeziers(
    path: ?*GpPath,
    points: ?*const PointF,
    count: i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipAddPathCurve(
    path: ?*GpPath,
    points: ?*const PointF,
    count: i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipAddPathCurve2(
    path: ?*GpPath,
    points: ?*const PointF,
    count: i32,
    tension: f32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipAddPathCurve3(
    path: ?*GpPath,
    points: ?*const PointF,
    count: i32,
    offset: i32,
    numberOfSegments: i32,
    tension: f32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipAddPathClosedCurve(
    path: ?*GpPath,
    points: ?*const PointF,
    count: i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipAddPathClosedCurve2(
    path: ?*GpPath,
    points: ?*const PointF,
    count: i32,
    tension: f32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipAddPathRectangle(
    path: ?*GpPath,
    x: f32,
    y: f32,
    width: f32,
    height: f32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipAddPathRectangles(
    path: ?*GpPath,
    rects: ?*const RectF,
    count: i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipAddPathEllipse(
    path: ?*GpPath,
    x: f32,
    y: f32,
    width: f32,
    height: f32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipAddPathPie(
    path: ?*GpPath,
    x: f32,
    y: f32,
    width: f32,
    height: f32,
    startAngle: f32,
    sweepAngle: f32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipAddPathPolygon(
    path: ?*GpPath,
    points: ?*const PointF,
    count: i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipAddPathPath(
    path: ?*GpPath,
    addingPath: ?*const GpPath,
    connect: BOOL,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipAddPathString(
    path: ?*GpPath,
    string: ?[*:0]align(1) const u16,
    length: i32,
    family: ?*const GpFontFamily,
    style: i32,
    emSize: f32,
    layoutRect: ?*const RectF,
    format: ?*const GpStringFormat,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipAddPathStringI(
    path: ?*GpPath,
    string: ?[*:0]align(1) const u16,
    length: i32,
    family: ?*const GpFontFamily,
    style: i32,
    emSize: f32,
    layoutRect: ?*const Rect,
    format: ?*const GpStringFormat,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipAddPathLineI(
    path: ?*GpPath,
    x1: i32,
    y1: i32,
    x2: i32,
    y2: i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipAddPathLine2I(
    path: ?*GpPath,
    points: ?*const Point,
    count: i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipAddPathArcI(
    path: ?*GpPath,
    x: i32,
    y: i32,
    width: i32,
    height: i32,
    startAngle: f32,
    sweepAngle: f32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipAddPathBezierI(
    path: ?*GpPath,
    x1: i32,
    y1: i32,
    x2: i32,
    y2: i32,
    x3: i32,
    y3: i32,
    x4: i32,
    y4: i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipAddPathBeziersI(
    path: ?*GpPath,
    points: ?*const Point,
    count: i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipAddPathCurveI(
    path: ?*GpPath,
    points: ?*const Point,
    count: i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipAddPathCurve2I(
    path: ?*GpPath,
    points: ?*const Point,
    count: i32,
    tension: f32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipAddPathCurve3I(
    path: ?*GpPath,
    points: ?*const Point,
    count: i32,
    offset: i32,
    numberOfSegments: i32,
    tension: f32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipAddPathClosedCurveI(
    path: ?*GpPath,
    points: ?*const Point,
    count: i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipAddPathClosedCurve2I(
    path: ?*GpPath,
    points: ?*const Point,
    count: i32,
    tension: f32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipAddPathRectangleI(
    path: ?*GpPath,
    x: i32,
    y: i32,
    width: i32,
    height: i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipAddPathRectanglesI(
    path: ?*GpPath,
    rects: ?*const Rect,
    count: i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipAddPathEllipseI(
    path: ?*GpPath,
    x: i32,
    y: i32,
    width: i32,
    height: i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipAddPathPieI(
    path: ?*GpPath,
    x: i32,
    y: i32,
    width: i32,
    height: i32,
    startAngle: f32,
    sweepAngle: f32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipAddPathPolygonI(
    path: ?*GpPath,
    points: ?*const Point,
    count: i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipFlattenPath(
    path: ?*GpPath,
    matrix: ?*Matrix,
    flatness: f32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipWindingModeOutline(
    path: ?*GpPath,
    matrix: ?*Matrix,
    flatness: f32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipWidenPath(
    nativePath: ?*GpPath,
    pen: ?*GpPen,
    matrix: ?*Matrix,
    flatness: f32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipWarpPath(
    path: ?*GpPath,
    matrix: ?*Matrix,
    points: ?*const PointF,
    count: i32,
    srcx: f32,
    srcy: f32,
    srcwidth: f32,
    srcheight: f32,
    warpMode: WarpMode,
    flatness: f32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipTransformPath(
    path: ?*GpPath,
    matrix: ?*Matrix,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetPathWorldBounds(
    path: ?*GpPath,
    bounds: ?*RectF,
    matrix: ?*const Matrix,
    pen: ?*const GpPen,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetPathWorldBoundsI(
    path: ?*GpPath,
    bounds: ?*Rect,
    matrix: ?*const Matrix,
    pen: ?*const GpPen,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipIsVisiblePathPoint(
    path: ?*GpPath,
    x: f32,
    y: f32,
    graphics: ?*GpGraphics,
    result: ?*BOOL,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipIsVisiblePathPointI(
    path: ?*GpPath,
    x: i32,
    y: i32,
    graphics: ?*GpGraphics,
    result: ?*BOOL,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipIsOutlineVisiblePathPoint(
    path: ?*GpPath,
    x: f32,
    y: f32,
    pen: ?*GpPen,
    graphics: ?*GpGraphics,
    result: ?*BOOL,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipIsOutlineVisiblePathPointI(
    path: ?*GpPath,
    x: i32,
    y: i32,
    pen: ?*GpPen,
    graphics: ?*GpGraphics,
    result: ?*BOOL,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipCreatePathIter(
    iterator: ?*?*GpPathIterator,
    path: ?*GpPath,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipDeletePathIter(
    iterator: ?*GpPathIterator,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipPathIterNextSubpath(
    iterator: ?*GpPathIterator,
    resultCount: ?*i32,
    startIndex: ?*i32,
    endIndex: ?*i32,
    isClosed: ?*BOOL,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipPathIterNextSubpathPath(
    iterator: ?*GpPathIterator,
    resultCount: ?*i32,
    path: ?*GpPath,
    isClosed: ?*BOOL,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipPathIterNextPathType(
    iterator: ?*GpPathIterator,
    resultCount: ?*i32,
    pathType: ?*u8,
    startIndex: ?*i32,
    endIndex: ?*i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipPathIterNextMarker(
    iterator: ?*GpPathIterator,
    resultCount: ?*i32,
    startIndex: ?*i32,
    endIndex: ?*i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipPathIterNextMarkerPath(
    iterator: ?*GpPathIterator,
    resultCount: ?*i32,
    path: ?*GpPath,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipPathIterGetCount(
    iterator: ?*GpPathIterator,
    count: ?*i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipPathIterGetSubpathCount(
    iterator: ?*GpPathIterator,
    count: ?*i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipPathIterIsValid(
    iterator: ?*GpPathIterator,
    valid: ?*BOOL,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipPathIterHasCurve(
    iterator: ?*GpPathIterator,
    hasCurve: ?*BOOL,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipPathIterRewind(
    iterator: ?*GpPathIterator,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipPathIterEnumerate(
    iterator: ?*GpPathIterator,
    resultCount: ?*i32,
    points: [*]PointF,
    types: [*:0]u8,
    count: i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipPathIterCopyData(
    iterator: ?*GpPathIterator,
    resultCount: ?*i32,
    points: ?*PointF,
    types: ?*u8,
    startIndex: i32,
    endIndex: i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipCreateMatrix(
    matrix: ?*?*Matrix,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipCreateMatrix2(
    m11: f32,
    m12: f32,
    m21: f32,
    m22: f32,
    dx: f32,
    dy: f32,
    matrix: ?*?*Matrix,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipCreateMatrix3(
    rect: ?*const RectF,
    dstplg: ?*const PointF,
    matrix: ?*?*Matrix,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipCreateMatrix3I(
    rect: ?*const Rect,
    dstplg: ?*const Point,
    matrix: ?*?*Matrix,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipCloneMatrix(
    matrix: ?*Matrix,
    cloneMatrix: ?*?*Matrix,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipDeleteMatrix(
    matrix: ?*Matrix,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipSetMatrixElements(
    matrix: ?*Matrix,
    m11: f32,
    m12: f32,
    m21: f32,
    m22: f32,
    dx: f32,
    dy: f32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipMultiplyMatrix(
    matrix: ?*Matrix,
    matrix2: ?*Matrix,
    order: MatrixOrder,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipTranslateMatrix(
    matrix: ?*Matrix,
    offsetX: f32,
    offsetY: f32,
    order: MatrixOrder,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipScaleMatrix(
    matrix: ?*Matrix,
    scaleX: f32,
    scaleY: f32,
    order: MatrixOrder,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipRotateMatrix(
    matrix: ?*Matrix,
    angle: f32,
    order: MatrixOrder,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipShearMatrix(
    matrix: ?*Matrix,
    shearX: f32,
    shearY: f32,
    order: MatrixOrder,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipInvertMatrix(
    matrix: ?*Matrix,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipTransformMatrixPoints(
    matrix: ?*Matrix,
    pts: ?*PointF,
    count: i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipTransformMatrixPointsI(
    matrix: ?*Matrix,
    pts: ?*Point,
    count: i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipVectorTransformMatrixPoints(
    matrix: ?*Matrix,
    pts: ?*PointF,
    count: i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipVectorTransformMatrixPointsI(
    matrix: ?*Matrix,
    pts: ?*Point,
    count: i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetMatrixElements(
    matrix: ?*const Matrix,
    matrixOut: ?*f32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipIsMatrixInvertible(
    matrix: ?*const Matrix,
    result: ?*BOOL,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipIsMatrixIdentity(
    matrix: ?*const Matrix,
    result: ?*BOOL,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipIsMatrixEqual(
    matrix: ?*const Matrix,
    matrix2: ?*const Matrix,
    result: ?*BOOL,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipCreateRegion(
    region: ?*?*GpRegion,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipCreateRegionRect(
    rect: ?*const RectF,
    region: ?*?*GpRegion,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipCreateRegionRectI(
    rect: ?*const Rect,
    region: ?*?*GpRegion,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipCreateRegionPath(
    path: ?*GpPath,
    region: ?*?*GpRegion,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipCreateRegionRgnData(
    regionData: ?*const u8,
    size: i32,
    region: ?*?*GpRegion,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipCreateRegionHrgn(
    hRgn: ?HRGN,
    region: ?*?*GpRegion,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipCloneRegion(
    region: ?*GpRegion,
    cloneRegion: ?*?*GpRegion,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipDeleteRegion(
    region: ?*GpRegion,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipSetInfinite(
    region: ?*GpRegion,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipSetEmpty(
    region: ?*GpRegion,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipCombineRegionRect(
    region: ?*GpRegion,
    rect: ?*const RectF,
    combineMode: CombineMode,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipCombineRegionRectI(
    region: ?*GpRegion,
    rect: ?*const Rect,
    combineMode: CombineMode,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipCombineRegionPath(
    region: ?*GpRegion,
    path: ?*GpPath,
    combineMode: CombineMode,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipCombineRegionRegion(
    region: ?*GpRegion,
    region2: ?*GpRegion,
    combineMode: CombineMode,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipTranslateRegion(
    region: ?*GpRegion,
    dx: f32,
    dy: f32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipTranslateRegionI(
    region: ?*GpRegion,
    dx: i32,
    dy: i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipTransformRegion(
    region: ?*GpRegion,
    matrix: ?*Matrix,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetRegionBounds(
    region: ?*GpRegion,
    graphics: ?*GpGraphics,
    rect: ?*RectF,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetRegionBoundsI(
    region: ?*GpRegion,
    graphics: ?*GpGraphics,
    rect: ?*Rect,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetRegionHRgn(
    region: ?*GpRegion,
    graphics: ?*GpGraphics,
    hRgn: ?*?HRGN,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipIsEmptyRegion(
    region: ?*GpRegion,
    graphics: ?*GpGraphics,
    result: ?*BOOL,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipIsInfiniteRegion(
    region: ?*GpRegion,
    graphics: ?*GpGraphics,
    result: ?*BOOL,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipIsEqualRegion(
    region: ?*GpRegion,
    region2: ?*GpRegion,
    graphics: ?*GpGraphics,
    result: ?*BOOL,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetRegionDataSize(
    region: ?*GpRegion,
    bufferSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetRegionData(
    region: ?*GpRegion,
    buffer: [*:0]u8,
    bufferSize: u32,
    sizeFilled: ?*u32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipIsVisibleRegionPoint(
    region: ?*GpRegion,
    x: f32,
    y: f32,
    graphics: ?*GpGraphics,
    result: ?*BOOL,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipIsVisibleRegionPointI(
    region: ?*GpRegion,
    x: i32,
    y: i32,
    graphics: ?*GpGraphics,
    result: ?*BOOL,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipIsVisibleRegionRect(
    region: ?*GpRegion,
    x: f32,
    y: f32,
    width: f32,
    height: f32,
    graphics: ?*GpGraphics,
    result: ?*BOOL,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipIsVisibleRegionRectI(
    region: ?*GpRegion,
    x: i32,
    y: i32,
    width: i32,
    height: i32,
    graphics: ?*GpGraphics,
    result: ?*BOOL,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetRegionScansCount(
    region: ?*GpRegion,
    count: ?*u32,
    matrix: ?*Matrix,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetRegionScans(
    region: ?*GpRegion,
    rects: ?*RectF,
    count: ?*i32,
    matrix: ?*Matrix,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetRegionScansI(
    region: ?*GpRegion,
    rects: ?*Rect,
    count: ?*i32,
    matrix: ?*Matrix,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipCloneBrush(
    brush: ?*GpBrush,
    cloneBrush: ?*?*GpBrush,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipDeleteBrush(
    brush: ?*GpBrush,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetBrushType(
    brush: ?*GpBrush,
    type: ?*BrushType,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipCreateHatchBrush(
    hatchstyle: HatchStyle,
    forecol: u32,
    backcol: u32,
    brush: ?*?*GpHatch,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetHatchStyle(
    brush: ?*GpHatch,
    hatchstyle: ?*HatchStyle,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetHatchForegroundColor(
    brush: ?*GpHatch,
    forecol: ?*u32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetHatchBackgroundColor(
    brush: ?*GpHatch,
    backcol: ?*u32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipCreateTexture(
    image: ?*GpImage,
    wrapmode: WrapMode,
    texture: ?*?*GpTexture,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipCreateTexture2(
    image: ?*GpImage,
    wrapmode: WrapMode,
    x: f32,
    y: f32,
    width: f32,
    height: f32,
    texture: ?*?*GpTexture,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipCreateTextureIA(
    image: ?*GpImage,
    imageAttributes: ?*const GpImageAttributes,
    x: f32,
    y: f32,
    width: f32,
    height: f32,
    texture: ?*?*GpTexture,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipCreateTexture2I(
    image: ?*GpImage,
    wrapmode: WrapMode,
    x: i32,
    y: i32,
    width: i32,
    height: i32,
    texture: ?*?*GpTexture,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipCreateTextureIAI(
    image: ?*GpImage,
    imageAttributes: ?*const GpImageAttributes,
    x: i32,
    y: i32,
    width: i32,
    height: i32,
    texture: ?*?*GpTexture,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetTextureTransform(
    brush: ?*GpTexture,
    matrix: ?*Matrix,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipSetTextureTransform(
    brush: ?*GpTexture,
    matrix: ?*const Matrix,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipResetTextureTransform(
    brush: ?*GpTexture,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipMultiplyTextureTransform(
    brush: ?*GpTexture,
    matrix: ?*const Matrix,
    order: MatrixOrder,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipTranslateTextureTransform(
    brush: ?*GpTexture,
    dx: f32,
    dy: f32,
    order: MatrixOrder,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipScaleTextureTransform(
    brush: ?*GpTexture,
    sx: f32,
    sy: f32,
    order: MatrixOrder,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipRotateTextureTransform(
    brush: ?*GpTexture,
    angle: f32,
    order: MatrixOrder,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipSetTextureWrapMode(
    brush: ?*GpTexture,
    wrapmode: WrapMode,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetTextureWrapMode(
    brush: ?*GpTexture,
    wrapmode: ?*WrapMode,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetTextureImage(
    brush: ?*GpTexture,
    image: ?*?*GpImage,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipCreateSolidFill(
    color: u32,
    brush: ?*?*GpSolidFill,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipSetSolidFillColor(
    brush: ?*GpSolidFill,
    color: u32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetSolidFillColor(
    brush: ?*GpSolidFill,
    color: ?*u32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipCreateLineBrush(
    point1: ?*const PointF,
    point2: ?*const PointF,
    color1: u32,
    color2: u32,
    wrapMode: WrapMode,
    lineGradient: ?*?*GpLineGradient,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipCreateLineBrushI(
    point1: ?*const Point,
    point2: ?*const Point,
    color1: u32,
    color2: u32,
    wrapMode: WrapMode,
    lineGradient: ?*?*GpLineGradient,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipCreateLineBrushFromRect(
    rect: ?*const RectF,
    color1: u32,
    color2: u32,
    mode: LinearGradientMode,
    wrapMode: WrapMode,
    lineGradient: ?*?*GpLineGradient,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipCreateLineBrushFromRectI(
    rect: ?*const Rect,
    color1: u32,
    color2: u32,
    mode: LinearGradientMode,
    wrapMode: WrapMode,
    lineGradient: ?*?*GpLineGradient,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipCreateLineBrushFromRectWithAngle(
    rect: ?*const RectF,
    color1: u32,
    color2: u32,
    angle: f32,
    isAngleScalable: BOOL,
    wrapMode: WrapMode,
    lineGradient: ?*?*GpLineGradient,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipCreateLineBrushFromRectWithAngleI(
    rect: ?*const Rect,
    color1: u32,
    color2: u32,
    angle: f32,
    isAngleScalable: BOOL,
    wrapMode: WrapMode,
    lineGradient: ?*?*GpLineGradient,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipSetLineColors(
    brush: ?*GpLineGradient,
    color1: u32,
    color2: u32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetLineColors(
    brush: ?*GpLineGradient,
    colors: ?*u32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetLineRect(
    brush: ?*GpLineGradient,
    rect: ?*RectF,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetLineRectI(
    brush: ?*GpLineGradient,
    rect: ?*Rect,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipSetLineGammaCorrection(
    brush: ?*GpLineGradient,
    useGammaCorrection: BOOL,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetLineGammaCorrection(
    brush: ?*GpLineGradient,
    useGammaCorrection: ?*BOOL,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetLineBlendCount(
    brush: ?*GpLineGradient,
    count: ?*i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetLineBlend(
    brush: ?*GpLineGradient,
    blend: ?*f32,
    positions: ?*f32,
    count: i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipSetLineBlend(
    brush: ?*GpLineGradient,
    blend: ?*const f32,
    positions: ?*const f32,
    count: i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetLinePresetBlendCount(
    brush: ?*GpLineGradient,
    count: ?*i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetLinePresetBlend(
    brush: ?*GpLineGradient,
    blend: ?*u32,
    positions: ?*f32,
    count: i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipSetLinePresetBlend(
    brush: ?*GpLineGradient,
    blend: ?*const u32,
    positions: ?*const f32,
    count: i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipSetLineSigmaBlend(
    brush: ?*GpLineGradient,
    focus: f32,
    scale: f32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipSetLineLinearBlend(
    brush: ?*GpLineGradient,
    focus: f32,
    scale: f32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipSetLineWrapMode(
    brush: ?*GpLineGradient,
    wrapmode: WrapMode,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetLineWrapMode(
    brush: ?*GpLineGradient,
    wrapmode: ?*WrapMode,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetLineTransform(
    brush: ?*GpLineGradient,
    matrix: ?*Matrix,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipSetLineTransform(
    brush: ?*GpLineGradient,
    matrix: ?*const Matrix,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipResetLineTransform(
    brush: ?*GpLineGradient,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipMultiplyLineTransform(
    brush: ?*GpLineGradient,
    matrix: ?*const Matrix,
    order: MatrixOrder,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipTranslateLineTransform(
    brush: ?*GpLineGradient,
    dx: f32,
    dy: f32,
    order: MatrixOrder,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipScaleLineTransform(
    brush: ?*GpLineGradient,
    sx: f32,
    sy: f32,
    order: MatrixOrder,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipRotateLineTransform(
    brush: ?*GpLineGradient,
    angle: f32,
    order: MatrixOrder,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipCreatePathGradient(
    points: ?*const PointF,
    count: i32,
    wrapMode: WrapMode,
    polyGradient: ?*?*GpPathGradient,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipCreatePathGradientI(
    points: ?*const Point,
    count: i32,
    wrapMode: WrapMode,
    polyGradient: ?*?*GpPathGradient,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipCreatePathGradientFromPath(
    path: ?*const GpPath,
    polyGradient: ?*?*GpPathGradient,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetPathGradientCenterColor(
    brush: ?*GpPathGradient,
    colors: ?*u32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipSetPathGradientCenterColor(
    brush: ?*GpPathGradient,
    colors: u32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetPathGradientSurroundColorsWithCount(
    brush: ?*GpPathGradient,
    color: [*]u32,
    count: ?*i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipSetPathGradientSurroundColorsWithCount(
    brush: ?*GpPathGradient,
    color: ?*const u32,
    count: ?*i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetPathGradientPath(
    brush: ?*GpPathGradient,
    path: ?*GpPath,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipSetPathGradientPath(
    brush: ?*GpPathGradient,
    path: ?*const GpPath,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetPathGradientCenterPoint(
    brush: ?*GpPathGradient,
    points: ?*PointF,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetPathGradientCenterPointI(
    brush: ?*GpPathGradient,
    points: ?*Point,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipSetPathGradientCenterPoint(
    brush: ?*GpPathGradient,
    points: ?*const PointF,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipSetPathGradientCenterPointI(
    brush: ?*GpPathGradient,
    points: ?*const Point,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetPathGradientRect(
    brush: ?*GpPathGradient,
    rect: ?*RectF,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetPathGradientRectI(
    brush: ?*GpPathGradient,
    rect: ?*Rect,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetPathGradientPointCount(
    brush: ?*GpPathGradient,
    count: ?*i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetPathGradientSurroundColorCount(
    brush: ?*GpPathGradient,
    count: ?*i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipSetPathGradientGammaCorrection(
    brush: ?*GpPathGradient,
    useGammaCorrection: BOOL,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetPathGradientGammaCorrection(
    brush: ?*GpPathGradient,
    useGammaCorrection: ?*BOOL,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetPathGradientBlendCount(
    brush: ?*GpPathGradient,
    count: ?*i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetPathGradientBlend(
    brush: ?*GpPathGradient,
    blend: ?*f32,
    positions: ?*f32,
    count: i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipSetPathGradientBlend(
    brush: ?*GpPathGradient,
    blend: ?*const f32,
    positions: ?*const f32,
    count: i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetPathGradientPresetBlendCount(
    brush: ?*GpPathGradient,
    count: ?*i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetPathGradientPresetBlend(
    brush: ?*GpPathGradient,
    blend: ?*u32,
    positions: ?*f32,
    count: i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipSetPathGradientPresetBlend(
    brush: ?*GpPathGradient,
    blend: ?*const u32,
    positions: ?*const f32,
    count: i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipSetPathGradientSigmaBlend(
    brush: ?*GpPathGradient,
    focus: f32,
    scale: f32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipSetPathGradientLinearBlend(
    brush: ?*GpPathGradient,
    focus: f32,
    scale: f32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetPathGradientWrapMode(
    brush: ?*GpPathGradient,
    wrapmode: ?*WrapMode,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipSetPathGradientWrapMode(
    brush: ?*GpPathGradient,
    wrapmode: WrapMode,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetPathGradientTransform(
    brush: ?*GpPathGradient,
    matrix: ?*Matrix,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipSetPathGradientTransform(
    brush: ?*GpPathGradient,
    matrix: ?*Matrix,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipResetPathGradientTransform(
    brush: ?*GpPathGradient,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipMultiplyPathGradientTransform(
    brush: ?*GpPathGradient,
    matrix: ?*const Matrix,
    order: MatrixOrder,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipTranslatePathGradientTransform(
    brush: ?*GpPathGradient,
    dx: f32,
    dy: f32,
    order: MatrixOrder,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipScalePathGradientTransform(
    brush: ?*GpPathGradient,
    sx: f32,
    sy: f32,
    order: MatrixOrder,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipRotatePathGradientTransform(
    brush: ?*GpPathGradient,
    angle: f32,
    order: MatrixOrder,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetPathGradientFocusScales(
    brush: ?*GpPathGradient,
    xScale: ?*f32,
    yScale: ?*f32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipSetPathGradientFocusScales(
    brush: ?*GpPathGradient,
    xScale: f32,
    yScale: f32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipCreatePen1(
    color: u32,
    width: f32,
    unit: Unit,
    pen: ?*?*GpPen,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipCreatePen2(
    brush: ?*GpBrush,
    width: f32,
    unit: Unit,
    pen: ?*?*GpPen,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipClonePen(
    pen: ?*GpPen,
    clonepen: ?*?*GpPen,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipDeletePen(
    pen: ?*GpPen,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipSetPenWidth(
    pen: ?*GpPen,
    width: f32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetPenWidth(
    pen: ?*GpPen,
    width: ?*f32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipSetPenUnit(
    pen: ?*GpPen,
    unit: Unit,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetPenUnit(
    pen: ?*GpPen,
    unit: ?*Unit,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipSetPenLineCap197819(
    pen: ?*GpPen,
    startCap: LineCap,
    endCap: LineCap,
    dashCap: DashCap,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipSetPenStartCap(
    pen: ?*GpPen,
    startCap: LineCap,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipSetPenEndCap(
    pen: ?*GpPen,
    endCap: LineCap,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipSetPenDashCap197819(
    pen: ?*GpPen,
    dashCap: DashCap,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetPenStartCap(
    pen: ?*GpPen,
    startCap: ?*LineCap,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetPenEndCap(
    pen: ?*GpPen,
    endCap: ?*LineCap,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetPenDashCap197819(
    pen: ?*GpPen,
    dashCap: ?*DashCap,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipSetPenLineJoin(
    pen: ?*GpPen,
    lineJoin: LineJoin,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetPenLineJoin(
    pen: ?*GpPen,
    lineJoin: ?*LineJoin,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipSetPenCustomStartCap(
    pen: ?*GpPen,
    customCap: ?*GpCustomLineCap,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetPenCustomStartCap(
    pen: ?*GpPen,
    customCap: ?*?*GpCustomLineCap,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipSetPenCustomEndCap(
    pen: ?*GpPen,
    customCap: ?*GpCustomLineCap,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetPenCustomEndCap(
    pen: ?*GpPen,
    customCap: ?*?*GpCustomLineCap,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipSetPenMiterLimit(
    pen: ?*GpPen,
    miterLimit: f32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetPenMiterLimit(
    pen: ?*GpPen,
    miterLimit: ?*f32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipSetPenMode(
    pen: ?*GpPen,
    penMode: PenAlignment,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetPenMode(
    pen: ?*GpPen,
    penMode: ?*PenAlignment,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipSetPenTransform(
    pen: ?*GpPen,
    matrix: ?*Matrix,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetPenTransform(
    pen: ?*GpPen,
    matrix: ?*Matrix,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipResetPenTransform(
    pen: ?*GpPen,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipMultiplyPenTransform(
    pen: ?*GpPen,
    matrix: ?*const Matrix,
    order: MatrixOrder,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipTranslatePenTransform(
    pen: ?*GpPen,
    dx: f32,
    dy: f32,
    order: MatrixOrder,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipScalePenTransform(
    pen: ?*GpPen,
    sx: f32,
    sy: f32,
    order: MatrixOrder,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipRotatePenTransform(
    pen: ?*GpPen,
    angle: f32,
    order: MatrixOrder,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipSetPenColor(
    pen: ?*GpPen,
    argb: u32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetPenColor(
    pen: ?*GpPen,
    argb: ?*u32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipSetPenBrushFill(
    pen: ?*GpPen,
    brush: ?*GpBrush,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetPenBrushFill(
    pen: ?*GpPen,
    brush: ?*?*GpBrush,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetPenFillType(
    pen: ?*GpPen,
    type: ?*PenType,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetPenDashStyle(
    pen: ?*GpPen,
    dashstyle: ?*DashStyle,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipSetPenDashStyle(
    pen: ?*GpPen,
    dashstyle: DashStyle,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetPenDashOffset(
    pen: ?*GpPen,
    offset: ?*f32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipSetPenDashOffset(
    pen: ?*GpPen,
    offset: f32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetPenDashCount(
    pen: ?*GpPen,
    count: ?*i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipSetPenDashArray(
    pen: ?*GpPen,
    dash: ?*const f32,
    count: i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetPenDashArray(
    pen: ?*GpPen,
    dash: ?*f32,
    count: i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetPenCompoundCount(
    pen: ?*GpPen,
    count: ?*i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipSetPenCompoundArray(
    pen: ?*GpPen,
    dash: ?*const f32,
    count: i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetPenCompoundArray(
    pen: ?*GpPen,
    dash: ?*f32,
    count: i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipCreateCustomLineCap(
    fillPath: ?*GpPath,
    strokePath: ?*GpPath,
    baseCap: LineCap,
    baseInset: f32,
    customCap: ?*?*GpCustomLineCap,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipDeleteCustomLineCap(
    customCap: ?*GpCustomLineCap,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipCloneCustomLineCap(
    customCap: ?*GpCustomLineCap,
    clonedCap: ?*?*GpCustomLineCap,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetCustomLineCapType(
    customCap: ?*GpCustomLineCap,
    capType: ?*CustomLineCapType,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipSetCustomLineCapStrokeCaps(
    customCap: ?*GpCustomLineCap,
    startCap: LineCap,
    endCap: LineCap,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetCustomLineCapStrokeCaps(
    customCap: ?*GpCustomLineCap,
    startCap: ?*LineCap,
    endCap: ?*LineCap,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipSetCustomLineCapStrokeJoin(
    customCap: ?*GpCustomLineCap,
    lineJoin: LineJoin,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetCustomLineCapStrokeJoin(
    customCap: ?*GpCustomLineCap,
    lineJoin: ?*LineJoin,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipSetCustomLineCapBaseCap(
    customCap: ?*GpCustomLineCap,
    baseCap: LineCap,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetCustomLineCapBaseCap(
    customCap: ?*GpCustomLineCap,
    baseCap: ?*LineCap,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipSetCustomLineCapBaseInset(
    customCap: ?*GpCustomLineCap,
    inset: f32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetCustomLineCapBaseInset(
    customCap: ?*GpCustomLineCap,
    inset: ?*f32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipSetCustomLineCapWidthScale(
    customCap: ?*GpCustomLineCap,
    widthScale: f32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetCustomLineCapWidthScale(
    customCap: ?*GpCustomLineCap,
    widthScale: ?*f32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipCreateAdjustableArrowCap(
    height: f32,
    width: f32,
    isFilled: BOOL,
    cap: ?*?*GpAdjustableArrowCap,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipSetAdjustableArrowCapHeight(
    cap: ?*GpAdjustableArrowCap,
    height: f32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetAdjustableArrowCapHeight(
    cap: ?*GpAdjustableArrowCap,
    height: ?*f32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipSetAdjustableArrowCapWidth(
    cap: ?*GpAdjustableArrowCap,
    width: f32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetAdjustableArrowCapWidth(
    cap: ?*GpAdjustableArrowCap,
    width: ?*f32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipSetAdjustableArrowCapMiddleInset(
    cap: ?*GpAdjustableArrowCap,
    middleInset: f32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetAdjustableArrowCapMiddleInset(
    cap: ?*GpAdjustableArrowCap,
    middleInset: ?*f32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipSetAdjustableArrowCapFillState(
    cap: ?*GpAdjustableArrowCap,
    fillState: BOOL,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetAdjustableArrowCapFillState(
    cap: ?*GpAdjustableArrowCap,
    fillState: ?*BOOL,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipLoadImageFromStream(
    stream: ?*IStream,
    image: ?*?*GpImage,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipLoadImageFromFile(
    filename: ?[*:0]align(1) const u16,
    image: ?*?*GpImage,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipLoadImageFromStreamICM(
    stream: ?*IStream,
    image: ?*?*GpImage,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipLoadImageFromFileICM(
    filename: ?[*:0]align(1) const u16,
    image: ?*?*GpImage,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipCloneImage(
    image: ?*GpImage,
    cloneImage: ?*?*GpImage,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipDisposeImage(
    image: ?*GpImage,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipSaveImageToFile(
    image: ?*GpImage,
    filename: ?[*:0]align(1) const u16,
    clsidEncoder: ?*const Guid,
    encoderParams: ?*const EncoderParameters,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipSaveImageToStream(
    image: ?*GpImage,
    stream: ?*IStream,
    clsidEncoder: ?*const Guid,
    encoderParams: ?*const EncoderParameters,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipSaveAdd(
    image: ?*GpImage,
    encoderParams: ?*const EncoderParameters,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipSaveAddImage(
    image: ?*GpImage,
    newImage: ?*GpImage,
    encoderParams: ?*const EncoderParameters,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetImageGraphicsContext(
    image: ?*GpImage,
    graphics: ?*?*GpGraphics,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetImageBounds(
    image: ?*GpImage,
    srcRect: ?*RectF,
    srcUnit: ?*Unit,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetImageDimension(
    image: ?*GpImage,
    width: ?*f32,
    height: ?*f32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetImageType(
    image: ?*GpImage,
    type: ?*ImageType,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetImageWidth(
    image: ?*GpImage,
    width: ?*u32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetImageHeight(
    image: ?*GpImage,
    height: ?*u32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetImageHorizontalResolution(
    image: ?*GpImage,
    resolution: ?*f32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetImageVerticalResolution(
    image: ?*GpImage,
    resolution: ?*f32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetImageFlags(
    image: ?*GpImage,
    flags: ?*u32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetImageRawFormat(
    image: ?*GpImage,
    format: ?*Guid,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetImagePixelFormat(
    image: ?*GpImage,
    format: ?*i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetImageThumbnail(
    image: ?*GpImage,
    thumbWidth: u32,
    thumbHeight: u32,
    thumbImage: ?*?*GpImage,
    callback: isize,
    callbackData: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetEncoderParameterListSize(
    image: ?*GpImage,
    clsidEncoder: ?*const Guid,
    size: ?*u32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetEncoderParameterList(
    image: ?*GpImage,
    clsidEncoder: ?*const Guid,
    size: u32,
    buffer: ?*EncoderParameters,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipImageGetFrameDimensionsCount(
    image: ?*GpImage,
    count: ?*u32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipImageGetFrameDimensionsList(
    image: ?*GpImage,
    dimensionIDs: ?*Guid,
    count: u32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipImageGetFrameCount(
    image: ?*GpImage,
    dimensionID: ?*const Guid,
    count: ?*u32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipImageSelectActiveFrame(
    image: ?*GpImage,
    dimensionID: ?*const Guid,
    frameIndex: u32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipImageRotateFlip(
    image: ?*GpImage,
    rfType: RotateFlipType,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetImagePalette(
    image: ?*GpImage,
    palette: ?*ColorPalette,
    size: i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipSetImagePalette(
    image: ?*GpImage,
    palette: ?*const ColorPalette,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetImagePaletteSize(
    image: ?*GpImage,
    size: ?*i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetPropertyCount(
    image: ?*GpImage,
    numOfProperty: ?*u32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetPropertyIdList(
    image: ?*GpImage,
    numOfProperty: u32,
    list: ?*u32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetPropertyItemSize(
    image: ?*GpImage,
    propId: u32,
    size: ?*u32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetPropertyItem(
    image: ?*GpImage,
    propId: u32,
    propSize: u32,
    buffer: ?*PropertyItem,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetPropertySize(
    image: ?*GpImage,
    totalBufferSize: ?*u32,
    numProperties: ?*u32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetAllPropertyItems(
    image: ?*GpImage,
    totalBufferSize: u32,
    numProperties: u32,
    allItems: ?*PropertyItem,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipRemovePropertyItem(
    image: ?*GpImage,
    propId: u32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipSetPropertyItem(
    image: ?*GpImage,
    item: ?*const PropertyItem,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipFindFirstImageItem(
    image: ?*GpImage,
    item: ?*ImageItemData,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipFindNextImageItem(
    image: ?*GpImage,
    item: ?*ImageItemData,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetImageItemData(
    image: ?*GpImage,
    item: ?*ImageItemData,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipImageForceValidation(
    image: ?*GpImage,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipCreateBitmapFromStream(
    stream: ?*IStream,
    bitmap: ?*?*GpBitmap,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipCreateBitmapFromFile(
    filename: ?[*:0]align(1) const u16,
    bitmap: ?*?*GpBitmap,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipCreateBitmapFromStreamICM(
    stream: ?*IStream,
    bitmap: ?*?*GpBitmap,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipCreateBitmapFromFileICM(
    filename: ?[*:0]align(1) const u16,
    bitmap: ?*?*GpBitmap,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipCreateBitmapFromScan0(
    width: i32,
    height: i32,
    stride: i32,
    format: i32,
    scan0: ?*u8,
    bitmap: ?*?*GpBitmap,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipCreateBitmapFromGraphics(
    width: i32,
    height: i32,
    target: ?*GpGraphics,
    bitmap: ?*?*GpBitmap,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipCreateBitmapFromDirectDrawSurface(
    surface: ?*IDirectDrawSurface7,
    bitmap: ?*?*GpBitmap,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipCreateBitmapFromGdiDib(
    gdiBitmapInfo: ?*const BITMAPINFO,
    gdiBitmapData: ?*anyopaque,
    bitmap: ?*?*GpBitmap,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipCreateBitmapFromHBITMAP(
    hbm: ?HBITMAP,
    hpal: ?HPALETTE,
    bitmap: ?*?*GpBitmap,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipCreateHBITMAPFromBitmap(
    bitmap: ?*GpBitmap,
    hbmReturn: ?*?HBITMAP,
    background: u32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipCreateBitmapFromHICON(
    hicon: ?HICON,
    bitmap: ?*?*GpBitmap,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipCreateHICONFromBitmap(
    bitmap: ?*GpBitmap,
    hbmReturn: ?*?HICON,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipCreateBitmapFromResource(
    hInstance: ?HINSTANCE,
    lpBitmapName: ?[*:0]align(1) const u16,
    bitmap: ?*?*GpBitmap,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipCloneBitmapArea(
    x: f32,
    y: f32,
    width: f32,
    height: f32,
    format: i32,
    srcBitmap: ?*GpBitmap,
    dstBitmap: ?*?*GpBitmap,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipCloneBitmapAreaI(
    x: i32,
    y: i32,
    width: i32,
    height: i32,
    format: i32,
    srcBitmap: ?*GpBitmap,
    dstBitmap: ?*?*GpBitmap,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipBitmapLockBits(
    bitmap: ?*GpBitmap,
    rect: ?*const Rect,
    flags: u32,
    format: i32,
    lockedBitmapData: ?*BitmapData,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipBitmapUnlockBits(
    bitmap: ?*GpBitmap,
    lockedBitmapData: ?*BitmapData,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipBitmapGetPixel(
    bitmap: ?*GpBitmap,
    x: i32,
    y: i32,
    color: ?*u32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipBitmapSetPixel(
    bitmap: ?*GpBitmap,
    x: i32,
    y: i32,
    color: u32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipImageSetAbort(
    pImage: ?*GpImage,
    pIAbort: ?*GdiplusAbort,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGraphicsSetAbort(
    pGraphics: ?*GpGraphics,
    pIAbort: ?*GdiplusAbort,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipBitmapConvertFormat(
    pInputBitmap: ?*GpBitmap,
    format: i32,
    dithertype: DitherType,
    palettetype: PaletteType,
    palette: ?*ColorPalette,
    alphaThresholdPercent: f32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipInitializePalette(
    palette: ?*ColorPalette,
    palettetype: PaletteType,
    optimalColors: i32,
    useTransparentColor: BOOL,
    bitmap: ?*GpBitmap,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipBitmapApplyEffect(
    bitmap: ?*GpBitmap,
    effect: ?*CGpEffect,
    roi: ?*RECT,
    useAuxData: BOOL,
    auxData: ?*?*anyopaque,
    auxDataSize: ?*i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipBitmapCreateApplyEffect(
    inputBitmaps: ?*?*GpBitmap,
    numInputs: i32,
    effect: ?*CGpEffect,
    roi: ?*RECT,
    outputRect: ?*RECT,
    outputBitmap: ?*?*GpBitmap,
    useAuxData: BOOL,
    auxData: ?*?*anyopaque,
    auxDataSize: ?*i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipBitmapGetHistogram(
    bitmap: ?*GpBitmap,
    format: HistogramFormat,
    NumberOfEntries: u32,
    channel0: ?*u32,
    channel1: ?*u32,
    channel2: ?*u32,
    channel3: ?*u32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipBitmapGetHistogramSize(
    format: HistogramFormat,
    NumberOfEntries: ?*u32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipBitmapSetResolution(
    bitmap: ?*GpBitmap,
    xdpi: f32,
    ydpi: f32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipCreateImageAttributes(
    imageattr: ?*?*GpImageAttributes,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipCloneImageAttributes(
    imageattr: ?*const GpImageAttributes,
    cloneImageattr: ?*?*GpImageAttributes,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipDisposeImageAttributes(
    imageattr: ?*GpImageAttributes,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipSetImageAttributesToIdentity(
    imageattr: ?*GpImageAttributes,
    type: ColorAdjustType,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipResetImageAttributes(
    imageattr: ?*GpImageAttributes,
    type: ColorAdjustType,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipSetImageAttributesColorMatrix(
    imageattr: ?*GpImageAttributes,
    type: ColorAdjustType,
    enableFlag: BOOL,
    colorMatrix: ?*const ColorMatrix,
    grayMatrix: ?*const ColorMatrix,
    flags: ColorMatrixFlags,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipSetImageAttributesThreshold(
    imageattr: ?*GpImageAttributes,
    type: ColorAdjustType,
    enableFlag: BOOL,
    threshold: f32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipSetImageAttributesGamma(
    imageattr: ?*GpImageAttributes,
    type: ColorAdjustType,
    enableFlag: BOOL,
    gamma: f32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipSetImageAttributesNoOp(
    imageattr: ?*GpImageAttributes,
    type: ColorAdjustType,
    enableFlag: BOOL,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipSetImageAttributesColorKeys(
    imageattr: ?*GpImageAttributes,
    type: ColorAdjustType,
    enableFlag: BOOL,
    colorLow: u32,
    colorHigh: u32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipSetImageAttributesOutputChannel(
    imageattr: ?*GpImageAttributes,
    type: ColorAdjustType,
    enableFlag: BOOL,
    channelFlags: ColorChannelFlags,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipSetImageAttributesOutputChannelColorProfile(
    imageattr: ?*GpImageAttributes,
    type: ColorAdjustType,
    enableFlag: BOOL,
    colorProfileFilename: ?[*:0]align(1) const u16,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipSetImageAttributesRemapTable(
    imageattr: ?*GpImageAttributes,
    type: ColorAdjustType,
    enableFlag: BOOL,
    mapSize: u32,
    map: ?*const ColorMap,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipSetImageAttributesWrapMode(
    imageAttr: ?*GpImageAttributes,
    wrap: WrapMode,
    argb: u32,
    clamp: BOOL,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetImageAttributesAdjustedPalette(
    imageAttr: ?*GpImageAttributes,
    colorPalette: ?*ColorPalette,
    colorAdjustType: ColorAdjustType,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipFlush(
    graphics: ?*GpGraphics,
    intention: FlushIntention,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipCreateFromHDC(
    hdc: ?HDC,
    graphics: ?*?*GpGraphics,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipCreateFromHDC2(
    hdc: ?HDC,
    hDevice: ?HANDLE,
    graphics: ?*?*GpGraphics,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipCreateFromHWND(
    hwnd: ?HWND,
    graphics: ?*?*GpGraphics,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipCreateFromHWNDICM(
    hwnd: ?HWND,
    graphics: ?*?*GpGraphics,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipDeleteGraphics(
    graphics: ?*GpGraphics,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetDC(
    graphics: ?*GpGraphics,
    hdc: ?*?HDC,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipReleaseDC(
    graphics: ?*GpGraphics,
    hdc: ?HDC,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipSetCompositingMode(
    graphics: ?*GpGraphics,
    compositingMode: CompositingMode,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetCompositingMode(
    graphics: ?*GpGraphics,
    compositingMode: ?*CompositingMode,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipSetRenderingOrigin(
    graphics: ?*GpGraphics,
    x: i32,
    y: i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetRenderingOrigin(
    graphics: ?*GpGraphics,
    x: ?*i32,
    y: ?*i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipSetCompositingQuality(
    graphics: ?*GpGraphics,
    compositingQuality: CompositingQuality,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetCompositingQuality(
    graphics: ?*GpGraphics,
    compositingQuality: ?*CompositingQuality,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipSetSmoothingMode(
    graphics: ?*GpGraphics,
    smoothingMode: SmoothingMode,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetSmoothingMode(
    graphics: ?*GpGraphics,
    smoothingMode: ?*SmoothingMode,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipSetPixelOffsetMode(
    graphics: ?*GpGraphics,
    pixelOffsetMode: PixelOffsetMode,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetPixelOffsetMode(
    graphics: ?*GpGraphics,
    pixelOffsetMode: ?*PixelOffsetMode,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipSetTextRenderingHint(
    graphics: ?*GpGraphics,
    mode: TextRenderingHint,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetTextRenderingHint(
    graphics: ?*GpGraphics,
    mode: ?*TextRenderingHint,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipSetTextContrast(
    graphics: ?*GpGraphics,
    contrast: u32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetTextContrast(
    graphics: ?*GpGraphics,
    contrast: ?*u32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipSetInterpolationMode(
    graphics: ?*GpGraphics,
    interpolationMode: InterpolationMode,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetInterpolationMode(
    graphics: ?*GpGraphics,
    interpolationMode: ?*InterpolationMode,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipSetWorldTransform(
    graphics: ?*GpGraphics,
    matrix: ?*Matrix,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipResetWorldTransform(
    graphics: ?*GpGraphics,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipMultiplyWorldTransform(
    graphics: ?*GpGraphics,
    matrix: ?*const Matrix,
    order: MatrixOrder,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipTranslateWorldTransform(
    graphics: ?*GpGraphics,
    dx: f32,
    dy: f32,
    order: MatrixOrder,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipScaleWorldTransform(
    graphics: ?*GpGraphics,
    sx: f32,
    sy: f32,
    order: MatrixOrder,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipRotateWorldTransform(
    graphics: ?*GpGraphics,
    angle: f32,
    order: MatrixOrder,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetWorldTransform(
    graphics: ?*GpGraphics,
    matrix: ?*Matrix,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipResetPageTransform(
    graphics: ?*GpGraphics,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetPageUnit(
    graphics: ?*GpGraphics,
    unit: ?*Unit,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetPageScale(
    graphics: ?*GpGraphics,
    scale: ?*f32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipSetPageUnit(
    graphics: ?*GpGraphics,
    unit: Unit,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipSetPageScale(
    graphics: ?*GpGraphics,
    scale: f32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetDpiX(
    graphics: ?*GpGraphics,
    dpi: ?*f32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetDpiY(
    graphics: ?*GpGraphics,
    dpi: ?*f32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipTransformPoints(
    graphics: ?*GpGraphics,
    destSpace: CoordinateSpace,
    srcSpace: CoordinateSpace,
    points: ?*PointF,
    count: i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipTransformPointsI(
    graphics: ?*GpGraphics,
    destSpace: CoordinateSpace,
    srcSpace: CoordinateSpace,
    points: ?*Point,
    count: i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetNearestColor(
    graphics: ?*GpGraphics,
    argb: ?*u32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipCreateHalftonePalette(
) callconv(@import("std").os.windows.WINAPI) ?HPALETTE;

pub extern "gdiplus" fn GdipDrawLine(
    graphics: ?*GpGraphics,
    pen: ?*GpPen,
    x1: f32,
    y1: f32,
    x2: f32,
    y2: f32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipDrawLineI(
    graphics: ?*GpGraphics,
    pen: ?*GpPen,
    x1: i32,
    y1: i32,
    x2: i32,
    y2: i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipDrawLines(
    graphics: ?*GpGraphics,
    pen: ?*GpPen,
    points: ?*const PointF,
    count: i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipDrawLinesI(
    graphics: ?*GpGraphics,
    pen: ?*GpPen,
    points: ?*const Point,
    count: i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipDrawArc(
    graphics: ?*GpGraphics,
    pen: ?*GpPen,
    x: f32,
    y: f32,
    width: f32,
    height: f32,
    startAngle: f32,
    sweepAngle: f32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipDrawArcI(
    graphics: ?*GpGraphics,
    pen: ?*GpPen,
    x: i32,
    y: i32,
    width: i32,
    height: i32,
    startAngle: f32,
    sweepAngle: f32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipDrawBezier(
    graphics: ?*GpGraphics,
    pen: ?*GpPen,
    x1: f32,
    y1: f32,
    x2: f32,
    y2: f32,
    x3: f32,
    y3: f32,
    x4: f32,
    y4: f32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipDrawBezierI(
    graphics: ?*GpGraphics,
    pen: ?*GpPen,
    x1: i32,
    y1: i32,
    x2: i32,
    y2: i32,
    x3: i32,
    y3: i32,
    x4: i32,
    y4: i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipDrawBeziers(
    graphics: ?*GpGraphics,
    pen: ?*GpPen,
    points: ?*const PointF,
    count: i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipDrawBeziersI(
    graphics: ?*GpGraphics,
    pen: ?*GpPen,
    points: ?*const Point,
    count: i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipDrawRectangle(
    graphics: ?*GpGraphics,
    pen: ?*GpPen,
    x: f32,
    y: f32,
    width: f32,
    height: f32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipDrawRectangleI(
    graphics: ?*GpGraphics,
    pen: ?*GpPen,
    x: i32,
    y: i32,
    width: i32,
    height: i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipDrawRectangles(
    graphics: ?*GpGraphics,
    pen: ?*GpPen,
    rects: ?*const RectF,
    count: i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipDrawRectanglesI(
    graphics: ?*GpGraphics,
    pen: ?*GpPen,
    rects: ?*const Rect,
    count: i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipDrawEllipse(
    graphics: ?*GpGraphics,
    pen: ?*GpPen,
    x: f32,
    y: f32,
    width: f32,
    height: f32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipDrawEllipseI(
    graphics: ?*GpGraphics,
    pen: ?*GpPen,
    x: i32,
    y: i32,
    width: i32,
    height: i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipDrawPie(
    graphics: ?*GpGraphics,
    pen: ?*GpPen,
    x: f32,
    y: f32,
    width: f32,
    height: f32,
    startAngle: f32,
    sweepAngle: f32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipDrawPieI(
    graphics: ?*GpGraphics,
    pen: ?*GpPen,
    x: i32,
    y: i32,
    width: i32,
    height: i32,
    startAngle: f32,
    sweepAngle: f32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipDrawPolygon(
    graphics: ?*GpGraphics,
    pen: ?*GpPen,
    points: ?*const PointF,
    count: i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipDrawPolygonI(
    graphics: ?*GpGraphics,
    pen: ?*GpPen,
    points: ?*const Point,
    count: i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipDrawPath(
    graphics: ?*GpGraphics,
    pen: ?*GpPen,
    path: ?*GpPath,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipDrawCurve(
    graphics: ?*GpGraphics,
    pen: ?*GpPen,
    points: ?*const PointF,
    count: i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipDrawCurveI(
    graphics: ?*GpGraphics,
    pen: ?*GpPen,
    points: ?*const Point,
    count: i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipDrawCurve2(
    graphics: ?*GpGraphics,
    pen: ?*GpPen,
    points: ?*const PointF,
    count: i32,
    tension: f32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipDrawCurve2I(
    graphics: ?*GpGraphics,
    pen: ?*GpPen,
    points: ?*const Point,
    count: i32,
    tension: f32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipDrawCurve3(
    graphics: ?*GpGraphics,
    pen: ?*GpPen,
    points: ?*const PointF,
    count: i32,
    offset: i32,
    numberOfSegments: i32,
    tension: f32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipDrawCurve3I(
    graphics: ?*GpGraphics,
    pen: ?*GpPen,
    points: ?*const Point,
    count: i32,
    offset: i32,
    numberOfSegments: i32,
    tension: f32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipDrawClosedCurve(
    graphics: ?*GpGraphics,
    pen: ?*GpPen,
    points: ?*const PointF,
    count: i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipDrawClosedCurveI(
    graphics: ?*GpGraphics,
    pen: ?*GpPen,
    points: ?*const Point,
    count: i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipDrawClosedCurve2(
    graphics: ?*GpGraphics,
    pen: ?*GpPen,
    points: ?*const PointF,
    count: i32,
    tension: f32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipDrawClosedCurve2I(
    graphics: ?*GpGraphics,
    pen: ?*GpPen,
    points: ?*const Point,
    count: i32,
    tension: f32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGraphicsClear(
    graphics: ?*GpGraphics,
    color: u32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipFillRectangle(
    graphics: ?*GpGraphics,
    brush: ?*GpBrush,
    x: f32,
    y: f32,
    width: f32,
    height: f32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipFillRectangleI(
    graphics: ?*GpGraphics,
    brush: ?*GpBrush,
    x: i32,
    y: i32,
    width: i32,
    height: i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipFillRectangles(
    graphics: ?*GpGraphics,
    brush: ?*GpBrush,
    rects: ?*const RectF,
    count: i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipFillRectanglesI(
    graphics: ?*GpGraphics,
    brush: ?*GpBrush,
    rects: ?*const Rect,
    count: i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipFillPolygon(
    graphics: ?*GpGraphics,
    brush: ?*GpBrush,
    points: ?*const PointF,
    count: i32,
    fillMode: FillMode,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipFillPolygonI(
    graphics: ?*GpGraphics,
    brush: ?*GpBrush,
    points: ?*const Point,
    count: i32,
    fillMode: FillMode,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipFillPolygon2(
    graphics: ?*GpGraphics,
    brush: ?*GpBrush,
    points: ?*const PointF,
    count: i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipFillPolygon2I(
    graphics: ?*GpGraphics,
    brush: ?*GpBrush,
    points: ?*const Point,
    count: i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipFillEllipse(
    graphics: ?*GpGraphics,
    brush: ?*GpBrush,
    x: f32,
    y: f32,
    width: f32,
    height: f32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipFillEllipseI(
    graphics: ?*GpGraphics,
    brush: ?*GpBrush,
    x: i32,
    y: i32,
    width: i32,
    height: i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipFillPie(
    graphics: ?*GpGraphics,
    brush: ?*GpBrush,
    x: f32,
    y: f32,
    width: f32,
    height: f32,
    startAngle: f32,
    sweepAngle: f32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipFillPieI(
    graphics: ?*GpGraphics,
    brush: ?*GpBrush,
    x: i32,
    y: i32,
    width: i32,
    height: i32,
    startAngle: f32,
    sweepAngle: f32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipFillPath(
    graphics: ?*GpGraphics,
    brush: ?*GpBrush,
    path: ?*GpPath,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipFillClosedCurve(
    graphics: ?*GpGraphics,
    brush: ?*GpBrush,
    points: ?*const PointF,
    count: i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipFillClosedCurveI(
    graphics: ?*GpGraphics,
    brush: ?*GpBrush,
    points: ?*const Point,
    count: i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipFillClosedCurve2(
    graphics: ?*GpGraphics,
    brush: ?*GpBrush,
    points: ?*const PointF,
    count: i32,
    tension: f32,
    fillMode: FillMode,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipFillClosedCurve2I(
    graphics: ?*GpGraphics,
    brush: ?*GpBrush,
    points: ?*const Point,
    count: i32,
    tension: f32,
    fillMode: FillMode,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipFillRegion(
    graphics: ?*GpGraphics,
    brush: ?*GpBrush,
    region: ?*GpRegion,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipDrawImageFX(
    graphics: ?*GpGraphics,
    image: ?*GpImage,
    source: ?*RectF,
    xForm: ?*Matrix,
    effect: ?*CGpEffect,
    imageAttributes: ?*GpImageAttributes,
    srcUnit: Unit,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipDrawImage(
    graphics: ?*GpGraphics,
    image: ?*GpImage,
    x: f32,
    y: f32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipDrawImageI(
    graphics: ?*GpGraphics,
    image: ?*GpImage,
    x: i32,
    y: i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipDrawImageRect(
    graphics: ?*GpGraphics,
    image: ?*GpImage,
    x: f32,
    y: f32,
    width: f32,
    height: f32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipDrawImageRectI(
    graphics: ?*GpGraphics,
    image: ?*GpImage,
    x: i32,
    y: i32,
    width: i32,
    height: i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipDrawImagePoints(
    graphics: ?*GpGraphics,
    image: ?*GpImage,
    dstpoints: ?*const PointF,
    count: i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipDrawImagePointsI(
    graphics: ?*GpGraphics,
    image: ?*GpImage,
    dstpoints: ?*const Point,
    count: i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipDrawImagePointRect(
    graphics: ?*GpGraphics,
    image: ?*GpImage,
    x: f32,
    y: f32,
    srcx: f32,
    srcy: f32,
    srcwidth: f32,
    srcheight: f32,
    srcUnit: Unit,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipDrawImagePointRectI(
    graphics: ?*GpGraphics,
    image: ?*GpImage,
    x: i32,
    y: i32,
    srcx: i32,
    srcy: i32,
    srcwidth: i32,
    srcheight: i32,
    srcUnit: Unit,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipDrawImageRectRect(
    graphics: ?*GpGraphics,
    image: ?*GpImage,
    dstx: f32,
    dsty: f32,
    dstwidth: f32,
    dstheight: f32,
    srcx: f32,
    srcy: f32,
    srcwidth: f32,
    srcheight: f32,
    srcUnit: Unit,
    imageAttributes: ?*const GpImageAttributes,
    callback: isize,
    callbackData: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipDrawImageRectRectI(
    graphics: ?*GpGraphics,
    image: ?*GpImage,
    dstx: i32,
    dsty: i32,
    dstwidth: i32,
    dstheight: i32,
    srcx: i32,
    srcy: i32,
    srcwidth: i32,
    srcheight: i32,
    srcUnit: Unit,
    imageAttributes: ?*const GpImageAttributes,
    callback: isize,
    callbackData: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipDrawImagePointsRect(
    graphics: ?*GpGraphics,
    image: ?*GpImage,
    points: ?*const PointF,
    count: i32,
    srcx: f32,
    srcy: f32,
    srcwidth: f32,
    srcheight: f32,
    srcUnit: Unit,
    imageAttributes: ?*const GpImageAttributes,
    callback: isize,
    callbackData: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipDrawImagePointsRectI(
    graphics: ?*GpGraphics,
    image: ?*GpImage,
    points: ?*const Point,
    count: i32,
    srcx: i32,
    srcy: i32,
    srcwidth: i32,
    srcheight: i32,
    srcUnit: Unit,
    imageAttributes: ?*const GpImageAttributes,
    callback: isize,
    callbackData: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipEnumerateMetafileDestPoint(
    graphics: ?*GpGraphics,
    metafile: ?*const GpMetafile,
    destPoint: ?*const PointF,
    callback: isize,
    callbackData: ?*anyopaque,
    imageAttributes: ?*const GpImageAttributes,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipEnumerateMetafileDestPointI(
    graphics: ?*GpGraphics,
    metafile: ?*const GpMetafile,
    destPoint: ?*const Point,
    callback: isize,
    callbackData: ?*anyopaque,
    imageAttributes: ?*const GpImageAttributes,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipEnumerateMetafileDestRect(
    graphics: ?*GpGraphics,
    metafile: ?*const GpMetafile,
    destRect: ?*const RectF,
    callback: isize,
    callbackData: ?*anyopaque,
    imageAttributes: ?*const GpImageAttributes,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipEnumerateMetafileDestRectI(
    graphics: ?*GpGraphics,
    metafile: ?*const GpMetafile,
    destRect: ?*const Rect,
    callback: isize,
    callbackData: ?*anyopaque,
    imageAttributes: ?*const GpImageAttributes,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipEnumerateMetafileDestPoints(
    graphics: ?*GpGraphics,
    metafile: ?*const GpMetafile,
    destPoints: ?*const PointF,
    count: i32,
    callback: isize,
    callbackData: ?*anyopaque,
    imageAttributes: ?*const GpImageAttributes,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipEnumerateMetafileDestPointsI(
    graphics: ?*GpGraphics,
    metafile: ?*const GpMetafile,
    destPoints: ?*const Point,
    count: i32,
    callback: isize,
    callbackData: ?*anyopaque,
    imageAttributes: ?*const GpImageAttributes,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipEnumerateMetafileSrcRectDestPoint(
    graphics: ?*GpGraphics,
    metafile: ?*const GpMetafile,
    destPoint: ?*const PointF,
    srcRect: ?*const RectF,
    srcUnit: Unit,
    callback: isize,
    callbackData: ?*anyopaque,
    imageAttributes: ?*const GpImageAttributes,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipEnumerateMetafileSrcRectDestPointI(
    graphics: ?*GpGraphics,
    metafile: ?*const GpMetafile,
    destPoint: ?*const Point,
    srcRect: ?*const Rect,
    srcUnit: Unit,
    callback: isize,
    callbackData: ?*anyopaque,
    imageAttributes: ?*const GpImageAttributes,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipEnumerateMetafileSrcRectDestRect(
    graphics: ?*GpGraphics,
    metafile: ?*const GpMetafile,
    destRect: ?*const RectF,
    srcRect: ?*const RectF,
    srcUnit: Unit,
    callback: isize,
    callbackData: ?*anyopaque,
    imageAttributes: ?*const GpImageAttributes,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipEnumerateMetafileSrcRectDestRectI(
    graphics: ?*GpGraphics,
    metafile: ?*const GpMetafile,
    destRect: ?*const Rect,
    srcRect: ?*const Rect,
    srcUnit: Unit,
    callback: isize,
    callbackData: ?*anyopaque,
    imageAttributes: ?*const GpImageAttributes,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipEnumerateMetafileSrcRectDestPoints(
    graphics: ?*GpGraphics,
    metafile: ?*const GpMetafile,
    destPoints: ?*const PointF,
    count: i32,
    srcRect: ?*const RectF,
    srcUnit: Unit,
    callback: isize,
    callbackData: ?*anyopaque,
    imageAttributes: ?*const GpImageAttributes,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipEnumerateMetafileSrcRectDestPointsI(
    graphics: ?*GpGraphics,
    metafile: ?*const GpMetafile,
    destPoints: ?*const Point,
    count: i32,
    srcRect: ?*const Rect,
    srcUnit: Unit,
    callback: isize,
    callbackData: ?*anyopaque,
    imageAttributes: ?*const GpImageAttributes,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipPlayMetafileRecord(
    metafile: ?*const GpMetafile,
    recordType: EmfPlusRecordType,
    flags: u32,
    dataSize: u32,
    data: ?*const u8,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipSetClipGraphics(
    graphics: ?*GpGraphics,
    srcgraphics: ?*GpGraphics,
    combineMode: CombineMode,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipSetClipRect(
    graphics: ?*GpGraphics,
    x: f32,
    y: f32,
    width: f32,
    height: f32,
    combineMode: CombineMode,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipSetClipRectI(
    graphics: ?*GpGraphics,
    x: i32,
    y: i32,
    width: i32,
    height: i32,
    combineMode: CombineMode,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipSetClipPath(
    graphics: ?*GpGraphics,
    path: ?*GpPath,
    combineMode: CombineMode,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipSetClipRegion(
    graphics: ?*GpGraphics,
    region: ?*GpRegion,
    combineMode: CombineMode,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipSetClipHrgn(
    graphics: ?*GpGraphics,
    hRgn: ?HRGN,
    combineMode: CombineMode,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipResetClip(
    graphics: ?*GpGraphics,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipTranslateClip(
    graphics: ?*GpGraphics,
    dx: f32,
    dy: f32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipTranslateClipI(
    graphics: ?*GpGraphics,
    dx: i32,
    dy: i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetClip(
    graphics: ?*GpGraphics,
    region: ?*GpRegion,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetClipBounds(
    graphics: ?*GpGraphics,
    rect: ?*RectF,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetClipBoundsI(
    graphics: ?*GpGraphics,
    rect: ?*Rect,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipIsClipEmpty(
    graphics: ?*GpGraphics,
    result: ?*BOOL,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetVisibleClipBounds(
    graphics: ?*GpGraphics,
    rect: ?*RectF,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetVisibleClipBoundsI(
    graphics: ?*GpGraphics,
    rect: ?*Rect,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipIsVisibleClipEmpty(
    graphics: ?*GpGraphics,
    result: ?*BOOL,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipIsVisiblePoint(
    graphics: ?*GpGraphics,
    x: f32,
    y: f32,
    result: ?*BOOL,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipIsVisiblePointI(
    graphics: ?*GpGraphics,
    x: i32,
    y: i32,
    result: ?*BOOL,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipIsVisibleRect(
    graphics: ?*GpGraphics,
    x: f32,
    y: f32,
    width: f32,
    height: f32,
    result: ?*BOOL,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipIsVisibleRectI(
    graphics: ?*GpGraphics,
    x: i32,
    y: i32,
    width: i32,
    height: i32,
    result: ?*BOOL,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipSaveGraphics(
    graphics: ?*GpGraphics,
    state: ?*u32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipRestoreGraphics(
    graphics: ?*GpGraphics,
    state: u32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipBeginContainer(
    graphics: ?*GpGraphics,
    dstrect: ?*const RectF,
    srcrect: ?*const RectF,
    unit: Unit,
    state: ?*u32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipBeginContainerI(
    graphics: ?*GpGraphics,
    dstrect: ?*const Rect,
    srcrect: ?*const Rect,
    unit: Unit,
    state: ?*u32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipBeginContainer2(
    graphics: ?*GpGraphics,
    state: ?*u32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipEndContainer(
    graphics: ?*GpGraphics,
    state: u32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetMetafileHeaderFromWmf(
    hWmf: ?HMETAFILE,
    wmfPlaceableFileHeader: ?*const WmfPlaceableFileHeader,
    header: ?*MetafileHeader,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetMetafileHeaderFromEmf(
    hEmf: ?HENHMETAFILE,
    header: ?*MetafileHeader,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetMetafileHeaderFromFile(
    filename: ?[*:0]align(1) const u16,
    header: ?*MetafileHeader,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetMetafileHeaderFromStream(
    stream: ?*IStream,
    header: ?*MetafileHeader,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetMetafileHeaderFromMetafile(
    metafile: ?*GpMetafile,
    header: ?*MetafileHeader,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetHemfFromMetafile(
    metafile: ?*GpMetafile,
    hEmf: ?*?HENHMETAFILE,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipCreateStreamOnFile(
    filename: ?[*:0]align(1) const u16,
    access: u32,
    stream: ?*?*IStream,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipCreateMetafileFromWmf(
    hWmf: ?HMETAFILE,
    deleteWmf: BOOL,
    wmfPlaceableFileHeader: ?*const WmfPlaceableFileHeader,
    metafile: ?*?*GpMetafile,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipCreateMetafileFromEmf(
    hEmf: ?HENHMETAFILE,
    deleteEmf: BOOL,
    metafile: ?*?*GpMetafile,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipCreateMetafileFromFile(
    file: ?[*:0]align(1) const u16,
    metafile: ?*?*GpMetafile,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipCreateMetafileFromWmfFile(
    file: ?[*:0]align(1) const u16,
    wmfPlaceableFileHeader: ?*const WmfPlaceableFileHeader,
    metafile: ?*?*GpMetafile,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipCreateMetafileFromStream(
    stream: ?*IStream,
    metafile: ?*?*GpMetafile,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipRecordMetafile(
    referenceHdc: ?HDC,
    type: EmfType,
    frameRect: ?*const RectF,
    frameUnit: MetafileFrameUnit,
    description: ?[*:0]align(1) const u16,
    metafile: ?*?*GpMetafile,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipRecordMetafileI(
    referenceHdc: ?HDC,
    type: EmfType,
    frameRect: ?*const Rect,
    frameUnit: MetafileFrameUnit,
    description: ?[*:0]align(1) const u16,
    metafile: ?*?*GpMetafile,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipRecordMetafileFileName(
    fileName: ?[*:0]align(1) const u16,
    referenceHdc: ?HDC,
    type: EmfType,
    frameRect: ?*const RectF,
    frameUnit: MetafileFrameUnit,
    description: ?[*:0]align(1) const u16,
    metafile: ?*?*GpMetafile,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipRecordMetafileFileNameI(
    fileName: ?[*:0]align(1) const u16,
    referenceHdc: ?HDC,
    type: EmfType,
    frameRect: ?*const Rect,
    frameUnit: MetafileFrameUnit,
    description: ?[*:0]align(1) const u16,
    metafile: ?*?*GpMetafile,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipRecordMetafileStream(
    stream: ?*IStream,
    referenceHdc: ?HDC,
    type: EmfType,
    frameRect: ?*const RectF,
    frameUnit: MetafileFrameUnit,
    description: ?[*:0]align(1) const u16,
    metafile: ?*?*GpMetafile,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipRecordMetafileStreamI(
    stream: ?*IStream,
    referenceHdc: ?HDC,
    type: EmfType,
    frameRect: ?*const Rect,
    frameUnit: MetafileFrameUnit,
    description: ?[*:0]align(1) const u16,
    metafile: ?*?*GpMetafile,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipSetMetafileDownLevelRasterizationLimit(
    metafile: ?*GpMetafile,
    metafileRasterizationLimitDpi: u32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetMetafileDownLevelRasterizationLimit(
    metafile: ?*const GpMetafile,
    metafileRasterizationLimitDpi: ?*u32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetImageDecodersSize(
    numDecoders: ?*u32,
    size: ?*u32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetImageDecoders(
    numDecoders: u32,
    size: u32,
    // TODO: what to do with BytesParamIndex 1?
    decoders: ?*ImageCodecInfo,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetImageEncodersSize(
    numEncoders: ?*u32,
    size: ?*u32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetImageEncoders(
    numEncoders: u32,
    size: u32,
    // TODO: what to do with BytesParamIndex 1?
    encoders: ?*ImageCodecInfo,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipComment(
    graphics: ?*GpGraphics,
    sizeData: u32,
    data: ?*const u8,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipCreateFontFamilyFromName(
    name: ?[*:0]align(1) const u16,
    fontCollection: ?*GpFontCollection,
    fontFamily: ?*?*GpFontFamily,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipDeleteFontFamily(
    fontFamily: ?*GpFontFamily,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipCloneFontFamily(
    fontFamily: ?*GpFontFamily,
    clonedFontFamily: ?*?*GpFontFamily,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetGenericFontFamilySansSerif(
    nativeFamily: ?*?*GpFontFamily,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetGenericFontFamilySerif(
    nativeFamily: ?*?*GpFontFamily,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetGenericFontFamilyMonospace(
    nativeFamily: ?*?*GpFontFamily,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetFamilyName(
    family: ?*const GpFontFamily,
    name: *[32]u16,
    language: u16,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipIsStyleAvailable(
    family: ?*const GpFontFamily,
    style: i32,
    IsStyleAvailable: ?*BOOL,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetEmHeight(
    family: ?*const GpFontFamily,
    style: i32,
    EmHeight: ?*u16,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetCellAscent(
    family: ?*const GpFontFamily,
    style: i32,
    CellAscent: ?*u16,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetCellDescent(
    family: ?*const GpFontFamily,
    style: i32,
    CellDescent: ?*u16,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetLineSpacing(
    family: ?*const GpFontFamily,
    style: i32,
    LineSpacing: ?*u16,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipCreateFontFromDC(
    hdc: ?HDC,
    font: ?*?*GpFont,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipCreateFontFromLogfontA(
    hdc: ?HDC,
    logfont: ?*const LOGFONTA,
    font: ?*?*GpFont,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipCreateFontFromLogfontW(
    hdc: ?HDC,
    logfont: ?*const LOGFONTW,
    font: ?*?*GpFont,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipCreateFont(
    fontFamily: ?*const GpFontFamily,
    emSize: f32,
    style: i32,
    unit: Unit,
    font: ?*?*GpFont,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipCloneFont(
    font: ?*GpFont,
    cloneFont: ?*?*GpFont,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipDeleteFont(
    font: ?*GpFont,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetFamily(
    font: ?*GpFont,
    family: ?*?*GpFontFamily,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetFontStyle(
    font: ?*GpFont,
    style: ?*i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetFontSize(
    font: ?*GpFont,
    size: ?*f32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetFontUnit(
    font: ?*GpFont,
    unit: ?*Unit,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetFontHeight(
    font: ?*const GpFont,
    graphics: ?*const GpGraphics,
    height: ?*f32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetFontHeightGivenDPI(
    font: ?*const GpFont,
    dpi: f32,
    height: ?*f32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetLogFontA(
    font: ?*GpFont,
    graphics: ?*GpGraphics,
    logfontA: ?*LOGFONTA,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetLogFontW(
    font: ?*GpFont,
    graphics: ?*GpGraphics,
    logfontW: ?*LOGFONTW,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipNewInstalledFontCollection(
    fontCollection: ?*?*GpFontCollection,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipNewPrivateFontCollection(
    fontCollection: ?*?*GpFontCollection,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipDeletePrivateFontCollection(
    fontCollection: ?*?*GpFontCollection,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetFontCollectionFamilyCount(
    fontCollection: ?*GpFontCollection,
    numFound: ?*i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetFontCollectionFamilyList(
    fontCollection: ?*GpFontCollection,
    numSought: i32,
    gpfamilies: [*]?*GpFontFamily,
    numFound: ?*i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipPrivateAddFontFile(
    fontCollection: ?*GpFontCollection,
    filename: ?[*:0]align(1) const u16,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipPrivateAddMemoryFont(
    fontCollection: ?*GpFontCollection,
    memory: ?*const anyopaque,
    length: i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipDrawString(
    graphics: ?*GpGraphics,
    string: ?[*:0]align(1) const u16,
    length: i32,
    font: ?*const GpFont,
    layoutRect: ?*const RectF,
    stringFormat: ?*const GpStringFormat,
    brush: ?*const GpBrush,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipMeasureString(
    graphics: ?*GpGraphics,
    string: ?[*:0]align(1) const u16,
    length: i32,
    font: ?*const GpFont,
    layoutRect: ?*const RectF,
    stringFormat: ?*const GpStringFormat,
    boundingBox: ?*RectF,
    codepointsFitted: ?*i32,
    linesFilled: ?*i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipMeasureCharacterRanges(
    graphics: ?*GpGraphics,
    string: ?[*:0]align(1) const u16,
    length: i32,
    font: ?*const GpFont,
    layoutRect: ?*const RectF,
    stringFormat: ?*const GpStringFormat,
    regionCount: i32,
    regions: ?*?*GpRegion,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipDrawDriverString(
    graphics: ?*GpGraphics,
    text: ?*const u16,
    length: i32,
    font: ?*const GpFont,
    brush: ?*const GpBrush,
    positions: ?*const PointF,
    flags: i32,
    matrix: ?*const Matrix,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipMeasureDriverString(
    graphics: ?*GpGraphics,
    text: ?*const u16,
    length: i32,
    font: ?*const GpFont,
    positions: ?*const PointF,
    flags: i32,
    matrix: ?*const Matrix,
    boundingBox: ?*RectF,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipCreateStringFormat(
    formatAttributes: i32,
    language: u16,
    format: ?*?*GpStringFormat,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipStringFormatGetGenericDefault(
    format: ?*?*GpStringFormat,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipStringFormatGetGenericTypographic(
    format: ?*?*GpStringFormat,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipDeleteStringFormat(
    format: ?*GpStringFormat,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipCloneStringFormat(
    format: ?*const GpStringFormat,
    newFormat: ?*?*GpStringFormat,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipSetStringFormatFlags(
    format: ?*GpStringFormat,
    flags: i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetStringFormatFlags(
    format: ?*const GpStringFormat,
    flags: ?*i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipSetStringFormatAlign(
    format: ?*GpStringFormat,
    @"align": StringAlignment,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetStringFormatAlign(
    format: ?*const GpStringFormat,
    @"align": ?*StringAlignment,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipSetStringFormatLineAlign(
    format: ?*GpStringFormat,
    @"align": StringAlignment,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetStringFormatLineAlign(
    format: ?*const GpStringFormat,
    @"align": ?*StringAlignment,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipSetStringFormatTrimming(
    format: ?*GpStringFormat,
    trimming: StringTrimming,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetStringFormatTrimming(
    format: ?*const GpStringFormat,
    trimming: ?*StringTrimming,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipSetStringFormatHotkeyPrefix(
    format: ?*GpStringFormat,
    hotkeyPrefix: i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetStringFormatHotkeyPrefix(
    format: ?*const GpStringFormat,
    hotkeyPrefix: ?*i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipSetStringFormatTabStops(
    format: ?*GpStringFormat,
    firstTabOffset: f32,
    count: i32,
    tabStops: ?*const f32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetStringFormatTabStops(
    format: ?*const GpStringFormat,
    count: i32,
    firstTabOffset: ?*f32,
    tabStops: ?*f32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetStringFormatTabStopCount(
    format: ?*const GpStringFormat,
    count: ?*i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipSetStringFormatDigitSubstitution(
    format: ?*GpStringFormat,
    language: u16,
    substitute: StringDigitSubstitute,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetStringFormatDigitSubstitution(
    format: ?*const GpStringFormat,
    language: ?*u16,
    substitute: ?*StringDigitSubstitute,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipGetStringFormatMeasurableCharacterRangeCount(
    format: ?*const GpStringFormat,
    count: ?*i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipSetStringFormatMeasurableCharacterRanges(
    format: ?*GpStringFormat,
    rangeCount: i32,
    ranges: ?*const CharacterRange,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipCreateCachedBitmap(
    bitmap: ?*GpBitmap,
    graphics: ?*GpGraphics,
    cachedBitmap: ?*?*GpCachedBitmap,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipDeleteCachedBitmap(
    cachedBitmap: ?*GpCachedBitmap,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipDrawCachedBitmap(
    graphics: ?*GpGraphics,
    cachedBitmap: ?*GpCachedBitmap,
    x: i32,
    y: i32,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipEmfToWmfBits(
    hemf: ?HENHMETAFILE,
    cbData16: u32,
    pData16: ?[*:0]u8,
    iMapMode: i32,
    eFlags: i32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "gdiplus" fn GdipSetImageAttributesCachedBackground(
    imageattr: ?*GpImageAttributes,
    enableFlag: BOOL,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipTestControl(
    control: GpTestControlEnum,
    param1: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdiplusNotificationHook(
    token: ?*usize,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdiplusNotificationUnhook(
    token: usize,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "gdiplus" fn GdipConvertToEmfPlus(
    refGraphics: ?*const GpGraphics,
    metafile: ?*GpMetafile,
    conversionFailureFlag: ?*i32,
    emfType: EmfType,
    description: ?[*:0]align(1) const u16,
    out_metafile: ?*?*GpMetafile,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipConvertToEmfPlusToFile(
    refGraphics: ?*const GpGraphics,
    metafile: ?*GpMetafile,
    conversionFailureFlag: ?*i32,
    filename: ?[*:0]align(1) const u16,
    emfType: EmfType,
    description: ?[*:0]align(1) const u16,
    out_metafile: ?*?*GpMetafile,
) callconv(@import("std").os.windows.WINAPI) Status;

pub extern "gdiplus" fn GdipConvertToEmfPlusToStream(
    refGraphics: ?*const GpGraphics,
    metafile: ?*GpMetafile,
    conversionFailureFlag: ?*i32,
    stream: ?*IStream,
    emfType: EmfType,
    description: ?[*:0]align(1) const u16,
    out_metafile: ?*?*GpMetafile,
) callconv(@import("std").os.windows.WINAPI) Status;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (2)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("../../../zig.zig").unicode_mode) {
    .ansi => struct {
        pub const GdipCreateFontFromLogfont = thismodule.GdipCreateFontFromLogfontA;
        pub const GdipGetLogFont = thismodule.GdipGetLogFontA;
    },
    .wide => struct {
        pub const GdipCreateFontFromLogfont = thismodule.GdipCreateFontFromLogfontW;
        pub const GdipGetLogFont = thismodule.GdipGetLogFontW;
    },
    .unspecified => if (@import("builtin").is_test) struct {
        pub const GdipCreateFontFromLogfont = *opaque{};
        pub const GdipGetLogFont = *opaque{};
    } else struct {
        pub const GdipCreateFontFromLogfont = @compileError("'GdipCreateFontFromLogfont' requires that UNICODE be set to true or false in the root module");
        pub const GdipGetLogFont = @compileError("'GdipGetLogFont' requires that UNICODE be set to true or false in the root module");
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (25)
//--------------------------------------------------------------------------------
const Guid = @import("../../../zig.zig").Guid;
const BITMAPINFO = @import("../../../windows/win32/graphics/gdi.zig").BITMAPINFO;
const BOOL = @import("../../../windows/win32/foundation.zig").BOOL;
const HANDLE = @import("../../../windows/win32/foundation.zig").HANDLE;
const HBITMAP = @import("../../../windows/win32/graphics/gdi.zig").HBITMAP;
const HDC = @import("../../../windows/win32/graphics/gdi.zig").HDC;
const HENHMETAFILE = @import("../../../windows/win32/graphics/gdi.zig").HENHMETAFILE;
const HICON = @import("../../../windows/win32/ui/windows_and_messaging.zig").HICON;
const HINSTANCE = @import("../../../windows/win32/foundation.zig").HINSTANCE;
const HMETAFILE = @import("../../../windows/win32/graphics/gdi.zig").HMETAFILE;
const HPALETTE = @import("../../../windows/win32/graphics/gdi.zig").HPALETTE;
const HRESULT = @import("../../../windows/win32/foundation.zig").HRESULT;
const HRGN = @import("../../../windows/win32/graphics/gdi.zig").HRGN;
const HWND = @import("../../../windows/win32/foundation.zig").HWND;
const IDirectDrawSurface7 = @import("../../../windows/win32/graphics/direct_draw.zig").IDirectDrawSurface7;
const IStream = @import("../../../windows/win32/system/com.zig").IStream;
const IUnknown = @import("../../../windows/win32/system/com.zig").IUnknown;
const LOGFONTA = @import("../../../windows/win32/graphics/gdi.zig").LOGFONTA;
const LOGFONTW = @import("../../../windows/win32/graphics/gdi.zig").LOGFONTW;
const METAHEADER = @import("../../../windows/win32/graphics/gdi.zig").METAHEADER;
const PSTR = @import("../../../windows/win32/foundation.zig").PSTR;
const PWSTR = @import("../../../windows/win32/foundation.zig").PWSTR;
const RECT = @import("../../../windows/win32/foundation.zig").RECT;
const RECTL = @import("../../../windows/win32/foundation.zig").RECTL;
const SIZE = @import("../../../windows/win32/foundation.zig").SIZE;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    if (@hasDecl(@This(), "ImageAbort")) { _ = ImageAbort; }
    if (@hasDecl(@This(), "DrawImageAbort")) { _ = DrawImageAbort; }
    if (@hasDecl(@This(), "GetThumbnailImageAbort")) { _ = GetThumbnailImageAbort; }
    if (@hasDecl(@This(), "EnumerateMetafileProc")) { _ = EnumerateMetafileProc; }
    if (@hasDecl(@This(), "DebugEventProc")) { _ = DebugEventProc; }
    if (@hasDecl(@This(), "NotificationHookProc")) { _ = NotificationHookProc; }
    if (@hasDecl(@This(), "NotificationUnhookProc")) { _ = NotificationUnhookProc; }

    @setEvalBranchQuota(
        comptime @import("std").meta.declarations(@This()).len * 3
    );

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
